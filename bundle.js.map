{"version":3,"sources":["webpack:///bundle.js","webpack:///webpack/bootstrap 72b15da47a830cab6827","webpack:///./js/index.tsx","webpack:///external \"React\"","webpack:///external \"ReactDOM\"","webpack:///./js/hello.js","webpack:///./~/immutable/dist/immutable.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","React","ReactDOM","hello_1","render","createElement","App","compiler","framework","document","getElementById","__extends","this","d","b","__","constructor","hasOwnProperty","prototype","Object","create","Immutable","map","Map","a","_super","apply","arguments","get","props","Component","global","factory","createClass","ctor","superClass","Iterable","value","isIterable","Seq","KeyedIterable","isKeyed","KeyedSeq","IndexedIterable","isIndexed","IndexedSeq","SetIterable","isAssociative","SetSeq","maybeIterable","IS_ITERABLE_SENTINEL","maybeKeyed","IS_KEYED_SENTINEL","maybeIndexed","IS_INDEXED_SENTINEL","maybeAssociative","isOrdered","maybeOrdered","IS_ORDERED_SENTINEL","MakeRef","ref","SetRef","OwnerID","arrCopy","arr","offset","len","Math","max","length","newArr","Array","ii","ensureSize","iter","undefined","size","__iterate","returnTrue","wrapIndex","index","uint32Index","NaN","wholeSlice","begin","end","resolveBegin","resolveIndex","resolveEnd","defaultIndex","min","Iterator","next","iteratorValue","type","k","v","iteratorResult","done","iteratorDone","hasIterator","getIteratorFn","isIterator","maybeIterator","getIterator","iterable","iteratorFn","REAL_ITERATOR_SYMBOL","FAUX_ITERATOR_SYMBOL","isArrayLike","emptySequence","toSeq","seqFromValue","toKeyedSeq","fromEntrySeq","keyedSeqFromValue","entrySeq","toIndexedSeq","indexedSeqFromValue","toSetSeq","ArraySeq","array","_array","ObjectSeq","object","keys","_object","_keys","IterableSeq","_iterable","IteratorSeq","iterator","_iterator","_iteratorCache","isSeq","maybeSeq","IS_SEQ_SENTINEL","EMPTY_SEQ","seq","isArray","TypeError","maybeIndexedSeqFromValue","seqIterate","fn","reverse","useKeys","cache","_cache","maxIndex","entry","__iterateUncached","seqIterator","__iteratorUncached","fromJS","json","converter","fromJSWith","","fromJSDefault","key","parentJSON","isPlainObj","toList","toMap","is","valueA","valueB","valueOf","equals","deepEqual","__hash","notAssociative","entries","every","flipped","cacheResult","_","allEqual","bSize","has","NOT_SET","Repeat","times","_value","Infinity","EMPTY_REPEAT","invariant","condition","error","Error","Range","start","step","abs","_start","_end","_step","ceil","EMPTY_RANGE","Collection","KeyedCollection","IndexedCollection","SetCollection","smi","i32","hash","o","h","STRING_HASH_CACHE_MIN_STRLEN","cachedHashString","hashString","hashCode","hashJSObj","toString","string","stringHashCache","STRING_HASH_CACHE_SIZE","STRING_HASH_CACHE_MAX_SIZE","charCodeAt","obj","usingWeakMap","weakMap","UID_HASH_KEY","canDefineProperty","propertyIsEnumerable","getIENodeHash","objHashUID","set","isExtensible","defineProperty","enumerable","configurable","writable","nodeType","node","uniqueID","documentElement","assertNotInfinite","emptyMap","isMap","withMutations","forEach","maybeMap","IS_MAP_SENTINEL","ArrayMapNode","ownerID","BitmapIndexedNode","bitmap","nodes","HashArrayMapNode","count","HashCollisionNode","keyHash","ValueNode","MapIterator","_type","_reverse","_stack","_root","mapIteratorFrame","mapIteratorValue","prev","__prev","makeMap","root","MapPrototype","__ownerID","__altered","EMPTY_MAP","updateMap","newRoot","newSize","didChangeSize","CHANGE_LENGTH","didAlter","DID_ALTER","updateNode","shift","update","isLeafNode","mergeIntoNode","newNode","idx1","MASK","idx2","SHIFT","createNodes","packNodes","excluding","packedII","packedNodes","bit","expandNodes","including","expandedNodes","SIZE","mergeIntoMapWith","merger","iterables","iters","push","mergeIntoCollectionWith","deepMerger","existing","mergeDeep","deepMergerWith","mergeDeepWith","nextValue","collection","filter","x","mergeIntoMap","updateInDeepMap","keyPathIter","notSetValue","updater","isNotSet","existingValue","newValue","nextExisting","nextUpdated","remove","popCount","setIn","idx","val","canEdit","newArray","spliceIn","newLen","after","spliceOut","pop","List","empty","emptyList","isList","makeList","VNode","toArray","list","setSize","i","maybeList","IS_LIST_SENTINEL","iterateList","iterateNodeOrLeaf","level","iterateLeaf","iterateNode","tailPos","tail","from","left","to","right","DONE","values","_origin","_capacity","getTailOffset","_tail","_level","origin","capacity","ListPrototype","EMPTY_LIST","updateList","setListBounds","newTail","updateVNode","nodeHas","lowerNode","newLowerNode","editableVNode","slice","listNodeFor","rawIndex","owner","oldOrigin","oldCapacity","newOrigin","newCapacity","clear","newLevel","offsetShift","oldTailOffset","newTailOffset","oldTail","removeAfter","removeBefore","beginIndex","mergeIntoListWith","maxSize","OrderedMap","emptyOrderedMap","isOrderedMap","maybeOrderedMap","makeOrderedMap","omap","_map","_list","EMPTY_ORDERED_MAP","updateOrderedMap","newMap","newList","flip","ToKeyedSequence","indexed","_iter","_useKeys","ToIndexedSequence","ToSetSequence","FromEntriesSequence","flipFactory","flipSequence","makeSequence","reversedSequence","includes","cacheResultThrough","this$0","ITERATE_ENTRIES","__iterator","ITERATE_VALUES","ITERATE_KEYS","mapFactory","mapper","context","mappedSequence","reverseFactory","filterFactory","predicate","filterSequence","iterations","countByFactory","grouper","groups","asMutable","asImmutable","groupByFactory","isKeyedIter","coerce","iterableClass","reify","sliceFactory","originalSize","resolvedBegin","resolvedEnd","sliceSize","resolvedSize","sliceSeq","skipped","isSkipping","takeWhileFactory","takeSequence","iterating","skipWhileFactory","skipSequence","skipping","concatFactory","isKeyedIterable","concat","singleton","concatSeq","flatten","reduce","sum","flattenFactory","depth","flatSequence","flatDeep","currentDepth","stopped","stack","flatMapFactory","interposeFactory","separator","interposedSequence","sortFactory","comparator","defaultComparator","sort","maxFactory","maxCompare","comp","zipWithFactory","keyIter","zipper","zipSequence","iterators","isDone","steps","some","s","validateEntry","resolveSize","forceIterator","keyPath","Record","defaultValues","name","hasInitialized","RecordType","setProps","RecordTypePrototype","_name","_defaultValues","RecordPrototype","makeRecord","likeRecord","record","getPrototypeOf","recordName","names","setProp","bind","Set","emptySet","isSet","add","maybeSet","IS_SET_SENTINEL","updateSet","__empty","__make","makeSet","SetPrototype","EMPTY_SET","OrderedSet","emptyOrderedSet","isOrderedSet","maybeOrderedSet","makeOrderedSet","OrderedSetPrototype","EMPTY_ORDERED_SET","Stack","emptyStack","isStack","unshiftAll","maybeStack","IS_STACK_SENTINEL","makeStack","head","StackPrototype","_head","EMPTY_STACK","mixin","methods","keyCopier","getOwnPropertySymbols","keyMapper","entryMapper","not","neg","quoteString","JSON","stringify","String","defaultZipper","defaultNegComparator","hashIterable","ordered","keyed","hashMerge","murmurHashOfSize","imul","SLICE$0","Keyed","Indexed","DELETE","Symbol","ITERATOR_SYMBOL","KEYS","VALUES","ENTRIES","inspect","toSource","of","__toString","searchValue","indexOf","lastIndexOf","other","possibleIndex","floor","offsetValue","e","WeakMap","keyValues","updateIn","deleteIn","updatedValue","merge","mergeWith","mergeIn","mergeDeepIn","sortBy","mutable","wasAltered","__ensureOwner","iterate","removeIn","removed","exists","MAX_ARRAY_MAP_SIZE","isEditable","newEntries","keyHashFrag","MAX_BITMAP_INDEXED_SIZE","newBitmap","newNodes","newCount","MIN_HASH_ARRAY_MAP_SIZE","keyMatch","subNode","splice","insert","oldSize","unshift","originIndex","newChild","removingFirst","oldChild","editable","sizeIndex","valueSeq","indexedIterable","defaultVal","_empty","fromKeys","keySeq","union","intersect","originalSet","subtract","peek","pushAll","toJS","__toJS","toJSON","toObject","toOrderedMap","toOrderedSet","toSet","toStack","__toStringMapper","join","returnValue","find","findEntry","sideEffect","joined","isFirst","reducer","initialReduction","reduction","useFirst","reduceRight","reversed","butLast","isEmpty","countBy","entriesSequence","filterNot","found","findKey","findLast","findLastEntry","findLastKey","first","flatMap","searchKey","getIn","searchKeyPath","nested","groupBy","hasIn","isSubset","isSuperset","keyOf","last","lastKeyOf","maxBy","minBy","rest","skip","amount","skipLast","skipWhile","skipUntil","take","takeLast","takeWhile","takeUntil","IterablePrototype","chain","contains","mapEntries","mapKeys","KeyedIterablePrototype","findIndex","removeNum","numArgs","spliced","findLastIndex","interpose","interleave","zipped","interleaved","zip","zipWith"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDMM,SAASI,EAAQD,EAASH,GAK/B,YE7CD,IAAiBW,GAAAX,EAAc,GACXY,EAAAZ,EAAkB,GAGtCa,EAAAb,EAA0C,EAElCY,GAAOE,OACbH,EAAAI,cAACF,EAAGG,KAASC,SAAa,aAAUC,UAAW,UACvCC,SAAeC,eACvB,SF6CI,SAAShB,EAAQD,GG1DvBC,EAAAD,QAAAQ,OHgEM,SAASP,EAAQD,GIhEvBC,EAAAD,QAAAS,UJsEM,SAASR,EAAQD,EAASH,GKtEhC,YACA,IAAAqB,GAAAC,WAAAD,WAAA,SAAAE,EAAAC,GAEA,QAAAC,KAAmBH,KAAAI,YAAAH,EADnB,OAAAb,KAAAc,KAAAG,eAAAjB,KAAAa,EAAAb,GAAAc,EAAAd,GAEAa,GAAAK,UAAA,OAAAJ,EAAAK,OAAAC,OAAAN,IAAAC,EAAAG,UAAAJ,EAAAI,UAAA,GAAAH,KAEAd,EAAAX,EAAA,GACA+B,EAAA/B,EAAA,GACAgC,EAAAD,EAAAE,KAAyBC,EAAA,EAAAV,EAAA,EAAAf,EAAA,IACzBO,EAAA,SAAAmB,GAEA,QAAAnB,KACAmB,EAAAC,MAAAd,KAAAe,WAWA,MAbAhB,GAAAL,EAAAmB,GAIAnB,EAAAY,UAAAd,OAAA,WACA,MAAAH,GAAAI,cAAA,SACAiB,EAAAM,IAAA,KACA,eACAhB,KAAAiB,MAAAtB,SACA,MACAK,KAAAiB,MAAArB,UACA,MAEAF,GACCL,EAAA6B,UACDrC,GAAAa,OL6EM,SAASZ,EAAQD,EAASH,IM7FhC,SAAAyC,EAAAC,GACAtC,EAAAD,QAAAuC,KAGCpB,KAAA,WAAoB,YAErB,SAAAqB,GAAAC,EAAAC,GACAA,IACAD,EAAAhB,UAAAC,OAAAC,OAAAe,EAAAjB,YAEAgB,EAAAhB,UAAAF,YAAAkB,EAGA,QAAAE,GAAAC,GACA,MAAAC,GAAAD,KAAAE,EAAAF,GAKA,QAAAG,GAAAH,GACA,MAAAI,GAAAJ,KAAAK,EAAAL,GAKA,QAAAM,GAAAN,GACA,MAAAO,GAAAP,KAAAQ,EAAAR,GAKA,QAAAS,GAAAT,GACA,MAAAC,GAAAD,KAAAU,EAAAV,KAAAW,EAAAX,GAKA,QAAAC,GAAAW,GACA,SAAAA,MAAAC,KAGA,QAAAT,GAAAU,GACA,SAAAA,MAAAC,KAGA,QAAAR,GAAAS,GACA,SAAAA,MAAAC,KAGA,QAAAP,GAAAQ,GACA,MAAAd,GAAAc,IAAAX,EAAAW,GAGA,QAAAC,GAAAC,GACA,SAAAA,MAAAC,KAmCA,QAAAC,GAAAC,GAEA,MADAA,GAAAvB,OAAA,EACAuB,EAGA,QAAAC,GAAAD,GACAA,MAAAvB,OAAA,GAMA,QAAAyB,MAGA,QAAAC,GAAAC,EAAAC,GACAA,KAAA,CAGA,QAFAC,GAAAC,KAAAC,IAAA,EAAAJ,EAAAK,OAAAJ,GACAK,EAAA,GAAAC,OAAAL,GACAM,EAAA,EAAoBN,EAAAM,EAAUA,IAC9BF,EAAAE,GAAAR,EAAAQ,EAAAP,EAEA,OAAAK,GAGA,QAAAG,GAAAC,GAIA,MAHAC,UAAAD,EAAAE,OACAF,EAAAE,KAAAF,EAAAG,UAAAC,IAEAJ,EAAAE,KAGA,QAAAG,GAAAL,EAAAM,GAQA,mBAAAA,GAAA,CACA,GAAAC,GAAAD,IAAA,CACA,OAAAC,IAAAD,GAAA,aAAAC,EACA,MAAAC,IAEAF,GAAAC,EAEA,SAAAD,EAAAP,EAAAC,GAAAM,IAGA,QAAAF,KACA,SAGA,QAAAK,GAAAC,EAAAC,EAAAT,GACA,WAAAQ,GAAAT,SAAAC,OAAAQ,KACAT,SAAAU,GAAAV,SAAAC,GAAAS,GAAAT,GAGA,QAAAU,GAAAF,EAAAR,GACA,MAAAW,GAAAH,EAAAR,EAAA,GAGA,QAAAY,GAAAH,EAAAT,GACA,MAAAW,GAAAF,EAAAT,KAGA,QAAAW,GAAAP,EAAAJ,EAAAa,GACA,MAAAd,UAAAK,EACAS,EACA,EAAAT,EACAb,KAAAC,IAAA,EAAAQ,EAAAI,GACAL,SAAAC,EACAI,EACAb,KAAAuB,IAAAd,EAAAI,GAeA,QAAAW,GAAAC,GACAhF,KAAAgF,OAmBA,QAAAC,GAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAA5D,GAAA,IAAAyD,EAAAC,EAAA,IAAAD,EAAAE,GAAAD,EAAAC,EAIA,OAHAC,KAAA5D,QAAA4D,GACA5D,QAAA6D,MAAA,GAEAD,EAGA,QAAAE,KACA,OAAY9D,MAAAsC,OAAAuB,MAAA,GAGZ,QAAAE,GAAAnD,GACA,QAAAoD,EAAApD,GAGA,QAAAqD,GAAAC,GACA,MAAAA,IAAA,kBAAAA,GAAAX,KAGA,QAAAY,GAAAC,GACA,GAAAC,GAAAL,EAAAI,EACA,OAAAC,MAAA7G,KAAA4G,GAGA,QAAAJ,GAAAI,GACA,GAAAC,GAAAD,IACAE,IAAAF,EAAAE,KACAF,EAAAG,IAEA,yBAAAF,GACAA,EADA,OAKA,QAAAG,GAAAxE,GACA,MAAAA,IAAA,gBAAAA,GAAAgC,OAIA,QAAA9B,GAAAF,GACA,cAAAA,GAAAsC,SAAAtC,EAAAyE,IACAxE,EAAAD,KAAA0E,QAAAC,EAAA3E,GAsCA,QAAAK,GAAAL,GACA,cAAAA,GAAAsC,SAAAtC,EACAyE,IAAAG,aACA3E,EAAAD,GACAI,EAAAJ,KAAA0E,QAAA1E,EAAA6E,eACAC,EAAA9E,GAUA,QAAAQ,GAAAR,GACA,cAAAA,GAAAsC,SAAAtC,EAAAyE,IACAxE,EAAAD,GACAI,EAAAJ,KAAA+E,WAAA/E,EAAAgF,eADAC,EAAAjF,GA2BA,QAAAW,GAAAX,GACA,OACA,OAAAA,GAAAsC,SAAAtC,EAAAyE,IACAxE,EAAAD,GACAI,EAAAJ,KAAA+E,WAAA/E,EADAiF,EAAAjF,IAEAkF,WAyBA,QAAAC,GAAAC,GACA7G,KAAA8G,OAAAD,EACA7G,KAAAgE,KAAA6C,EAAApD,OAgCA,QAAAsD,GAAAC,GACA,GAAAC,GAAA1G,OAAA0G,KAAAD,EACAhH,MAAAkH,QAAAF,EACAhH,KAAAmH,MAAAF,EACAjH,KAAAgE,KAAAiD,EAAAxD,OA4CA,QAAA2D,GAAAvB,GACA7F,KAAAqH,UAAAxB,EACA7F,KAAAgE,KAAA6B,EAAApC,QAAAoC,EAAA7B,KAwCA,QAAAsD,GAAAC,GACAvH,KAAAwH,UAAAD,EACAvH,KAAAyH,kBAkDA,QAAAC,GAAAC,GACA,SAAAA,MAAAC,KAKA,QAAA1B,KACA,MAAA2B,SAAA,GAAAjB,QAGA,QAAAL,GAAA9E,GACA,GAAAqG,GACAnE,MAAAoE,QAAAtG,GAAA,GAAAmF,GAAAnF,GAAA6E,eACAZ,EAAAjE,GAAA,GAAA6F,GAAA7F,GAAA6E,eACAd,EAAA/D,GAAA,GAAA2F,GAAA3F,GAAA6E,eACA,gBAAA7E,GAAA,GAAAsF,GAAAtF,GACAsC,MACA,KAAA+D,EACA,SAAAE,WACA,yEACAvG,EAGA,OAAAqG,GAGA,QAAApB,GAAAjF,GACA,GAAAqG,GAAAG,EAAAxG,EACA,KAAAqG,EACA,SAAAE,WACA,gDAAAvG,EAGA,OAAAqG,GAGA,QAAA1B,GAAA3E,GACA,GAAAqG,GAAAG,EAAAxG,IACA,gBAAAA,IAAA,GAAAsF,GAAAtF,EACA,KAAAqG,EACA,SAAAE,WACA,iEAAAvG,EAGA,OAAAqG,GAGA,QAAAG,GAAAxG,GACA,MACAwE,GAAAxE,GAAA,GAAAmF,GAAAnF,GACAiE,EAAAjE,GAAA,GAAA6F,GAAA7F,GACA+D,EAAA/D,GAAA,GAAA2F,GAAA3F,GACAsC,OAIA,QAAAmE,GAAAJ,EAAAK,EAAAC,EAAAC,GACA,GAAAC,GAAAR,EAAAS,MACA,IAAAD,EAAA,CAEA,OADAE,GAAAF,EAAA7E,OAAA,EACAG,EAAA,EAAsB4E,GAAA5E,EAAgBA,IAAA,CACtC,GAAA6E,GAAAH,EAAAF,EAAAI,EAAA5E,IACA,IAAAuE,EAAAM,EAAA,GAAAJ,EAAAI,EAAA,GAAA7E,EAAAkE,MAAA,EACA,MAAAlE,GAAA,EAGA,MAAAA,GAEA,MAAAkE,GAAAY,kBAAAP,EAAAC,GAGA,QAAAO,GAAAb,EAAA5C,EAAAkD,EAAAC,GACA,GAAAC,GAAAR,EAAAS,MACA,IAAAD,EAAA,CACA,GAAAE,GAAAF,EAAA7E,OAAA,EACAG,EAAA,CACA,WAAAmB,GAAA,WACA,GAAA0D,GAAAH,EAAAF,EAAAI,EAAA5E,IACA,OAAAA,KAAA4E,EACAjD,IACAN,EAAAC,EAAAmD,EAAAI,EAAA,GAAA7E,EAAA,EAAA6E,EAAA,MAGA,MAAAX,GAAAc,mBAAA1D,EAAAkD,GAGA,QAAAS,GAAAC,EAAAC,GACA,MAAAA,GACAC,EAAAD,EAAAD,EAAA,IAAuCG,GAAAH,IACvCI,EAAAJ,GAGA,QAAAE,GAAAD,EAAAD,EAAAK,EAAAC,GACA,MAAAzF,OAAAoE,QAAAe,GACAC,EAAA9J,KAAAmK,EAAAD,EAAAlH,EAAA6G,GAAApI,IAAA,SAAA0E,EAAAD,GAAmF,MAAA6D,GAAAD,EAAA3D,EAAAD,EAAA2D,MAEnFO,EAAAP,GACAC,EAAA9J,KAAAmK,EAAAD,EAAArH,EAAAgH,GAAApI,IAAA,SAAA0E,EAAAD,GAAiF,MAAA6D,GAAAD,EAAA3D,EAAAD,EAAA2D,MAEjFA,EAGA,QAAAI,GAAAJ,GACA,MAAAnF,OAAAoE,QAAAe,GACA7G,EAAA6G,GAAApI,IAAAwI,GAAAI,SAEAD,EAAAP,GACAhH,EAAAgH,GAAApI,IAAAwI,GAAAK,QAEAT,EAGA,QAAAO,GAAA5H,GACA,MAAAA,OAAArB,cAAAG,QAAAwD,SAAAtC,EAAArB,aAyDA,QAAAoJ,GAAAC,EAAAC,GACA,GAAAD,IAAAC,GAAAD,OAAAC,MACA,QAEA,KAAAD,IAAAC,EACA,QAEA,sBAAAD,GAAAE,SACA,kBAAAD,GAAAC,QAAA,CAGA,GAFAF,IAAAE,UACAD,IAAAC,UACAF,IAAAC,GAAAD,OAAAC,MACA,QAEA,KAAAD,IAAAC,EACA,SAGA,0BAAAD,GAAAG,QACA,kBAAAF,GAAAE,SACAH,EAAAG,OAAAF,IAMA,QAAAG,GAAAjJ,EAAAV,GACA,GAAAU,IAAAV,EACA,QAGA,KACAwB,EAAAxB,IACA6D,SAAAnD,EAAAoD,MAAAD,SAAA7D,EAAA8D,MAAApD,EAAAoD,OAAA9D,EAAA8D,MACAD,SAAAnD,EAAAkJ,QAAA/F,SAAA7D,EAAA4J,QAAAlJ,EAAAkJ,SAAA5J,EAAA4J,QACAjI,EAAAjB,KAAAiB,EAAA3B,IACA8B,EAAApB,KAAAoB,EAAA9B,IACA0C,EAAAhC,KAAAgC,EAAA1C,GAEA,QAGA,QAAAU,EAAAoD,MAAA,IAAA9D,EAAA8D,KACA,QAGA,IAAA+F,IAAA5H,EAAAvB,EAEA,IAAAgC,EAAAhC,GAAA,CACA,GAAAoJ,GAAApJ,EAAAoJ,SACA,OAAA9J,GAAA+J,MAAA,SAAA7E,EAAAD,GACA,GAAAsD,GAAAuB,EAAAhF,OAAAvD,KACA,OAAAgH,IAAAe,EAAAf,EAAA,GAAArD,KAAA2E,GAAAP,EAAAf,EAAA,GAAAtD,OACO6E,EAAAhF,OAAAM,KAGP,GAAA4E,IAAA,CAEA,IAAAnG,SAAAnD,EAAAoD,KACA,GAAAD,SAAA7D,EAAA8D,KACA,kBAAApD,GAAAuJ,aACAvJ,EAAAuJ,kBAEO,CACPD,GAAA,CACA,IAAAE,GAAAxJ,CACAA,GAAAV,EACAA,EAAAkK,EAIA,GAAAC,IAAA,EACAC,EAAApK,EAAA+D,UAAA,SAAAmB,EAAAD,GACA,OAAA4E,EAAAnJ,EAAA2J,IAAAnF,GACA8E,EAAAV,EAAApE,EAAAxE,EAAAI,IAAAmE,EAAAqF,KAAAhB,EAAA5I,EAAAI,IAAAmE,EAAAqF,IAAApF,IADA,QAEAiF,GAAA,GACA,IAIA,OAAAA,IAAAzJ,EAAAoD,OAAAsG,EAKA,QAAAG,GAAAhJ,EAAAiJ,GACA,KAAA1K,eAAAyK,IACA,UAAAA,GAAAhJ,EAAAiJ,EAIA,IAFA1K,KAAA2K,OAAAlJ,EACAzB,KAAAgE,KAAAD,SAAA2G,EAAAE,IAAArH,KAAAC,IAAA,EAAAkH,GACA,IAAA1K,KAAAgE,KAAA,CACA,GAAA6G,GACA,MAAAA,GAEAA,IAAA7K,MAoEA,QAAA8K,GAAAC,EAAAC,GACA,IAAAD,EAAA,SAAAE,OAAAD,GAKA,QAAAE,GAAAC,EAAA1G,EAAA2G,GACA,KAAApL,eAAAkL,IACA,UAAAA,GAAAC,EAAA1G,EAAA2G,EAeA,IAbAN,EAAA,IAAAM,EAAA,4BACAD,KAAA,EACApH,SAAAU,IACAA,EAAAmG,KAEAQ,EAAArH,SAAAqH,EAAA,EAAA7H,KAAA8H,IAAAD,GACAD,EAAA1G,IACA2G,MAEApL,KAAAsL,OAAAH,EACAnL,KAAAuL,KAAA9G,EACAzE,KAAAwL,MAAAJ,EACApL,KAAAgE,KAAAT,KAAAC,IAAA,EAAAD,KAAAkI,MAAAhH,EAAA0G,GAAAC,EAAA,MACA,IAAApL,KAAAgE,KAAA,CACA,GAAA0H,GACA,MAAAA,GAEAA,IAAA1L,MA2FA,QAAA2L,MACA,KAAA3D,WAAA,YAI2C,QAAA4D,OAEE,QAAAC,OAEJ,QAAAC,OAuBzC,QAAAC,IAAAC,GACA,MAAAA,KAAA,wBAAAA,EAGA,QAAAC,IAAAC,GACA,GAAAA,KAAA,UAAAA,GAAAnI,SAAAmI,EACA,QAEA,sBAAAA,GAAAvC,UACAuC,IAAAvC,UACAuC,KAAA,UAAAA,GAAAnI,SAAAmI,GACA,QAGA,IAAAA,KAAA,EACA,QAEA,IAAAhH,SAAAgH,EACA,eAAAhH,EAAA,CACA,GAAAgH,WAAAtB,IACA,QAEA,IAAAuB,GAAA,EAAAD,CAIA,KAHAC,IAAAD,IACAC,GAAA,WAAAD,GAEAA,EAAA,YACAA,GAAA,WACAC,GAAAD,CAEA,OAAAH,IAAAI,GAEA,cAAAjH,EACA,MAAAgH,GAAAzI,OAAA2I,GAAAC,GAAAH,GAAAI,GAAAJ,EAEA,sBAAAA,GAAAK,SACA,MAAAL,GAAAK,UAEA,eAAArH,EACA,MAAAsH,IAAAN,EAEA,sBAAAA,GAAAO,SACA,MAAAH,IAAAJ,EAAAO,WAEA,UAAAxB,OAAA,cAAA/F,EAAA,sBAGA,QAAAmH,IAAAK,GACA,GAAAT,GAAAU,GAAAD,EAUA,OATA3I,UAAAkI,IACAA,EAAAK,GAAAI,GACAE,KAAAC,KACAD,GAAA,EACAD,OAEAC,KACAD,GAAAD,GAAAT,GAEAA,EAIA,QAAAK,IAAAI,GAQA,OADAT,GAAA,EACArI,EAAA,EAAoBA,EAAA8I,EAAAjJ,OAAoBG,IACxCqI,EAAA,GAAAA,EAAAS,EAAAI,WAAAlJ,GAAA,CAEA,OAAAmI,IAAAE,GAGA,QAAAO,IAAAO,GACA,GAAAd,EACA,IAAAe,KACAf,EAAAgB,GAAAjM,IAAA+L,GACAhJ,SAAAkI,GACA,MAAAA,EAKA,IADAA,EAAAc,EAAAG,IACAnJ,SAAAkI,EACA,MAAAA,EAGA,KAAAkB,GAAA,CAEA,GADAlB,EAAAc,EAAAK,sBAAAL,EAAAK,qBAAAF,IACAnJ,SAAAkI,EACA,MAAAA,EAIA,IADAA,EAAAoB,GAAAN,GACAhJ,SAAAkI,EACA,MAAAA,GASA,GALAA,IAAAqB,GACA,WAAAA,KACAA,GAAA,GAGAN,GACAC,GAAAM,IAAAR,EAAAd,OACK,IAAAlI,SAAAyJ,OAAAT,MAAA,EACL,SAAA9B,OAAA,kDACK,IAAAkC,GACL5M,OAAAkN,eAAAV,EAAAG,IACAQ,YAAA,EACAC,cAAA,EACAC,UAAA,EACAnM,MAAAwK,QAEK,IAAAlI,SAAAgJ,EAAAK,sBACLL,EAAAK,uBAAAL,EAAA3M,YAAAE,UAAA8M,qBAKAL,EAAAK,qBAAA,WACA,MAAApN,MAAAI,YAAAE,UAAA8M,qBAAAtM,MAAAd,KAAAe,YAEAgM,EAAAK,qBAAAF,IAAAjB,MACK,IAAAlI,SAAAgJ,EAAAc,SAOL,SAAA5C,OAAA,qDAFA8B,GAAAG,IAAAjB,GAKA,MAAAA,GAkBA,QAAAoB,IAAAS,GACA,GAAAA,KAAAD,SAAA,EACA,OAAAC,EAAAD,UACA,OACA,MAAAC,GAAAC,QACA,QACA,MAAAD,GAAAE,iBAAAF,EAAAE,gBAAAD,UAwBA,QAAAE,IAAAjK,GACA8G,EACA9G,IAAA4G,IACA,qDAQA,QAAAjK,IAAAc,GACA,cAAAA,GAAAsC,SAAAtC,EAAAyM,KACAC,GAAA1M,KAAAmB,EAAAnB,KACAyM,KAAAE,cAAA,SAAA1N,GACA,GAAAoD,GAAAlC,EAAAH,EACAwM,IAAAnK,EAAAE,MACAF,EAAAuK,QAAA,SAAAjJ,EAAAD,GAAwC,MAAAzE,GAAA6M,IAAApI,EAAAC,OA6KxC,QAAA+I,IAAAG,GACA,SAAAA,MAAAC,KAiBA,QAAAC,IAAAC,EAAAzE,GACAhK,KAAAyO,UACAzO,KAAAgK,UAgEA,QAAA0E,IAAAD,EAAAE,EAAAC,GACA5O,KAAAyO,UACAzO,KAAA2O,SACA3O,KAAA4O,QAkEA,QAAAC,IAAAJ,EAAAK,EAAAF,GACA5O,KAAAyO,UACAzO,KAAA8O,QACA9O,KAAA4O,QAuDA,QAAAG,IAAAN,EAAAO,EAAAhF,GACAhK,KAAAyO,UACAzO,KAAAgP,UACAhP,KAAAgK,UAyEA,QAAAiF,IAAAR,EAAAO,EAAAvG,GACAzI,KAAAyO,UACAzO,KAAAgP,UACAhP,KAAAyI,QAgEA,QAAAyG,IAAAxO,EAAAwE,EAAAkD,GACApI,KAAAmP,MAAAjK,EACAlF,KAAAoP,SAAAhH,EACApI,KAAAqP,OAAA3O,EAAA4O,OAAAC,GAAA7O,EAAA4O,OAsCA,QAAAE,IAAAtK,EAAAuD,GACA,MAAAxD,GAAAC,EAAAuD,EAAA,GAAAA,EAAA,IAGA,QAAA8G,IAAAzB,EAAA2B,GACA,OACA3B,OACA1J,MAAA,EACAsL,OAAAD,GAIA,QAAAE,IAAA3L,EAAA4L,EAAAnB,EAAAxC,GACA,GAAAvL,GAAAH,OAAAC,OAAAqP,GAMA,OALAnP,GAAAsD,OACAtD,EAAA4O,MAAAM,EACAlP,EAAAoP,UAAArB,EACA/N,EAAAoJ,OAAAmC,EACAvL,EAAAqP,WAAA,EACArP,EAIA,QAAAwN,MACA,MAAA8B,SAAAL,GAAA,IAGA,QAAAM,IAAAvP,EAAAyE,EAAAC,GACA,GAAA8K,GACAC,CACA,IAAAzP,EAAA4O,MAMK,CACL,GAAAc,GAAArN,EAAAsN,IACAC,EAAAvN,EAAAwN,GAEA,IADAL,EAAAM,GAAA9P,EAAA4O,MAAA5O,EAAAoP,UAAA,EAAA/L,OAAAoB,EAAAC,EAAAgL,EAAAE,IACAA,EAAA7O,MACA,MAAAf,EAEAyP,GAAAzP,EAAAsD,MAAAoM,EAAA3O,MAAA2D,IAAAoF,GAAA,YAbA,CACA,GAAApF,IAAAoF,GACA,MAAA9J,EAEAyP,GAAA,EACAD,EAAA,GAAA1B,IAAA9N,EAAAoP,YAAA3K,EAAAC,KAUA,MAAA1E,GAAAoP,WACApP,EAAAsD,KAAAmM,EACAzP,EAAA4O,MAAAY,EACAxP,EAAAoJ,OAAA/F,OACArD,EAAAqP,WAAA,EACArP,GAEAwP,EAAAP,GAAAQ,EAAAD,GAAAhC,KAGA,QAAAsC,IAAA1C,EAAAW,EAAAgC,EAAAzB,EAAA7F,EAAA1H,EAAA2O,EAAAE,GACA,MAAAxC,GAQAA,EAAA4C,OAAAjC,EAAAgC,EAAAzB,EAAA7F,EAAA1H,EAAA2O,EAAAE,GAPA7O,IAAA+I,GACAsD,GAEA7K,EAAAqN,GACArN,EAAAmN,GACA,GAAAnB,IAAAR,EAAAO,GAAA7F,EAAA1H,KAKA,QAAAkP,IAAA7C,GACA,MAAAA,GAAA1N,cAAA6O,IAAAnB,EAAA1N,cAAA2O,GAGA,QAAA6B,IAAA9C,EAAAW,EAAAgC,EAAAzB,EAAAvG,GACA,GAAAqF,EAAAkB,YACA,UAAAD,IAAAN,EAAAO,GAAAlB,EAAArF,SAGA,IAGAoI,GAHAC,GAAA,IAAAL,EAAA3C,EAAAkB,QAAAlB,EAAAkB,UAAAyB,GAAAM,GACAC,GAAA,IAAAP,EAAAzB,MAAAyB,GAAAM,GAGAnC,EAAAkC,IAAAE,GACAJ,GAAA9C,EAAAW,EAAAgC,EAAAQ,GAAAjC,EAAAvG,KACAoI,EAAA,GAAA5B,IAAAR,EAAAO,EAAAvG,GAAAuI,EAAAF,GAAAhD,EAAA+C,MAAA/C,GAEA,WAAAY,IAAAD,EAAA,GAAAqC,EAAA,GAAAE,EAAApC,GAGA,QAAAsC,IAAAzC,EAAAzE,EAAAb,EAAA1H,GACAgN,IACAA,EAAA,GAAAvL,GAGA,QADA4K,GAAA,GAAAmB,IAAAR,EAAAxC,GAAA9C,MAAA1H,IACAmC,EAAA,EAAoBA,EAAAoG,EAAAvG,OAAqBG,IAAA,CACzC,GAAA6E,GAAAuB,EAAApG,EACAkK,KAAA4C,OAAAjC,EAAA,EAAA1K,OAAA0E,EAAA,GAAAA,EAAA,IAEA,MAAAqF,GAGA,QAAAqD,IAAA1C,EAAAG,EAAAE,EAAAsC,GAIA,OAHAzC,GAAA,EACA0C,EAAA,EACAC,EAAA,GAAA3N,OAAAmL,GACAlL,EAAA,EAAA2N,EAAA,EAAAjO,EAAAsL,EAAAnL,OAAiDH,EAAAM,EAAUA,IAAA2N,IAAA,GAC3D,GAAAzD,GAAAc,EAAAhL,EACAG,UAAA+J,GAAAlK,IAAAwN,IACAzC,GAAA4C,EACAD,EAAAD,KAAAvD,GAGA,UAAAY,IAAAD,EAAAE,EAAA2C,GAGA,QAAAE,IAAA/C,EAAAG,EAAAD,EAAA8C,EAAA3D,GAGA,OAFAgB,GAAA,EACA4C,EAAA,GAAA/N,OAAAgO,IACA/N,EAAA,EAAoB,IAAA+K,EAAc/K,IAAA+K,KAAA,EAClC+C,EAAA9N,GAAA,EAAA+K,EAAAC,EAAAE,KAAA/K,MAGA,OADA2N,GAAAD,GAAA3D,EACA,GAAAe,IAAAJ,EAAAK,EAAA,EAAA4C,GAGA,QAAAE,IAAAlR,EAAAmR,EAAAC,GAEA,OADAC,MACAnO,EAAA,EAAoBA,EAAAkO,EAAArO,OAAuBG,IAAA,CAC3C,GAAAnC,GAAAqQ,EAAAlO,GACAE,EAAAlC,EAAAH,EACAC,GAAAD,KACAqC,IAAApD,IAAA,SAAA0E,GAAsC,MAAAyD,GAAAzD,MAEtC2M,EAAAC,KAAAlO,GAEA,MAAAmO,IAAAvR,EAAAmR,EAAAE,GAGA,QAAAG,IAAAC,EAAA1Q,EAAA0H,GACA,MAAAgJ,MAAAC,WAAA1Q,EAAAD,GACA0Q,EAAAC,UAAA3Q,GACA+H,EAAA2I,EAAA1Q,GAAA0Q,EAAA1Q,EAGA,QAAA4Q,IAAAR,GACA,gBAAAM,EAAA1Q,EAAA0H,GACA,GAAAgJ,KAAAG,eAAA5Q,EAAAD,GACA,MAAA0Q,GAAAG,cAAAT,EAAApQ,EAEA,IAAA8Q,GAAAV,EAAAM,EAAA1Q,EAAA0H,EACA,OAAAK,GAAA2I,EAAAI,GAAAJ,EAAAI,GAIA,QAAAN,IAAAO,EAAAX,EAAAE,GAEA,MADAA,KAAAU,OAAA,SAAAC,GAAuC,WAAAA,EAAA1O,OACvC,IAAA+N,EAAAtO,OACA+O,EAEA,IAAAA,EAAAxO,MAAAwO,EAAA1C,WAAA,IAAAiC,EAAAtO,OAGA+O,EAAApE,cAAA,SAAAoE,GAUA,OATAG,GAAAd,EACA,SAAApQ,EAAA0H,GACAqJ,EAAA9B,OAAAvH,EAAAqB,GAAA,SAAA2H,GACa,MAAAA,KAAA3H,GAAA/I,EAAAoQ,EAAAM,EAAA1Q,EAAA0H,MAGb,SAAA1H,EAAA0H,GACAqJ,EAAAjF,IAAApE,EAAA1H,IAEAmC,EAAA,EAAsBA,EAAAmO,EAAAtO,OAAmBG,IACzCmO,EAAAnO,GAAAyK,QAAAsE,KAbAH,EAAApS,YAAA2R,EAAA,IAkBA,QAAAa,IAAAT,EAAAU,EAAAC,EAAAC,GACA,GAAAC,GAAAb,IAAA3H,GACAY,EAAAyH,EAAA7N,MACA,IAAAoG,EAAA9F,KAAA,CACA,GAAA2N,GAAAD,EAAAF,EAAAX,EACAe,EAAAH,EAAAE,EACA,OAAAC,KAAAD,EAAAd,EAAAe,EAEApI,EACAkI,GAAAb,KAAA5E,IACA,kBAEA,IAAApE,GAAAiC,EAAA3J,MACA0R,EAAAH,EAAAxI,GAAA2H,EAAAnR,IAAAmI,EAAAqB,IACA4I,EAAAR,GACAO,EACAN,EACAC,EACAC,EAEA,OAAAK,KAAAD,EAAAhB,EACAiB,IAAA5I,GAAA2H,EAAAkB,OAAAlK,IACA6J,EAAA9E,KAAAiE,GAAA5E,IAAApE,EAAAiK,GAGA,QAAAE,IAAAZ,GAMA,MALAA,OAAA,aACAA,GAAA,UAAAA,OAAA,aACAA,QAAA,aACAA,MAAA,EACAA,MAAA,GACA,IAAAA,EAGA,QAAAa,IAAA1M,EAAA2M,EAAAC,EAAAC,GACA,GAAAC,GAAAD,EAAA7M,EAAA1D,EAAA0D,EAEA,OADA8M,GAAAH,GAAAC,EACAE,EAGA,QAAAC,IAAA/M,EAAA2M,EAAAC,EAAAC,GACA,GAAAG,GAAAhN,EAAApD,OAAA,CACA,IAAAiQ,GAAAF,EAAA,IAAAK,EAEA,MADAhN,GAAA2M,GAAAC,EACA5M,CAIA,QAFA8M,GAAA,GAAAhQ,OAAAkQ,GACAC,EAAA,EACAlQ,EAAA,EAAoBiQ,EAAAjQ,EAAaA,IACjCA,IAAA4P,GACAG,EAAA/P,GAAA6P,EACAK,EAAA,IAEAH,EAAA/P,GAAAiD,EAAAjD,EAAAkQ,EAGA,OAAAH,GAGA,QAAAI,IAAAlN,EAAA2M,EAAAE,GACA,GAAAG,GAAAhN,EAAApD,OAAA,CACA,IAAAiQ,GAAAF,IAAAK,EAEA,MADAhN,GAAAmN,MACAnN,CAIA,QAFA8M,GAAA,GAAAhQ,OAAAkQ,GACAC,EAAA,EACAlQ,EAAA,EAAoBiQ,EAAAjQ,EAAaA,IACjCA,IAAA4P,IACAM,EAAA,GAEAH,EAAA/P,GAAAiD,EAAAjD,EAAAkQ,EAEA,OAAAH,GAWA,QAAAM,IAAAxS,GACA,GAAAyS,GAAAC,IACA,WAAA1S,GAAAsC,SAAAtC,EACA,MAAAyS,EAEA,IAAAE,GAAA3S,GACA,MAAAA,EAEA,IAAAqC,GAAA/B,EAAAN,GACAuC,EAAAF,EAAAE,IACA,YAAAA,EACAkQ,GAEAjG,GAAAjK,GACAA,EAAA,GAAA2N,GAAA3N,EACAqQ,GAAA,EAAArQ,EAAAiN,GAAA,QAAAqD,IAAAxQ,EAAAyQ,YAEAL,EAAA9F,cAAA,SAAAoG,GACAA,EAAAC,QAAAzQ,GACAF,EAAAuK,QAAA,SAAAjJ,EAAAsP,GAAsC,MAAAF,GAAAjH,IAAAmH,EAAAtP,QA4JtC,QAAAgP,IAAAO,GACA,SAAAA,MAAAC,KAwBA,QAAAN,IAAAzN,EAAA4H,GACAzO,KAAA6G,QACA7G,KAAAyO,UAmEA,QAAAoG,IAAAL,EAAApM,GAQA,QAAA0M,GAAAhH,EAAAiH,EAAA1R,GACA,WAAA0R,EACAC,EAAAlH,EAAAzK,GACA4R,EAAAnH,EAAAiH,EAAA1R,GAGA,QAAA2R,GAAAlH,EAAAzK,GACA,GAAAwD,GAAAxD,IAAA6R,EAAAC,KAAAtO,MAAAiH,KAAAjH,MACAuO,EAAA/R,EAAAgS,EAAA,EAAAA,EAAAhS,EACAiS,EAAAC,EAAAlS,CAIA,OAHAiS,GAAA3D,KACA2D,EAAA3D,IAEA,WACA,GAAAyD,IAAAE,EACA,MAAAE,GAEA,IAAAhC,GAAApL,IAAAkN,EAAAF,GACA,OAAAvO,MAAA2M,IAIA,QAAAyB,GAAAnH,EAAAiH,EAAA1R,GACA,GAAAoS,GACA5O,EAAAiH,KAAAjH,MACAuO,EAAA/R,EAAAgS,EAAA,EAAAA,EAAAhS,GAAA0R,EACAO,GAAAC,EAAAlS,GAAA0R,GAAA,CAIA,OAHAO,GAAA3D,KACA2D,EAAA3D,IAEA,WACA,QACA,GAAA8D,EAAA,CACA,GAAAhU,GAAAgU,GACA,IAAAhU,IAAA+T,GACA,MAAA/T,EAEAgU,GAAA,KAEA,GAAAL,IAAAE,EACA,MAAAE,GAEA,IAAAhC,GAAApL,IAAAkN,EAAAF,GACAK,GAAAX,EACAjO,KAAA2M,GAAAuB,EAAA9D,GAAA5N,GAAAmQ,GAAAuB,MAnDA,GAAAM,GAAAb,EAAAkB,QACAH,EAAAf,EAAAmB,UACAT,EAAAU,GAAAL,GACAJ,EAAAX,EAAAqB,KAEA,OAAAf,GAAAN,EAAAlF,MAAAkF,EAAAsB,OAAA,GAqDA,QAAAzB,IAAA0B,EAAAC,EAAAjB,EAAAnF,EAAAuF,EAAA1G,EAAAxC,GACA,GAAAuI,GAAAjU,OAAAC,OAAAyV,GAUA,OATAzB,GAAAxQ,KAAAgS,EAAAD,EACAvB,EAAAkB,QAAAK,EACAvB,EAAAmB,UAAAK,EACAxB,EAAAsB,OAAAf,EACAP,EAAAlF,MAAAM,EACA4E,EAAAqB,MAAAV,EACAX,EAAA1E,UAAArB,EACA+F,EAAA1K,OAAAmC,EACAuI,EAAAzE,WAAA,EACAyE,EAIA,QAAAL,MACA,MAAA+B,SAAA7B,GAAA,IAAApD,KAGA,QAAAkF,IAAA3B,EAAApQ,EAAA3C,GAGA,GAFA2C,EAAAD,EAAAqQ,EAAApQ,GAEAA,MACA,MAAAoQ,EAGA,IAAApQ,GAAAoQ,EAAAxQ,MAAA,EAAAI,EACA,MAAAoQ,GAAApG,cAAA,SAAAoG,GACA,EAAApQ,EACAgS,GAAA5B,EAAApQ,GAAAmJ,IAAA,EAAA9L,GACA2U,GAAA5B,EAAA,EAAApQ,EAAA,GAAAmJ,IAAAnJ,EAAA3C,IAIA2C,IAAAoQ,EAAAkB,OAEA,IAAAW,GAAA7B,EAAAqB,MACA3F,EAAAsE,EAAAlF,MACAgB,EAAAvN,EAAAwN,GAOA,OANAnM,IAAAwR,GAAApB,EAAAmB,WACAU,EAAAC,GAAAD,EAAA7B,EAAA1E,UAAA,EAAA1L,EAAA3C,EAAA6O,GAEAJ,EAAAoG,GAAApG,EAAAsE,EAAA1E,UAAA0E,EAAAsB,OAAA1R,EAAA3C,EAAA6O,GAGAA,EAAA7O,MAIA+S,EAAA1E,WACA0E,EAAAlF,MAAAY,EACAsE,EAAAqB,MAAAQ,EACA7B,EAAA1K,OAAA/F,OACAyQ,EAAAzE,WAAA,EACAyE,GAEAH,GAAAG,EAAAkB,QAAAlB,EAAAmB,UAAAnB,EAAAsB,OAAA5F,EAAAmG,GAVA7B,EAaA,QAAA8B,IAAAxI,EAAAW,EAAAsG,EAAA3Q,EAAA3C,EAAA6O,GACA,GAAAkD,GAAApP,IAAA2Q,EAAAhE,GACAwF,EAAAzI,GAAA0F,EAAA1F,EAAAjH,MAAApD,MACA,KAAA8S,GAAAxS,SAAAtC,EACA,MAAAqM,EAGA,IAAA+C,EAEA,IAAAkE,EAAA,GACA,GAAAyB,GAAA1I,KAAAjH,MAAA2M,GACAiD,EAAAH,GAAAE,EAAA/H,EAAAsG,EAAA9D,GAAA7M,EAAA3C,EAAA6O,EACA,OAAAmG,KAAAD,EACA1I,GAEA+C,EAAA6F,GAAA5I,EAAAW,GACAoC,EAAAhK,MAAA2M,GAAAiD,EACA5F,GAGA,MAAA0F,IAAAzI,EAAAjH,MAAA2M,KAAA/R,EACAqM,GAGA7K,EAAAqN,GAEAO,EAAA6F,GAAA5I,EAAAW,GACA1K,SAAAtC,GAAA+R,IAAA3C,EAAAhK,MAAApD,OAAA,EACAoN,EAAAhK,MAAAmN,MAEAnD,EAAAhK,MAAA2M,GAAA/R,EAEAoP,GAGA,QAAA6F,IAAA5I,EAAAW,GACA,MAAAA,IAAAX,GAAAW,IAAAX,EAAAW,QACAX,EAEA,GAAAwG,IAAAxG,IAAAjH,MAAA8P,WAAAlI,GAGA,QAAAmI,IAAApC,EAAAqC,GACA,GAAAA,GAAAjB,GAAApB,EAAAmB,WACA,MAAAnB,GAAAqB,KAEA,IAAAgB,EAAA,GAAArC,EAAAsB,OAAA7E,GAAA,CAGA,IAFA,GAAAnD,GAAA0G,EAAAlF,MACAyF,EAAAP,EAAAsB,OACAhI,GAAAiH,EAAA,GACAjH,IAAAjH,MAAAgQ,IAAA9B,EAAAhE,IACAgE,GAAA9D,EAEA,OAAAnD,IAIA,QAAAsI,IAAA5B,EAAAhQ,EAAAC,GAGAV,SAAAS,IACAA,EAAA,EAAAA,GAEAT,SAAAU,IACAA,EAAA,EAAAA,EAEA,IAAAqS,GAAAtC,EAAA1E,WAAA,GAAA5M,GACA6T,EAAAvC,EAAAkB,QACAsB,EAAAxC,EAAAmB,UACAsB,EAAAF,EAAAvS,EACA0S,EAAAnT,SAAAU,EAAAuS,EAAA,EAAAvS,EAAAuS,EAAAvS,EAAAsS,EAAAtS,CACA,IAAAwS,IAAAF,GAAAG,IAAAF,EACA,MAAAxC,EAIA,IAAAyC,GAAAC,EACA,MAAA1C,GAAA2C,OAQA,KALA,GAAAC,GAAA5C,EAAAsB,OACA5F,EAAAsE,EAAAlF,MAGA+H,EAAA,EACA,EAAAJ,EAAAI,GACAnH,EAAA,GAAAoE,IAAApE,KAAArJ,MAAApD,QAAAM,OAAAmM,MAAA4G,GACAM,GAAAnG,GACAoG,GAAA,GAAAD,CAEAC,KACAJ,GAAAI,EACAN,GAAAM,EACAH,GAAAG,EACAL,GAAAK,EAOA,KAJA,GAAAC,GAAA1B,GAAAoB,GACAO,EAAA3B,GAAAsB,GAGAK,GAAA,GAAAH,EAAAnG,IACAf,EAAA,GAAAoE,IAAApE,KAAArJ,MAAApD,QAAAyM,MAAA4G,GACAM,GAAAnG,EAIA,IAAAuG,GAAAhD,EAAAqB,MACAQ,EAAAiB,EAAAC,EACAX,GAAApC,EAAA0C,EAAA,GACAK,EAAAD,EAAA,GAAAhD,OAAAwC,GAAAU,CAGA,IAAAA,GAAAD,EAAAD,GAAAN,EAAAC,GAAAO,EAAA3Q,MAAApD,OAAA,CACAyM,EAAAwG,GAAAxG,EAAA4G,EAEA,QADAhJ,GAAAoC,EACA6E,EAAAqC,EAAgCrC,EAAA9D,GAAe8D,GAAA9D,GAAA,CAC/C,GAAAuC,GAAA8D,IAAAvC,EAAAhE,EACAjD,KAAAjH,MAAA2M,GAAAkD,GAAA5I,EAAAjH,MAAA2M,GAAAsD,GAEAhJ,EAAAjH,MAAAyQ,IAAArG,GAAAF,IAAAyG,EASA,GALAR,EAAAE,IACAb,OAAAoB,YAAAX,EAAA,EAAAI,IAIAD,GAAAM,EACAN,GAAAM,EACAL,GAAAK,EACAH,EAAAnG,GACAf,EAAA,KACAmG,OAAAqB,aAAAZ,EAAA,EAAAG,OAGK,IAAAA,EAAAF,GAAAO,EAAAC,EAAA,CAIL,IAHAF,EAAA,EAGAnH,GAAA,CACA,GAAAyH,GAAAV,IAAAG,EAAArG,EACA,IAAA4G,IAAAJ,IAAAH,EAAArG,GACA,KAEA4G,KACAN,IAAA,GAAAD,GAAAO,GAEAP,GAAAnG,GACAf,IAAArJ,MAAA8Q,GAIAzH,GAAA+G,EAAAF,IACA7G,IAAAwH,aAAAZ,EAAAM,EAAAH,EAAAI,IAEAnH,GAAAoH,EAAAC,IACArH,IAAAuH,YAAAX,EAAAM,EAAAG,EAAAF,IAEAA,IACAJ,GAAAI,EACAH,GAAAG,GAIA,MAAA7C,GAAA1E,WACA0E,EAAAxQ,KAAAkT,EAAAD,EACAzC,EAAAkB,QAAAuB,EACAzC,EAAAmB,UAAAuB,EACA1C,EAAAsB,OAAAsB,EACA5C,EAAAlF,MAAAY,EACAsE,EAAAqB,MAAAQ,EACA7B,EAAA1K,OAAA/F,OACAyQ,EAAAzE,WAAA,EACAyE,GAEAH,GAAA4C,EAAAC,EAAAE,EAAAlH,EAAAmG,GAGA,QAAAuB,IAAApD,EAAA3C,EAAAC,GAGA,OAFAC,MACA8F,EAAA,EACAjU,EAAA,EAAoBA,EAAAkO,EAAArO,OAAuBG,IAAA,CAC3C,GAAAnC,GAAAqQ,EAAAlO,GACAE,EAAA/B,EAAAN,EACAqC,GAAAE,KAAA6T,IACAA,EAAA/T,EAAAE,MAEAtC,EAAAD,KACAqC,IAAApD,IAAA,SAAA0E,GAAsC,MAAAyD,GAAAzD,MAEtC2M,EAAAC,KAAAlO,GAKA,MAHA+T,GAAArD,EAAAxQ,OACAwQ,IAAAC,QAAAoD,IAEA5F,GAAAuC,EAAA3C,EAAAE,GAGA,QAAA6D,IAAA5R,GACA,MAAA2N,IAAA3N,EAAA,EAAAA,EAAA,IAAAiN,OAOA,QAAA6G,IAAArW,GACA,cAAAA,GAAAsC,SAAAtC,EAAAsW,KACAC,GAAAvW,KACAsW,KAAA3J,cAAA,SAAA1N,GACA,GAAAoD,GAAAlC,EAAAH,EACAwM,IAAAnK,EAAAE,MACAF,EAAAuK,QAAA,SAAAjJ,EAAAD,GAAwC,MAAAzE,GAAA6M,IAAApI,EAAAC,OAyExC,QAAA4S,IAAAC,GACA,MAAA9J,IAAA8J,IAAArV,EAAAqV,GAUA,QAAAC,IAAAxX,EAAA8T,EAAA/F,EAAAxC,GACA,GAAAkM,GAAA5X,OAAAC,OAAAsX,GAAAxX,UAMA,OALA6X,GAAAnU,KAAAtD,IAAAsD,KAAA,EACAmU,EAAAC,KAAA1X,EACAyX,EAAAE,MAAA7D,EACA2D,EAAArI,UAAArB,EACA0J,EAAArO,OAAAmC,EACAkM,EAIA,QAAAJ,MACA,MAAAO,SAAAJ,GAAAhK,KAAAiG,OAGA,QAAAoE,IAAAJ,EAAAhT,EAAAC,GACA,GAIAoT,GACAC,EALA/X,EAAAyX,EAAAC,KACA5D,EAAA2D,EAAAE,MACA3D,EAAAhU,EAAAM,IAAAmE,GACAoF,EAAAxG,SAAA2Q,CAGA,IAAAtP,IAAAoF,GAAA,CACA,IAAAD,EACA,MAAA4N,EAEA3D,GAAAxQ,MAAA2N,IAAA6C,EAAAxQ,MAAA,EAAAtD,EAAAsD,MACAyU,EAAAjE,EAAA/B,OAAA,SAAAhK,EAAA+K,GAAqD,MAAAzP,UAAA0E,GAAAiM,IAAAlB,IACrDgF,EAAAC,EAAApS,aAAA3F,IAAA,SAAA+H,GAA4D,MAAAA,GAAA,KAAgBiQ,OAAAnP,QAC5E4O,EAAArI,YACA0I,EAAA1I,UAAA2I,EAAA3I,UAAAqI,EAAArI,aAGA0I,EAAA9X,EAAA2S,OAAAlO,GACAsT,EAAA/D,IAAAF,EAAAxQ,KAAA,EAAAwQ,EAAAR,MAAAQ,EAAAjH,IAAAmH,EAAA3Q,aAGA,IAAAwG,EAAA,CACA,GAAAnF,IAAAoP,EAAAxT,IAAA0T,GAAA,GACA,MAAAyD,EAEAK,GAAA9X,EACA+X,EAAAjE,EAAAjH,IAAAmH,GAAAvP,EAAAC,QAEAoT,GAAA9X,EAAA6M,IAAApI,EAAAqP,EAAAxQ,MACAyU,EAAAjE,EAAAjH,IAAAiH,EAAAxQ,MAAAmB,EAAAC,GAGA,OAAA+S,GAAArI,WACAqI,EAAAnU,KAAAwU,EAAAxU,KACAmU,EAAAC,KAAAI,EACAL,EAAAE,MAAAI,EACAN,EAAArO,OAAA/F,OACAoU,GAEAD,GAAAM,EAAAC,GAIA,QAAAE,IAAAC,EAAAvQ,GACArI,KAAA6Y,MAAAD,EACA5Y,KAAA8Y,SAAAzQ,EACArI,KAAAgE,KAAA4U,EAAA5U,KA2DA,QAAA+U,IAAAjV,GACA9D,KAAA6Y,MAAA/U,EACA9D,KAAAgE,KAAAF,EAAAE,KAyBA,QAAAgV,IAAAlV,GACA9D,KAAA6Y,MAAA/U,EACA9D,KAAAgE,KAAAF,EAAAE,KAuBA,QAAAiV,IAAAjP,GACAhK,KAAA6Y,MAAA7O,EACAhK,KAAAgE,KAAAgG,EAAAhG,KAwDA,QAAAkV,IAAArT,GACA,GAAAsT,GAAAC,GAAAvT,EAiCA,OAhCAsT,GAAAN,MAAAhT,EACAsT,EAAAnV,KAAA6B,EAAA7B,KACAmV,EAAAT,KAAA,WAAqC,MAAA7S,IACrCsT,EAAA/Q,QAAA,WACA,GAAAiR,GAAAxT,EAAAuC,QAAAtH,MAAAd,KAEA,OADAqZ,GAAAX,KAAA,WAA2C,MAAA7S,GAAAuC,WAC3CiR,GAEAF,EAAA5O,IAAA,SAAApB,GAAuC,MAAAtD,GAAAyT,SAAAnQ,IACvCgQ,EAAAG,SAAA,SAAAnQ,GAA4C,MAAAtD,GAAA0E,IAAApB,IAC5CgQ,EAAAhP,YAAAoP,GACAJ,EAAAzQ,kBAAA,SAAAP,EAAAC,GAA6D,GAAAoR,GAAAxZ,IAC7D,OAAA6F,GAAA5B,UAAA,SAAAmB,EAAAD,GAAiD,MAAAgD,GAAAhD,EAAAC,EAAAoU,MAAA,GAAkCpR,IAEnF+Q,EAAAvQ,mBAAA,SAAA1D,EAAAkD,GACA,GAAAlD,IAAAuU,GAAA,CACA,GAAAlS,GAAA1B,EAAA6T,WAAAxU,EAAAkD,EACA,WAAArD,GAAA,WACA,GAAAqG,GAAA7D,EAAAvC,MACA,KAAAoG,EAAA9F,KAAA,CACA,GAAAH,GAAAiG,EAAA3J,MAAA,EACA2J,GAAA3J,MAAA,GAAA2J,EAAA3J,MAAA,GACA2J,EAAA3J,MAAA,GAAA0D,EAEA,MAAAiG,KAGA,MAAAvF,GAAA6T,WACAxU,IAAAyU,GAAAC,GAAAD,GACAvR,IAGA+Q,EAIA,QAAAU,IAAAhU,EAAAiU,EAAAC,GACA,GAAAC,GAAAZ,GAAAvT,EAgCA,OA/BAmU,GAAAhW,KAAA6B,EAAA7B,KACAgW,EAAAzP,IAAA,SAAApB,GAAyC,MAAAtD,GAAA0E,IAAApB,IACzC6Q,EAAAhZ,IAAA,SAAAmI,EAAA2J,GACA,GAAA1N,GAAAS,EAAA7E,IAAAmI,EAAAqB,GACA,OAAApF,KAAAoF,GACAsI,EACAgH,EAAA7a,KAAA8a,EAAA3U,EAAA+D,EAAAtD,IAEAmU,EAAAtR,kBAAA,SAAAP,EAAAC,GAA+D,GAAAoR,GAAAxZ,IAC/D,OAAA6F,GAAA5B,UACA,SAAAmB,EAAAD,EAAAhG,GAA4B,MAAAgJ,GAAA2R,EAAA7a,KAAA8a,EAAA3U,EAAAD,EAAAhG,GAAAgG,EAAAqU,MAAA,GAC5BpR,IAGA4R,EAAApR,mBAAA,SAAA1D,EAAAkD,GACA,GAAAb,GAAA1B,EAAA6T,WAAAD,GAAArR,EACA,WAAArD,GAAA,WACA,GAAAqG,GAAA7D,EAAAvC,MACA,IAAAoG,EAAA9F,KACA,MAAA8F,EAEA,IAAA3C,GAAA2C,EAAA3J,MACA0H,EAAAV,EAAA,EACA,OAAAxD,GACAC,EACAiE,EACA2Q,EAAA7a,KAAA8a,EAAAtR,EAAA,GAAAU,EAAAtD,GACAuF,MAIA4O,EAIA,QAAAC,IAAApU,EAAAwC,GACA,GAAAgR,GAAAD,GAAAvT,EAsBA,OArBAwT,GAAAR,MAAAhT,EACAwT,EAAArV,KAAA6B,EAAA7B,KACAqV,EAAAjR,QAAA,WAA4C,MAAAvC,IAC5CA,EAAA6S,OACAW,EAAAX,KAAA,WACA,GAAAS,GAAAD,GAAArT,EAEA,OADAsT,GAAA/Q,QAAA,WAA4C,MAAAvC,GAAA6S,QAC5CS,IAGAE,EAAArY,IAAA,SAAAmI,EAAA2J,GACO,MAAAjN,GAAA7E,IAAAqH,EAAAc,EAAA,GAAAA,EAAA2J,IACPuG,EAAA9O,IAAA,SAAApB,GACO,MAAAtD,GAAA0E,IAAAlC,EAAAc,EAAA,GAAAA,IACPkQ,EAAAC,SAAA,SAAA7X,GAAkD,MAAAoE,GAAAyT,SAAA7X,IAClD4X,EAAAlP,YAAAoP,GACAF,EAAApV,UAAA,SAAAkE,EAAAC,GAAyD,GAAAoR,GAAAxZ,IACzD,OAAA6F,GAAA5B,UAAA,SAAAmB,EAAAD,GAAiD,MAAAgD,GAAA/C,EAAAD,EAAAqU,KAAwBpR,IAEzEiR,EAAAK,WACA,SAAAxU,EAAAkD,GAAgC,MAAAvC,GAAA6T,WAAAxU,GAAAkD,IAChCiR,EAIA,QAAAa,IAAArU,EAAAsU,EAAAJ,EAAA1R,GACA,GAAA+R,GAAAhB,GAAAvT,EAwCA,OAvCAwC,KACA+R,EAAA7P,IAAA,SAAApB,GACA,GAAA/D,GAAAS,EAAA7E,IAAAmI,EAAAqB,GACA,OAAApF,KAAAoF,MAAA2P,EAAAlb,KAAA8a,EAAA3U,EAAA+D,EAAAtD,IAEAuU,EAAApZ,IAAA,SAAAmI,EAAA2J,GACA,GAAA1N,GAAAS,EAAA7E,IAAAmI,EAAAqB,GACA,OAAApF,KAAAoF,IAAA2P,EAAAlb,KAAA8a,EAAA3U,EAAA+D,EAAAtD,GACAT,EAAA0N,IAGAsH,EAAA1R,kBAAA,SAAAP,EAAAC,GAA+D,GAAAoR,GAAAxZ,KAC/Dqa,EAAA,CAOA,OANAxU,GAAA5B,UAAA,SAAAmB,EAAAD,EAAAhG,GACA,MAAAgb,GAAAlb,KAAA8a,EAAA3U,EAAAD,EAAAhG,IACAkb,IACAlS,EAAA/C,EAAAiD,EAAAlD,EAAAkV,EAAA,EAAAb,IAFA,QAIOpR,GACPiS,GAEAD,EAAAxR,mBAAA,SAAA1D,EAAAkD,GACA,GAAAb,GAAA1B,EAAA6T,WAAAD,GAAArR,GACAiS,EAAA,CACA,WAAAtV,GAAA,WACA,QACA,GAAAqG,GAAA7D,EAAAvC,MACA,IAAAoG,EAAA9F,KACA,MAAA8F,EAEA,IAAA3C,GAAA2C,EAAA3J,MACA0H,EAAAV,EAAA,GACAhH,EAAAgH,EAAA,EACA,IAAA0R,EAAAlb,KAAA8a,EAAAtY,EAAA0H,EAAAtD,GACA,MAAAZ,GAAAC,EAAAmD,EAAAc,EAAAkR,IAAA5Y,EAAA2J,OAKAgP,EAIA,QAAAE,IAAAzU,EAAA0U,EAAAR,GACA,GAAAS,GAAA7Z,KAAA8Z,WAQA,OAPA5U,GAAA5B,UAAA,SAAAmB,EAAAD,GACAqV,EAAA9J,OACA6J,EAAAtb,KAAA8a,EAAA3U,EAAAD,EAAAU,GACA,EACA,SAAAjF,GAAsB,MAAAA,GAAA,MAGtB4Z,EAAAE,cAIA,QAAAC,IAAA9U,EAAA0U,EAAAR,GACA,GAAAa,GAAA/Y,EAAAgE,GACA2U,GAAA5X,EAAAiD,GAAAiS,KAAAnX,MAAA8Z,WACA5U,GAAA5B,UAAA,SAAAmB,EAAAD,GACAqV,EAAA9J,OACA6J,EAAAtb,KAAA8a,EAAA3U,EAAAD,EAAAU,GACA,SAAAjF,GAAsB,MAAAA,WAAAoR,KAAA4I,GAAAzV,EAAAC,MAAAxE,KAGtB,IAAAia,GAAAC,GAAAjV,EACA,OAAA2U,GAAA9Z,IAAA,SAAA0C,GAAsC,MAAA2X,IAAAlV,EAAAgV,EAAAzX,MAItC,QAAA4X,IAAAnV,EAAArB,EAAAC,EAAA4D,GACA,GAAA4S,GAAApV,EAAA7B,IAeA,IAXAD,SAAAS,IACAA,EAAA,EAAAA,GAEAT,SAAAU,IAEAA,EADAA,IAAAmG,IACAqQ,EAEA,EAAAxW,GAIAF,EAAAC,EAAAC,EAAAwW,GACA,MAAApV,EAGA,IAAAqV,GAAAxW,EAAAF,EAAAyW,GACAE,EAAAvW,EAAAH,EAAAwW,EAKA,IAAAC,OAAAC,MACA,MAAAH,IAAAnV,EAAAM,QAAAgE,cAAA3F,EAAAC,EAAA4D,EAOA,IACA+S,GADAC,EAAAF,EAAAD,CAEAG,SACAD,EAAA,EAAAC,EAAA,EAAAA,EAGA,IAAAC,GAAAlC,GAAAvT,EA6DA,OAzDAyV,GAAAtX,KAAA,IAAAoX,IAAAvV,EAAA7B,MAAAoX,GAAArX,QAEAsE,GAAAX,EAAA7B,IAAAuV,GAAA,IACAE,EAAAta,IAAA,SAAAoD,EAAA0O,GAEA,MADA1O,GAAAD,EAAAnE,KAAAoE,GACAA,GAAA,GAAAgX,EAAAhX,EACAyB,EAAA7E,IAAAoD,EAAA8W,EAAApI,GACAA,IAIAwI,EAAA5S,kBAAA,SAAAP,EAAAC,GAAwD,GAAAoR,GAAAxZ,IACxD,QAAAob,EACA,QAEA,IAAAhT,EACA,MAAApI,MAAAmK,cAAAlG,UAAAkE,EAAAC,EAEA,IAAAmT,GAAA,EACAC,GAAA,EACAnB,EAAA,CAQA,OAPAxU,GAAA5B,UAAA,SAAAmB,EAAAD,GACA,MAAAqW,OAAAD,IAAAL,GAAA,QACAb,IACAlS,EAAA/C,EAAAiD,EAAAlD,EAAAkV,EAAA,EAAAb,MAAA,GACAa,IAAAe,KAGAf,GAGAiB,EAAA1S,mBAAA,SAAA1D,EAAAkD,GACA,OAAAgT,GAAAhT,EACA,MAAApI,MAAAmK,cAAAuP,WAAAxU,EAAAkD,EAGA,IAAAb,GAAA,IAAA6T,GAAAvV,EAAA6T,WAAAxU,EAAAkD,GACAmT,EAAA,EACAlB,EAAA,CACA,WAAAtV,GAAA,WACA,KAAAwW,IAAAL,GACA3T,EAAAvC,MAEA,MAAAqV,EAAAe,EACA,MAAA7V,IAEA,IAAA6F,GAAA7D,EAAAvC,MACA,OAAAqD,IAAAnD,IAAAyU,GACAvO,EACSlG,IAAA0U,GACT3U,EAAAC,EAAAmV,EAAA,EAAAtW,OAAAqH,GAEAnG,EAAAC,EAAAmV,EAAA,EAAAjP,EAAA3J,MAAA,GAAA2J,MAKAkQ,EAIA,QAAAG,IAAA5V,EAAAsU,EAAAJ,GACA,GAAA2B,GAAAtC,GAAAvT,EAoCA,OAnCA6V,GAAAhT,kBAAA,SAAAP,EAAAC,GAA4D,GAAAoR,GAAAxZ,IAC5D,IAAAoI,EACA,MAAApI,MAAAmK,cAAAlG,UAAAkE,EAAAC,EAEA,IAAAiS,GAAA,CAIA,OAHAxU,GAAA5B,UAAA,SAAAmB,EAAAD,EAAAhG,GACS,MAAAgb,GAAAlb,KAAA8a,EAAA3U,EAAAD,EAAAhG,MAAAkb,GAAAlS,EAAA/C,EAAAD,EAAAqU,KAETa,GAEAqB,EAAA9S,mBAAA,SAAA1D,EAAAkD,GAA+D,GAAAoR,GAAAxZ,IAC/D,IAAAoI,EACA,MAAApI,MAAAmK,cAAAuP,WAAAxU,EAAAkD,EAEA,IAAAb,GAAA1B,EAAA6T,WAAAD,GAAArR,GACAuT,GAAA,CACA,WAAA5W,GAAA,WACA,IAAA4W,EACA,MAAApW,IAEA,IAAA6F,GAAA7D,EAAAvC,MACA,IAAAoG,EAAA9F,KACA,MAAA8F,EAEA,IAAA3C,GAAA2C,EAAA3J,MACA0D,EAAAsD,EAAA,GACArD,EAAAqD,EAAA,EACA,OAAA0R,GAAAlb,KAAA8a,EAAA3U,EAAAD,EAAAqU,GAIAtU,IAAAuU,GAAArO,EACAnG,EAAAC,EAAAC,EAAAC,EAAAgG,IAJAuQ,GAAA,EACApW,QAMAmW,EAIA,QAAAE,IAAA/V,EAAAsU,EAAAJ,EAAA1R,GACA,GAAAwT,GAAAzC,GAAAvT,EA4CA,OA3CAgW,GAAAnT,kBAAA,SAAAP,EAAAC,GAA6D,GAAAoR,GAAAxZ,IAC7D,IAAAoI,EACA,MAAApI,MAAAmK,cAAAlG,UAAAkE,EAAAC,EAEA,IAAAoT,IAAA,EACAnB,EAAA,CAOA,OANAxU,GAAA5B,UAAA,SAAAmB,EAAAD,EAAAhG,GACA,MAAAqc,OAAArB,EAAAlb,KAAA8a,EAAA3U,EAAAD,EAAAhG,IAAA,QACAkb,IACAlS,EAAA/C,EAAAiD,EAAAlD,EAAAkV,EAAA,EAAAb,MAGAa,GAEAwB,EAAAjT,mBAAA,SAAA1D,EAAAkD,GAA+D,GAAAoR,GAAAxZ,IAC/D,IAAAoI,EACA,MAAApI,MAAAmK,cAAAuP,WAAAxU,EAAAkD,EAEA,IAAAb,GAAA1B,EAAA6T,WAAAD,GAAArR,GACA0T,GAAA,EACAzB,EAAA,CACA,WAAAtV,GAAA,WACA,GAAAqG,GAAAjG,EAAAC,CACA,IAEA,GADAgG,EAAA7D,EAAAvC,OACAoG,EAAA9F,KACA,MAAA+C,IAAAnD,IAAAyU,GACAvO,EACalG,IAAA0U,GACb3U,EAAAC,EAAAmV,IAAAtW,OAAAqH,GAEAnG,EAAAC,EAAAmV,IAAAjP,EAAA3J,MAAA,GAAA2J,EAGA,IAAA3C,GAAA2C,EAAA3J,KACA0D,GAAAsD,EAAA,GACArD,EAAAqD,EAAA,GACAqT,MAAA3B,EAAAlb,KAAA8a,EAAA3U,EAAAD,EAAAqU,UACSsC,EACT,OAAA5W,KAAAuU,GAAArO,EACAnG,EAAAC,EAAAC,EAAAC,EAAAgG,MAGAyQ,EAIA,QAAAE,IAAAlW,EAAA4P,GACA,GAAAuG,GAAAna,EAAAgE,GACAkM,GAAAlM,GAAAoW,OAAAxG,GAAA/U,IAAA,SAAA0E,GAQA,MAPA1D,GAAA0D,GAIO4W,IACP5W,EAAAxD,EAAAwD,IAJAA,EAAA4W,EACAzV,EAAAnB,GACAsB,EAAA/C,MAAAoE,QAAA3C,UAIAA,IACKqN,OAAA,SAAArN,GAAuB,WAAAA,EAAApB,MAE5B,QAAA+N,EAAAtO,OACA,MAAAoC,EAGA,QAAAkM,EAAAtO,OAAA,CACA,GAAAyY,GAAAnK,EAAA,EACA,IAAAmK,IAAArW,GACAmW,GAAAna,EAAAqa,IACAla,EAAA6D,IAAA7D,EAAAka,GACA,MAAAA,GAIA,GAAAC,GAAA,GAAAvV,GAAAmL,EAkBA,OAjBAiK,GACAG,IAAA9V,aACKrE,EAAA6D,KACLsW,IAAAxV,YAEAwV,IAAAC,SAAA,GACAD,EAAAnY,KAAA+N,EAAAsK,OACA,SAAAC,EAAAxU,GACA,GAAA/D,SAAAuY,EAAA,CACA,GAAAtY,GAAA8D,EAAA9D,IACA,IAAAD,SAAAC,EACA,MAAAsY,GAAAtY,IAIA,GAEAmY,EAIA,QAAAI,IAAA1W,EAAA2W,EAAAnU,GACA,GAAAoU,GAAArD,GAAAvT,EA0CA,OAzCA4W,GAAA/T,kBAAA,SAAAP,EAAAC,GAGA,QAAAsU,GAAA5Y,EAAA6Y,GAA6C,GAAAnD,GAAAxZ,IAC7C8D,GAAAG,UAAA,SAAAmB,EAAAD,GAMA,QALAqX,KAAAG,IAAAjb,EAAA0D,GACAsX,EAAAtX,EAAAuX,EAAA,GACWxU,EAAA/C,EAAAiD,EAAAlD,EAAAkV,IAAAb,MAAA,IACXoD,GAAA,IAEAA,GACSxU,GAVT,GAAAiS,GAAA,EACAuC,GAAA,CAYA,OADAF,GAAA7W,EAAA,GACAwU,GAEAoC,EAAA7T,mBAAA,SAAA1D,EAAAkD,GACA,GAAAb,GAAA1B,EAAA6T,WAAAxU,EAAAkD,GACAyU,KACAxC,EAAA,CACA,WAAAtV,GAAA,WACA,KAAAwC,GAAA,CACA,GAAA6D,GAAA7D,EAAAvC,MACA,IAAAoG,EAAA9F,QAAA,GAIA,GAAAF,GAAAgG,EAAA3J,KAIA,IAHAyD,IAAAuU,KACArU,IAAA,IAEAoX,KAAAK,EAAApZ,OAAA+Y,KAAA9a,EAAA0D,GAIA,MAAAiD,GAAA+C,EAAAnG,EAAAC,EAAAmV,IAAAjV,EAAAgG,EAHAyR,GAAA7K,KAAAzK,GACAA,EAAAnC,EAAAsU,WAAAxU,EAAAkD,OATAb,GAAAsV,EAAA7I,MAcA,MAAAzO,QAGAkX,EAIA,QAAAK,IAAAjX,EAAAiU,EAAAC,GACA,GAAAc,GAAAC,GAAAjV,EACA,OAAAA,GAAAM,QAAAzF,IACA,SAAA0E,EAAAD,GAAuB,MAAA0V,GAAAf,EAAA7a,KAAA8a,EAAA3U,EAAAD,EAAAU,MACvBuW,SAAA,GAIA,QAAAW,IAAAlX,EAAAmX,GACA,GAAAC,GAAA7D,GAAAvT,EA2BA,OA1BAoX,GAAAjZ,KAAA6B,EAAA7B,MAAA,EAAA6B,EAAA7B,KAAA,EACAiZ,EAAAvU,kBAAA,SAAAP,EAAAC,GAAkE,GAAAoR,GAAAxZ,KAClEqa,EAAA,CAMA,OALAxU,GAAA5B,UAAA,SAAAmB,EAAAD,GACS,QAAAkV,GAAAlS,EAAA6U,EAAA3C,IAAAb,MAAA,IACTrR,EAAA/C,EAAAiV,IAAAb,MAAA,GACApR,GAEAiS,GAEA4C,EAAArU,mBAAA,SAAA1D,EAAAkD,GACA,GAEAgD,GAFA7D,EAAA1B,EAAA6T,WAAAC,GAAAvR,GACAiS,EAAA,CAEA,WAAAtV,GAAA,WACA,QAAAqG,GAAAiP,EAAA,KACAjP,EAAA7D,EAAAvC,OACAoG,EAAA9F,MACA8F,EAGAiP,EAAA,EACApV,EAAAC,EAAAmV,IAAA2C,GACA/X,EAAAC,EAAAmV,IAAAjP,EAAA3J,MAAA2J,MAGA6R,EAIA,QAAAC,IAAArX,EAAAsX,EAAArD,GACAqD,IACAA,EAAAC,GAEA,IAAApB,GAAAna,EAAAgE,GACAzB,EAAA,EACA4F,EAAAnE,EAAAM,QAAAzF,IACA,SAAA0E,EAAAD,GAAuB,OAAAA,EAAAC,EAAAhB,IAAA0V,IAAA1U,EAAAD,EAAAU,GAAAT,KACvBmP,SAMA,OALAvK,GAAAqT,KAAA,SAAAzc,EAAAV,GAAkC,MAAAid,GAAAvc,EAAA,GAAAV,EAAA,KAAAU,EAAA,GAAAV,EAAA,KAA6CmO,QAC/E2N,EACA,SAAA5W,EAAAsP,GAAuB1K,EAAA0K,GAAAjR,OAAA,GACvB,SAAA2B,EAAAsP,GAAuB1K,EAAA0K,GAAAtP,EAAA,KAEvB4W,EAAAla,EAAAkI,GACAhI,EAAA6D,GAAA5D,EAAA+H,GACA5H,EAAA4H,GAIA,QAAAsT,IAAAzX,EAAAsX,EAAArD,GAIA,GAHAqD,IACAA,EAAAC,IAEAtD,EAAA,CACA,GAAArR,GAAA5C,EAAAM,QACAzF,IAAA,SAAA0E,EAAAD,GAA8B,OAAAC,EAAA0U,EAAA1U,EAAAD,EAAAU,MAC9BwW,OAAA,SAAAzb,EAAAV,GAAiC,MAAAqd,IAAAJ,EAAAvc,EAAA,GAAAV,EAAA,IAAAA,EAAAU,GACjC,OAAA6H,MAAA,GAEA,MAAA5C,GAAAwW,OAAA,SAAAzb,EAAAV,GAA8C,MAAAqd,IAAAJ,EAAAvc,EAAAV,KAAAU,IAI9C,QAAA2c,IAAAJ,EAAAvc,EAAAV,GACA,GAAAsd,GAAAL,EAAAjd,EAAAU,EAGA,YAAA4c,GAAAtd,IAAAU,IAAAmD,SAAA7D,GAAA,OAAAA,WAAAsd,EAAA,EAIA,QAAAC,IAAAC,EAAAC,EAAA5L,GACA,GAAA6L,GAAAxE,GAAAsE,EAkDA,OAjDAE,GAAA5Z,KAAA,GAAA4C,GAAAmL,GAAArR,IAAA,SAAAgU,GAA6D,MAAAA,GAAA1Q,OAAcc,MAG3E8Y,EAAA3Z,UAAA,SAAAkE,EAAAC,GAiBA,IAHA,GACAgD,GADA7D,EAAAvH,KAAA0Z,WAAAC,GAAAvR,GAEAiS,EAAA,IACAjP,EAAA7D,EAAAvC,QAAAM,MACA6C,EAAAiD,EAAA3J,MAAA4Y,IAAAra,SAAA,IAIA,MAAAqa,IAEAuD,EAAAhV,mBAAA,SAAA1D,EAAAkD,GACA,GAAAyV,GAAA9L,EAAArR,IAAA,SAAAgU,GACS,MAAAA,GAAAlT,EAAAkT,GAAA9O,EAAAwC,EAAAsM,EAAAtM,UAAAsM,KAET2F,EAAA,EACAyD,GAAA,CACA,WAAA/Y,GAAA,WACA,GAAAgZ,EAKA,OAJAD,KACAC,EAAAF,EAAAnd,IAAA,SAAAgU,GAA8C,MAAAA,GAAA1P,SAC9C8Y,EAAAC,EAAAC,KAAA,SAAAC,GAA4C,MAAAA,GAAA3Y,QAE5CwY,EACAvY,IAEAN,EACAC,EACAmV,IACAsD,EAAA7c,MAAA,KAAAid,EAAArd,IAAA,SAAAud,GAAqD,MAAAA,GAAAxc,aAIrDmc,EAMA,QAAA7C,IAAAjX,EAAAgE,GACA,MAAAJ,GAAA5D,GAAAgE,EAAAhE,EAAA1D,YAAA0H,GAGA,QAAAoW,IAAAzV,GACA,GAAAA,IAAAlI,OAAAkI,GACA,SAAAT,WAAA,0BAAAS,GAIA,QAAA0V,IAAAra,GAEA,MADAmK,IAAAnK,EAAAE,MACAH,EAAAC,GAGA,QAAAgX,IAAAjV,GACA,MAAAhE,GAAAgE,GAAAjE,EACAI,EAAA6D,GAAA9D,EACAG,EAGA,QAAAkX,IAAAvT,GACA,MAAAtF,QAAAC,QAEAqB,EAAAgE,GAAA/D,EACAE,EAAA6D,GAAA5D,EACAG,GACA9B,WAIA,QAAAiZ,MACA,MAAAvZ,MAAA6Y,MAAA1O,aACAnK,KAAA6Y,MAAA1O,cACAnK,KAAAgE,KAAAhE,KAAA6Y,MAAA7U,KACAhE,MAEA2B,EAAArB,UAAA6J,YAAAlL,KAAAe,MAIA,QAAAod,IAAAxc,EAAAV,GACA,MAAAU,GAAAV,EAAA,EAAAA,EAAAU,EAAA,KAGA,QAAAwd,IAAAC,GACA,GAAAva,GAAA8B,EAAAyY,EACA,KAAAva,EAAA,CAGA,IAAAmC,EAAAoY,GACA,SAAArW,WAAA,oCAAAqW,EAEAva,GAAA8B,EAAApE,EAAA6c,IAEA,MAAAva,GAKA,QAAAwa,IAAAC,EAAAC,GACA,GAAAC,GAEAC,EAAA,SAAAjJ,GACA,GAAAA,YAAAiJ,GACA,MAAAjJ,EAEA,MAAAzV,eAAA0e,IACA,UAAAA,GAAAjJ,EAEA,KAAAgJ,EAAA,CACAA,GAAA,CACA,IAAAxX,GAAA1G,OAAA0G,KAAAsX,EACAI,IAAAC,EAAA3X,GACA2X,EAAA5a,KAAAiD,EAAAxD,OACAmb,EAAAC,MAAAL,EACAI,EAAAzX,MAAAF,EACA2X,EAAAE,eAAAP,EAEAve,KAAAoY,KAAAzX,GAAA8U,IAGAmJ,EAAAF,EAAApe,UAAAC,OAAAC,OAAAue,GAGA,OAFAH,GAAAxe,YAAAse,EAEAA,EAwGA,QAAAM,IAAAC,EAAAve,EAAA+N,GACA,GAAAyQ,GAAA3e,OAAAC,OAAAD,OAAA4e,eAAAF,GAGA,OAFAC,GAAA9G,KAAA1X,EACAwe,EAAApP,UAAArB,EACAyQ,EAGA,QAAAE,IAAAF,GACA,MAAAA,GAAAL,OAAAK,EAAA9e,YAAAoe,MAAA,SAGA,QAAAG,IAAAre,EAAA+e,GACA,IACAA,EAAAhR,QAAAiR,GAAAC,KAAAxb,OAAAzD,IACK,MAAA0K,KAKL,QAAAsU,IAAAhf,EAAAke,GACAje,OAAAkN,eAAAnN,EAAAke,GACAxd,IAAA,WACA,MAAAhB,MAAAgB,IAAAwd,IAEAjR,IAAA,SAAA9L,GACAqJ,EAAA9K,KAAA8P,UAAA,sCACA9P,KAAAuN,IAAAiR,EAAA/c,MASA,QAAA+d,IAAA/d,GACA,cAAAA,GAAAsC,SAAAtC,EAAAge,KACAC,GAAAje,KAAAmB,EAAAnB,KACAge,KAAArR,cAAA,SAAAb,GACA,GAAAzJ,GAAA5B,EAAAT,EACAwM,IAAAnK,EAAAE,MACAF,EAAAuK,QAAA,SAAAjJ,GAAqC,MAAAmI,GAAAoS,IAAAva,OA+HrC,QAAAsa,IAAAE,GACA,SAAAA,MAAAC,KAmBA,QAAAC,IAAAvS,EAAAiL,GACA,MAAAjL,GAAAuC,WACAvC,EAAAvJ,KAAAwU,EAAAxU,KACAuJ,EAAA6K,KAAAI,EACAjL,GAEAiL,IAAAjL,EAAA6K,KAAA7K,EACA,IAAAiL,EAAAxU,KAAAuJ,EAAAwS,UACAxS,EAAAyS,OAAAxH,GAGA,QAAAyH,IAAAvf,EAAA+N,GACA,GAAAlB,GAAAhN,OAAAC,OAAA0f,GAIA,OAHA3S,GAAAvJ,KAAAtD,IAAAsD,KAAA,EACAuJ,EAAA6K,KAAA1X,EACA6M,EAAAuC,UAAArB,EACAlB,EAIA,QAAAkS,MACA,MAAAU,SAAAF,GAAA/R,OAOA,QAAAkS,IAAA3e,GACA,cAAAA,GAAAsC,SAAAtC,EAAA4e,KACAC,GAAA7e,KACA4e,KAAAjS,cAAA,SAAAb,GACA,GAAAzJ,GAAA5B,EAAAT,EACAwM,IAAAnK,EAAAE,MACAF,EAAAuK,QAAA,SAAAjJ,GAAqC,MAAAmI,GAAAoS,IAAAva,OAiBrC,QAAAkb,IAAAC,GACA,MAAAb,IAAAa,IAAA3d,EAAA2d,GAWA,QAAAC,IAAA9f,EAAA+N,GACA,GAAAlB,GAAAhN,OAAAC,OAAAigB,GAIA,OAHAlT,GAAAvJ,KAAAtD,IAAAsD,KAAA,EACAuJ,EAAA6K,KAAA1X,EACA6M,EAAAuC,UAAArB,EACAlB,EAIA,QAAA8S,MACA,MAAAK,SAAAF,GAAAzI,OAOA,QAAA4I,IAAAlf,GACA,cAAAA,GAAAsC,SAAAtC,EAAAmf,KACAC,GAAApf,KACAmf,KAAAE,WAAArf,GAkLA,QAAAof,IAAAE,GACA,SAAAA,MAAAC,KAeA,QAAAC,IAAAjd,EAAAkd,EAAAzS,EAAAxC,GACA,GAAAvL,GAAAH,OAAAC,OAAA2gB,GAMA,OALAzgB,GAAAsD,OACAtD,EAAA0gB,MAAAF,EACAxgB,EAAAoP,UAAArB,EACA/N,EAAAoJ,OAAAmC,EACAvL,EAAAqP,WAAA,EACArP,EAIA,QAAAkgB,MACA,MAAAS,SAAAJ,GAAA,IAMA,QAAAK,IAAAhgB,EAAAigB,GACA,GAAAC,GAAA,SAAArY,GAAoC7H,EAAAhB,UAAA6I,GAAAoY,EAAApY,GAIpC,OAHA5I,QAAA0G,KAAAsa,GAAAlT,QAAAmT,GACAjhB,OAAAkhB,uBACAlhB,OAAAkhB,sBAAAF,GAAAlT,QAAAmT,GACAlgB,EAioBA,QAAAogB,IAAAtc,EAAAD,GACA,MAAAA,GAGA,QAAAwc,IAAAvc,EAAAD,GACA,OAAAA,EAAAC,GAGA,QAAAwc,IAAAzH,GACA,kBACA,OAAAA,EAAArZ,MAAAd,KAAAe,YAIA,QAAA8gB,IAAA1H,GACA,kBACA,OAAAA,EAAArZ,MAAAd,KAAAe,YAIA,QAAA+gB,IAAArgB,GACA,sBAAAA,GAAAsgB,KAAAC,UAAAvgB,GAAAwgB,OAAAxgB,GAGA,QAAAygB,MACA,MAAA/e,GAAApC,WAGA,QAAAohB,IAAAvhB,EAAAV,GACA,MAAAA,GAAAU,EAAA,EAAAA,EAAAV,EAAA,KAGA,QAAAkiB,IAAAvc,GACA,GAAAA,EAAA7B,OAAA4G,IACA,QAEA,IAAAyX,GAAAzf,EAAAiD,GACAyc,EAAAzgB,EAAAgE,GACAsG,EAAAkW,EAAA,IACAre,EAAA6B,EAAA5B,UACAqe,EACAD,EACA,SAAAjd,EAAAD,GAA2BgH,EAAA,GAAAA,EAAAoW,GAAAtW,GAAA7G,GAAA6G,GAAA9G,IAAA,GAC3B,SAAAC,EAAAD,GAA2BgH,IAAAoW,GAAAtW,GAAA7G,GAAA6G,GAAA9G,IAAA,GAC3Bkd,EACA,SAAAjd,GAAwB+G,EAAA,GAAAA,EAAAF,GAAA7G,GAAA,GACxB,SAAAA,GAAwB+G,IAAAF,GAAA7G,GAAA,GAExB,OAAAod,IAAAxe,EAAAmI,GAGA,QAAAqW,IAAAxe,EAAAmI,GAQA,MAPAA,GAAAsW,GAAAtW,EAAA,YACAA,EAAAsW,GAAAtW,GAAA,GAAAA,IAAA,eACAA,EAAAsW,GAAAtW,GAAA,GAAAA,IAAA,OACAA,KAAA,cAAAnI,EACAmI,EAAAsW,GAAAtW,MAAA,eACAA,EAAAsW,GAAAtW,MAAA,eACAA,EAAAJ,GAAAI,MAAA,IAIA,QAAAoW,IAAA3hB,EAAAV,GACA,MAAAU,GAAAV,EAAA,YAAAU,GAAA,IAAAA,GAAA,KA10JmC,GAAA8hB,IAAA/e,MAAArD,UAAAqW,KAcnCtV,GAAAO,EAAAJ,GAMAH,EAAAU,EAAAP,GAMAH,EAAAa,EAAAV,GA2BAA,EAAAE,aACAF,EAAAK,UACAL,EAAAQ,YACAR,EAAAW,gBACAX,EAAAoB,YAEApB,EAAAmhB,MAAA/gB,EACAJ,EAAAohB,QAAA7gB,EACAP,EAAAge,IAAAtd,CAGA,IAAAI,IAAA,6BACAE,GAAA,0BACAE,GAAA,4BACAI,GAAA,4BAGA+f,GAAA,SAGA5R,GAAA,EACAU,GAAA,GAAAV,GACAF,GAAAY,GAAA,EAIAnH,MAGA6F,IAAuB5O,OAAA,GACvB8O,IAAmB9O,OAAA,GAiFnBmY,GAAA,EACAD,GAAA,EACAF,GAAA,EAEA1T,GAAA,kBAAA+c,gBAAAvb,SACAvB,GAAA,aAEA+c,GAAAhd,IAAAC,EAOAjB,GAAAzE,UAAAmM,SAAA,WACA,oBAIA1H,EAAAie,KAAApJ,GACA7U,EAAAke,OAAAtJ,GACA5U,EAAAme,QAAAzJ,GAEA1U,EAAAzE,UAAA6iB,QACApe,EAAAzE,UAAA8iB,SAAA,WAA6C,MAAApjB,MAAAyM,YAC7C1H,EAAAzE,UAAAyiB,IAAA,WACA,MAAA/iB,OA2CAqB,EAAAM,EAAAH,GAMAG,EAAA0hB,GAAA,WACA,MAAA1hB,GAAAZ,YAGAY,EAAArB,UAAA6F,MAAA,WACA,MAAAnG,OAGA2B,EAAArB,UAAAmM,SAAA,WACA,MAAAzM,MAAAsjB,WAAA,QAAmC,MAGnC3hB,EAAArB,UAAA6J,YAAA,WAKA,OAJAnK,KAAAuI,QAAAvI,KAAA0I,oBACA1I,KAAAuI,OAAAvI,KAAAwG,WAAA+N,UACAvU,KAAAgE,KAAAhE,KAAAuI,OAAA9E,QAEAzD,MAKA2B,EAAArB,UAAA2D,UAAA,SAAAkE,EAAAC,GACA,MAAAF,GAAAlI,KAAAmI,EAAAC,GAAA,IAKAzG,EAAArB,UAAAoZ,WAAA,SAAAxU,EAAAkD,GACA,MAAAO,GAAA3I,KAAAkF,EAAAkD,GAAA,IAKA/G,EAAAS,EAAAH,GASAG,EAAAxB,UAAA+F,WAAA,WACA,MAAArG,OAKAqB,EAAAY,EAAAN,GAOAM,EAAAohB,GAAA,WACA,MAAAphB,GAAAlB,YAGAkB,EAAA3B,UAAAmG,aAAA,WACA,MAAAzG,OAGAiC,EAAA3B,UAAAmM,SAAA,WACA,MAAAzM,MAAAsjB,WAAA,cAGArhB,EAAA3B,UAAA2D,UAAA,SAAAkE,EAAAC,GACA,MAAAF,GAAAlI,KAAAmI,EAAAC,GAAA,IAGAnG,EAAA3B,UAAAoZ,WAAA,SAAAxU,EAAAkD,GACA,MAAAO,GAAA3I,KAAAkF,EAAAkD,GAAA,IAKA/G,EAAAe,EAAAT,GASAS,EAAAihB,GAAA,WACA,MAAAjhB,GAAArB,YAGAqB,EAAA9B,UAAAqG,SAAA,WACA,MAAA3G,OAKA2B,EAAA+F,QACA/F,EAAAghB,MAAA7gB,EACAH,EAAA6d,IAAApd,EACAT,EAAAihB,QAAA3gB,CAEA,IAAA2F,IAAA,uBAEAjG,GAAArB,UAAAsH,KAAA,EAIAvG,EAAAuF,EAAA3E,GAMA2E,EAAAtG,UAAAU,IAAA,SAAAoD,EAAA0O,GACA,MAAA9S,MAAAuK,IAAAnG,GAAApE,KAAA8G,OAAA3C,EAAAnE,KAAAoE,IAAA0O,GAGAlM,EAAAtG,UAAA2D,UAAA,SAAAkE,EAAAC,GAGA,OAFAvB,GAAA7G,KAAA8G,OACA0B,EAAA3B,EAAApD,OAAA,EACAG,EAAA,EAAsB4E,GAAA5E,EAAgBA,IACtC,GAAAuE,EAAAtB,EAAAuB,EAAAI,EAAA5E,OAAA5D,SAAA,EACA,MAAA4D,GAAA,CAGA,OAAAA,IAGAgD,EAAAtG,UAAAoZ,WAAA,SAAAxU,EAAAkD,GACA,GAAAvB,GAAA7G,KAAA8G,OACA0B,EAAA3B,EAAApD,OAAA,EACAG,EAAA,CACA,WAAAmB,GAAA,WACS,MAAAnB,GAAA4E,EACTjD,IACAN,EAAAC,EAAAtB,EAAAiD,EAAAuB,EAAAI,EAAA5E,aAMAvC,EAAA0F,EAAAjF,GAQAiF,EAAAzG,UAAAU,IAAA,SAAAmI,EAAA2J,GACA,MAAA/O,UAAA+O,GAAA9S,KAAAuK,IAAApB,GAGAnJ,KAAAkH,QAAAiC,GAFA2J,GAKA/L,EAAAzG,UAAAiK,IAAA,SAAApB,GACA,MAAAnJ,MAAAkH,QAAA7G,eAAA8I,IAGApC,EAAAzG,UAAA2D,UAAA,SAAAkE,EAAAC,GAIA,OAHApB,GAAAhH,KAAAkH,QACAD,EAAAjH,KAAAmH,MACAqB,EAAAvB,EAAAxD,OAAA,EACAG,EAAA,EAAsB4E,GAAA5E,EAAgBA,IAAA,CACtC,GAAAuF,GAAAlC,EAAAmB,EAAAI,EAAA5E,IACA,IAAAuE,EAAAnB,EAAAmC,KAAAnJ,SAAA,EACA,MAAA4D,GAAA,EAGA,MAAAA,IAGAmD,EAAAzG,UAAAoZ,WAAA,SAAAxU,EAAAkD,GACA,GAAApB,GAAAhH,KAAAkH,QACAD,EAAAjH,KAAAmH,MACAqB,EAAAvB,EAAAxD,OAAA,EACAG,EAAA,CACA,WAAAmB,GAAA,WACA,GAAAoE,GAAAlC,EAAAmB,EAAAI,EAAA5E,IACA,OAAAA,KAAA4E,EACAjD,IACAN,EAAAC,EAAAiE,EAAAnC,EAAAmC,OAIApC,EAAAzG,UAAAwC,KAAA,EAGAzB,EAAA+F,EAAAnF,GAMAmF,EAAA9G,UAAAoI,kBAAA,SAAAP,EAAAC,GACA,GAAAA,EACA,MAAApI,MAAAmK,cAAAlG,UAAAkE,EAAAC,EAEA,IAAAvC,GAAA7F,KAAAqH,UACAE,EAAA3B,EAAAC,GACAwU,EAAA,CACA,IAAA3U,EAAA6B,GAEA,IADA,GAAA6D,KACAA,EAAA7D,EAAAvC,QAAAM,MACA6C,EAAAiD,EAAA3J,MAAA4Y,IAAAra,SAAA,IAKA,MAAAqa,IAGAjT,EAAA9G,UAAAsI,mBAAA,SAAA1D,EAAAkD,GACA,GAAAA,EACA,MAAApI,MAAAmK,cAAAuP,WAAAxU,EAAAkD,EAEA,IAAAvC,GAAA7F,KAAAqH,UACAE,EAAA3B,EAAAC,EACA,KAAAH,EAAA6B,GACA,UAAAxC,GAAAQ,EAEA,IAAA8U,GAAA,CACA,WAAAtV,GAAA,WACA,GAAAqG,GAAA7D,EAAAvC,MACA,OAAAoG,GAAA9F,KAAA8F,EAAAnG,EAAAC,EAAAmV,IAAAjP,EAAA3J,UAMAJ,EAAAiG,EAAArF,GAMAqF,EAAAhH,UAAAoI,kBAAA,SAAAP,EAAAC,GACA,GAAAA,EACA,MAAApI,MAAAmK,cAAAlG,UAAAkE,EAAAC,EAKA,KAHA,GAAAb,GAAAvH,KAAAwH,UACAc,EAAAtI,KAAAyH,eACA4S,EAAA,EACAA,EAAA/R,EAAA7E,QACA,GAAA0E,EAAAG,EAAA+R,OAAAra,SAAA,EACA,MAAAqa,EAIA,KADA,GAAAjP,KACAA,EAAA7D,EAAAvC,QAAAM,MAAA,CACA,GAAAmO,GAAArI,EAAA3J,KAEA,IADA6G,EAAA+R,GAAA5G,EACAtL,EAAAsL,EAAA4G,IAAAra,SAAA,EACA,MAGA,MAAAqa,IAGA/S,EAAAhH,UAAAsI,mBAAA,SAAA1D,EAAAkD,GACA,GAAAA,EACA,MAAApI,MAAAmK,cAAAuP,WAAAxU,EAAAkD,EAEA,IAAAb,GAAAvH,KAAAwH,UACAc,EAAAtI,KAAAyH,eACA4S,EAAA,CACA,WAAAtV,GAAA,WACA,GAAAsV,GAAA/R,EAAA7E,OAAA,CACA,GAAA2H,GAAA7D,EAAAvC,MACA,IAAAoG,EAAA9F,KACA,MAAA8F,EAEA9C,GAAA+R,GAAAjP,EAAA3J,MAEA,MAAAwD,GAAAC,EAAAmV,EAAA/R,EAAA+R,QAaA,IAAAxS,GAyPAxG,GAAAoJ,EAAAxI,GAgBAwI,EAAAnK,UAAAmM,SAAA,WACA,WAAAzM,KAAAgE,KACA,YAEA,YAAAhE,KAAA2K,OAAA,IAAA3K,KAAAgE,KAAA,YAGAyG,EAAAnK,UAAAU,IAAA,SAAAoD,EAAA0O,GACA,MAAA9S,MAAAuK,IAAAnG,GAAApE,KAAA2K,OAAAmI,GAGArI,EAAAnK,UAAAgZ,SAAA,SAAAiK,GACA,MAAA/Z,GAAAxJ,KAAA2K,OAAA4Y,IAGA9Y,EAAAnK,UAAAqW,MAAA,SAAAnS,EAAAC,GACA,GAAAT,GAAAhE,KAAAgE,IACA,OAAAO,GAAAC,EAAAC,EAAAT,GAAAhE,KACA,GAAAyK,GAAAzK,KAAA2K,OAAA/F,EAAAH,EAAAT,GAAAU,EAAAF,EAAAR,KAGAyG,EAAAnK,UAAA8H,QAAA,WACA,MAAApI,OAGAyK,EAAAnK,UAAAkjB,QAAA,SAAAD,GACA,MAAA/Z,GAAAxJ,KAAA2K,OAAA4Y,GACA,EAEA,IAGA9Y,EAAAnK,UAAAmjB,YAAA,SAAAF,GACA,MAAA/Z,GAAAxJ,KAAA2K,OAAA4Y,GACAvjB,KAAAgE,KAEA,IAGAyG,EAAAnK,UAAA2D,UAAA,SAAAkE,EAAAC,GACA,OAAAxE,GAAA,EAAsBA,EAAA5D,KAAAgE,KAAgBJ,IACtC,GAAAuE,EAAAnI,KAAA2K,OAAA/G,EAAA5D,SAAA,EACA,MAAA4D,GAAA,CAGA,OAAAA,IAGA6G,EAAAnK,UAAAoZ,WAAA,SAAAxU,EAAAkD,GAA2D,GAAAoR,GAAAxZ,KAC3D4D,EAAA,CACA,WAAAmB,GAAA,WACS,MAAAnB,GAAA4V,EAAAxV,KAAAiB,EAAAC,EAAAtB,IAAA4V,EAAA7O,QAAApF,OAITkF,EAAAnK,UAAAsJ,OAAA,SAAA8Z,GACA,MAAAA,aAAAjZ,GACAjB,EAAAxJ,KAAA2K,OAAA+Y,EAAA/Y,QACAd,EAAA6Z,GAIA,IAAA7Y,GAMAxJ,GAAA6J,EAAAjJ,GA2BAiJ,EAAA5K,UAAAmM,SAAA,WACA,WAAAzM,KAAAgE,KACA,WAEA,WACAhE,KAAAsL,OAAA,MAAAtL,KAAAuL,MACA,IAAAvL,KAAAwL,MAAA,OAAAxL,KAAAwL,MAAA,IACA,MAGAN,EAAA5K,UAAAU,IAAA,SAAAoD,EAAA0O,GACA,MAAA9S,MAAAuK,IAAAnG,GACApE,KAAAsL,OAAAnH,EAAAnE,KAAAoE,GAAApE,KAAAwL,MACAsH,GAGA5H,EAAA5K,UAAAgZ,SAAA,SAAAiK,GACA,GAAAI,IAAAJ,EAAAvjB,KAAAsL,QAAAtL,KAAAwL,KACA,OAAAmY,IAAA,GACAA,EAAA3jB,KAAAgE,MACA2f,IAAApgB,KAAAqgB,MAAAD,IAGAzY,EAAA5K,UAAAqW,MAAA,SAAAnS,EAAAC,GACA,MAAAF,GAAAC,EAAAC,EAAAzE,KAAAgE,MACAhE,MAEAwE,EAAAE,EAAAF,EAAAxE,KAAAgE,MACAS,EAAAG,EAAAH,EAAAzE,KAAAgE,MACAQ,GAAAC,EACA,GAAAyG,GAAA,KAEA,GAAAA,GAAAlL,KAAAgB,IAAAwD,EAAAxE,KAAAuL,MAAAvL,KAAAgB,IAAAyD,EAAAzE,KAAAuL,MAAAvL,KAAAwL,SAGAN,EAAA5K,UAAAkjB,QAAA,SAAAD,GACA,GAAAM,GAAAN,EAAAvjB,KAAAsL,MACA,IAAAuY,EAAA7jB,KAAAwL,QAAA,GACA,GAAApH,GAAAyf,EAAA7jB,KAAAwL,KACA,IAAApH,GAAA,GAAAA,EAAApE,KAAAgE,KACA,MAAAI,GAGA,UAGA8G,EAAA5K,UAAAmjB,YAAA,SAAAF,GACA,MAAAvjB,MAAAwjB,QAAAD,IAGArY,EAAA5K,UAAA2D,UAAA,SAAAkE,EAAAC,GAIA,OAHAI,GAAAxI,KAAAgE,KAAA,EACAoH,EAAApL,KAAAwL,MACA/J,EAAA2G,EAAApI,KAAAsL,OAAA9C,EAAA4C,EAAApL,KAAAsL,OACA1H,EAAA,EAAsB4E,GAAA5E,EAAgBA,IAAA,CACtC,GAAAuE,EAAA1G,EAAAmC,EAAA5D,SAAA,EACA,MAAA4D,GAAA,CAEAnC,IAAA2G,GAAAgD,IAEA,MAAAxH,IAGAsH,EAAA5K,UAAAoZ,WAAA,SAAAxU,EAAAkD,GACA,GAAAI,GAAAxI,KAAAgE,KAAA,EACAoH,EAAApL,KAAAwL,MACA/J,EAAA2G,EAAApI,KAAAsL,OAAA9C,EAAA4C,EAAApL,KAAAsL,OACA1H,EAAA,CACA,WAAAmB,GAAA,WACA,GAAAK,GAAA3D,CAEA,OADAA,IAAA2G,GAAAgD,IACAxH,EAAA4E,EAAAjD,IAAAN,EAAAC,EAAAtB,IAAAwB,MAIA8F,EAAA5K,UAAAsJ,OAAA,SAAA8Z,GACA,MAAAA,aAAAxY,GACAlL,KAAAsL,SAAAoY,EAAApY,QACAtL,KAAAuL,OAAAmY,EAAAnY,MACAvL,KAAAwL,QAAAkY,EAAAlY,MACA3B,EAAA7J,KAAA0jB,GAIA,IAAAhY,GAEArK,GAAAsK,GAAAnK,GAMAH,EAAAuK,GAAAD,IAEAtK,EAAAwK,GAAAF,IAEAtK,EAAAyK,GAAAH,IAGAA,GAAAgX,MAAA/W,GACAD,GAAAiX,QAAA/W,GACAF,GAAA6T,IAAA1T,EAEA,IAyLAmB,IAzLAwV,GACA,kBAAAlf,MAAAkf,MAAA,KAAAlf,KAAAkf,KAAA,cACAlf,KAAAkf,KACA,SAAA7hB,EAAAV,GACAU,EAAA,EAAAA,EACAV,EAAA,EAAAA,CACA,IAAAf,GAAA,MAAAyB,EACAX,EAAA,MAAAC,CAEA,OAAAf,GAAAc,IAAAW,IAAA,IAAAX,EAAAd,GAAAe,IAAA,gBAqJAsN,GAAAjN,OAAAiN,aAGAL,GAAA,WACA,IAEA,MADA5M,QAAAkN,kBAA8B,SAC9B,EACK,MAAAqW,GACL,aAkBA9W,GAAA,kBAAA+W,QAEA/W,MACAC,GAAA,GAAA8W,SAGA,IAAAzW,IAAA,EAEAJ,GAAA,mBACA,mBAAA4V,UACA5V,GAAA4V,OAAA5V,IAGA,IAAAd,IAAA,GACAS,GAAA,IACAD,GAAA,EACAD,KASAtL,GAAAV,GAAAiL,IAcAjL,GAAA0iB,GAAA,WAAyB,GAAAW,GAAAtB,GAAAzjB,KAAA8B,UAAA,EACzB,OAAAmN,MAAAE,cAAA,SAAA1N,GACA,OAAAgU,GAAA,EAAuBA,EAAAsP,EAAAvgB,OAAsBiR,GAAA,GAC7C,GAAAA,EAAA,GAAAsP,EAAAvgB,OACA,SAAAwH,OAAA,0BAAA+Y,EAAAtP,GAEAhU,GAAA6M,IAAAyW,EAAAtP,GAAAsP,EAAAtP,EAAA,QAKA/T,GAAAL,UAAAmM,SAAA,WACA,MAAAzM,MAAAsjB,WAAA,QAAmC,MAKnC3iB,GAAAL,UAAAU,IAAA,SAAAmE,EAAA2N,GACA,MAAA9S,MAAAsP,MACAtP,KAAAsP,MAAAtO,IAAA,EAAA+C,OAAAoB,EAAA2N,GACAA,GAKAnS,GAAAL,UAAAiN,IAAA,SAAApI,EAAAC,GACA,MAAA6K,IAAAjQ,KAAAmF,EAAAC,IAGAzE,GAAAL,UAAAiT,MAAA,SAAA8K,EAAAjZ,GACA,MAAApF,MAAAikB,SAAA5F,EAAA7T,GAAA,WAA0D,MAAApF,MAG1DzE,GAAAL,UAAA+S,OAAA,SAAAlO,GACA,MAAA8K,IAAAjQ,KAAAmF,EAAAqF,KAGA7J,GAAAL,UAAA4jB,SAAA,SAAA7F,GACA,MAAAre,MAAAikB,SAAA5F,EAAA,WAAiD,MAAA7T,OAGjD7J,GAAAL,UAAAoQ,OAAA,SAAAvL,EAAA2N,EAAAC,GACA,WAAAhS,UAAA0C,OACA0B,EAAAnF,MACAA,KAAAikB,UAAA9e,GAAA2N,EAAAC,IAGApS,GAAAL,UAAA2jB,SAAA,SAAA5F,EAAAvL,EAAAC,GACAA,IACAA,EAAAD,EACAA,EAAA/O,OAEA,IAAAogB,GAAAvR,GACA5S,KACAoe,GAAAC,GACAvL,EACAC,EAEA,OAAAoR,KAAA3Z,GAAAzG,OAAAogB;EAGAxjB,GAAAL,UAAA6W,MAAA,WACA,WAAAnX,KAAAgE,KACAhE,KAEAA,KAAA8P,WACA9P,KAAAgE,KAAA,EACAhE,KAAAsP,MAAA,KACAtP,KAAA8J,OAAA/F,OACA/D,KAAA+P,WAAA,EACA/P,MAEAkO,MAKAvN,GAAAL,UAAA8jB,MAAA,WACA,MAAAxS,IAAA5R,KAAA+D,OAAAhD,YAGAJ,GAAAL,UAAA+jB,UAAA,SAAAxS,GAAgD,GAAAE,GAAA2Q,GAAAzjB,KAAA8B,UAAA,EAChD,OAAA6Q,IAAA5R,KAAA6R,EAAAE,IAGApR,GAAAL,UAAAgkB,QAAA,SAAAjG,GAA+C,GAAAtM,GAAA2Q,GAAAzjB,KAAA8B,UAAA,EAC/C,OAAAf,MAAAikB,SACA5F,EACAnQ,KACA,SAAAhP,GAAsB,wBAAAA,GAAAklB,MACtBllB,EAAAklB,MAAAtjB,MAAA5B,EAAA6S,GACAA,IAAAtO,OAAA,MAIA9C,GAAAL,UAAA8R,UAAA,WACA,MAAAR,IAAA5R,KAAAkS,GAAAnR,YAGAJ,GAAAL,UAAAgS,cAAA,SAAAT,GAAoD,GAAAE,GAAA2Q,GAAAzjB,KAAA8B,UAAA,EACpD,OAAA6Q,IAAA5R,KAAAqS,GAAAR,GAAAE,IAGApR,GAAAL,UAAAikB,YAAA,SAAAlG,GAAmD,GAAAtM,GAAA2Q,GAAAzjB,KAAA8B,UAAA,EACnD,OAAAf,MAAAikB,SACA5F,EACAnQ,KACA,SAAAhP,GAAsB,wBAAAA,GAAAkT,UACtBlT,EAAAkT,UAAAtR,MAAA5B,EAAA6S,GACAA,IAAAtO,OAAA,MAIA9C,GAAAL,UAAA+c,KAAA,SAAAF,GAEA,MAAArF,IAAAoF,GAAAld,KAAAmd,KAGAxc,GAAAL,UAAAkkB,OAAA,SAAA1K,EAAAqD,GAEA,MAAArF,IAAAoF,GAAAld,KAAAmd,EAAArD,KAKAnZ,GAAAL,UAAA8N,cAAA,SAAAjG,GACA,GAAAsc,GAAAzkB,KAAAya,WAEA,OADAtS,GAAAsc,GACAA,EAAAC,aAAAD,EAAAE,cAAA3kB,KAAA8P,WAAA9P,MAGAW,GAAAL,UAAAma,UAAA,WACA,MAAAza,MAAA8P,UAAA9P,UAAA2kB,cAAA,GAAAzhB,KAGAvC,GAAAL,UAAAoa,YAAA,WACA,MAAA1a,MAAA2kB,iBAGAhkB,GAAAL,UAAAokB,WAAA,WACA,MAAA1kB,MAAA+P,WAGApP,GAAAL,UAAAoZ,WAAA,SAAAxU,EAAAkD,GACA,UAAA8G,IAAAlP,KAAAkF,EAAAkD,IAGAzH,GAAAL,UAAA2D,UAAA,SAAAkE,EAAAC,GAAqD,GAAAoR,GAAAxZ,KACrDqa,EAAA,CAKA,OAJAra,MAAAsP,OAAAtP,KAAAsP,MAAAsV,QAAA,SAAAnc,GAEA,MADA4R,KACAlS,EAAAM,EAAA,GAAAA,EAAA,GAAA+Q,IACOpR,GACPiS,GAGA1Z,GAAAL,UAAAqkB,cAAA,SAAAlW,GACA,MAAAA,KAAAzO,KAAA8P,UACA9P,KAEAyO,EAKAkB,GAAA3P,KAAAgE,KAAAhE,KAAAsP,MAAAb,EAAAzO,KAAA8J,SAJA9J,KAAA8P,UAAArB,EACAzO,KAAA+P,WAAA,EACA/P,OAUAW,GAAAwN,QAEA,IAAAI,IAAA,wBAEAsB,GAAAlP,GAAAL,SACAuP,IAAAtB,KAAA,EACAsB,GAAAgT,IAAAhT,GAAAwD,OACAxD,GAAAgV,SAAAhV,GAAAqU,SAYA1V,GAAAlO,UAAAU,IAAA,SAAAyP,EAAAzB,EAAA7F,EAAA2J,GAEA,OADA9I,GAAAhK,KAAAgK,QACApG,EAAA,EAAAN,EAAA0G,EAAAvG,OAA4CH,EAAAM,EAAUA,IACtD,GAAA4F,EAAAL,EAAAa,EAAApG,GAAA,IACA,MAAAoG,GAAApG,GAAA,EAGA,OAAAkP,IAGAtE,GAAAlO,UAAAoQ,OAAA,SAAAjC,EAAAgC,EAAAzB,EAAA7F,EAAA1H,EAAA2O,EAAAE,GAKA,OAJAwU,GAAArjB,IAAA+I,GAEAR,EAAAhK,KAAAgK,QACAwJ,EAAA,EACAlQ,EAAA0G,EAAAvG,OAAoCH,EAAAkQ,IACpChK,EAAAL,EAAAa,EAAAwJ,GAAA,IAD+CA,KAK/C,GAAAuR,GAAAzhB,EAAAkQ,CAEA,IAAAuR,EAAA/a,EAAAwJ,GAAA,KAAA/R,EAAAqjB,EACA,MAAA9kB,KAMA,IAHAiD,EAAAqN,IACAwU,IAAAC,IAAA9hB,EAAAmN,IAEA0U,GAAA,IAAA9a,EAAAvG,OAAA,CAIA,IAAAshB,IAAAD,GAAA9a,EAAAvG,QAAAuhB,GACA,MAAA9T,IAAAzC,EAAAzE,EAAAb,EAAA1H,EAGA,IAAAwjB,GAAAxW,OAAAzO,KAAAyO,QACAyW,EAAAD,EAAAjb,EAAA7G,EAAA6G,EAYA,OAVA+a,GACAD,EACAtR,IAAAlQ,EAAA,EAAA4hB,EAAAlR,MAAAkR,EAAA1R,GAAA0R,EAAAlR,MAEAkR,EAAA1R,IAAArK,EAAA1H,GAGAyjB,EAAAlT,MAAA7I,EAAA1H,IAGAwjB,GACAjlB,KAAAgK,QAAAkb,EACAllB,MAGA,GAAAwO,IAAAC,EAAAyW,KAYAxW,GAAApO,UAAAU,IAAA,SAAAyP,EAAAzB,EAAA7F,EAAA2J,GACA/O,SAAAiL,IACAA,EAAA/C,GAAA9C,GAEA,IAAAoI,GAAA,SAAAd,EAAAzB,MAAAyB,GAAAM,IACApC,EAAA3O,KAAA2O,MACA,aAAAA,EAAA4C,GAAAuB,EACA9S,KAAA4O,MAAA0E,GAAA3E,EAAA4C,EAAA,IAAAvQ,IAAAyP,EAAAQ,GAAAjC,EAAA7F,EAAA2J,IAGApE,GAAApO,UAAAoQ,OAAA,SAAAjC,EAAAgC,EAAAzB,EAAA7F,EAAA1H,EAAA2O,EAAAE,GACAvM,SAAAiL,IACAA,EAAA/C,GAAA9C,GAEA,IAAAgc,IAAA,IAAA1U,EAAAzB,MAAAyB,GAAAM,GACAQ,EAAA,GAAA4T,EACAxW,EAAA3O,KAAA2O,OACAoW,EAAA,KAAApW,EAAA4C,EAEA,KAAAwT,GAAAtjB,IAAA+I,GACA,MAAAxK,KAGA,IAAAwT,GAAAF,GAAA3E,EAAA4C,EAAA,GACA3C,EAAA5O,KAAA4O,MACAd,EAAAiX,EAAAnW,EAAA4E,GAAAzP,OACA8M,EAAAL,GAAA1C,EAAAW,EAAAgC,EAAAQ,GAAAjC,EAAA7F,EAAA1H,EAAA2O,EAAAE,EAEA,IAAAO,IAAA/C,EACA,MAAA9N,KAGA,KAAA+kB,GAAAlU,GAAAjC,EAAAnL,QAAA2hB,GACA,MAAA5T,IAAA/C,EAAAG,EAAAD,EAAAwW,EAAAtU,EAGA,IAAAkU,IAAAlU,GAAA,IAAAjC,EAAAnL,QAAAkN,GAAA/B,EAAA,EAAA4E,IACA,MAAA5E,GAAA,EAAA4E,EAGA,IAAAuR,GAAAlU,GAAA,IAAAjC,EAAAnL,QAAAkN,GAAAE,GACA,MAAAA,EAGA,IAAAoU,GAAAxW,OAAAzO,KAAAyO,QACA4W,EAAAN,EAAAlU,EAAAlC,IAAA4C,EAAA5C,EAAA4C,EACA+T,EAAAP,EAAAlU,EACA0C,GAAA3E,EAAA4E,EAAA3C,EAAAoU,GACAlR,GAAAnF,EAAA4E,EAAAyR,GACArR,GAAAhF,EAAA4E,EAAA3C,EAAAoU,EAEA,OAAAA,IACAjlB,KAAA2O,OAAA0W,EACArlB,KAAA4O,MAAA0W,EACAtlB,MAGA,GAAA0O,IAAAD,EAAA4W,EAAAC,IAYAzW,GAAAvO,UAAAU,IAAA,SAAAyP,EAAAzB,EAAA7F,EAAA2J,GACA/O,SAAAiL,IACAA,EAAA/C,GAAA9C,GAEA,IAAAqK,IAAA,IAAA/C,EAAAzB,MAAAyB,GAAAM,GACAjD,EAAA9N,KAAA4O,MAAA4E,EACA,OAAA1F,KAAA9M,IAAAyP,EAAAQ,GAAAjC,EAAA7F,EAAA2J,MAGAjE,GAAAvO,UAAAoQ,OAAA,SAAAjC,EAAAgC,EAAAzB,EAAA7F,EAAA1H,EAAA2O,EAAAE,GACAvM,SAAAiL,IACAA,EAAA/C,GAAA9C,GAEA,IAAAqK,IAAA,IAAA/C,EAAAzB,MAAAyB,GAAAM,GACA+T,EAAArjB,IAAA+I,GACAoE,EAAA5O,KAAA4O,MACAd,EAAAc,EAAA4E,EAEA,IAAAsR,IAAAhX,EACA,MAAA9N,KAGA,IAAA6Q,GAAAL,GAAA1C,EAAAW,EAAAgC,EAAAQ,GAAAjC,EAAA7F,EAAA1H,EAAA2O,EAAAE,EACA,IAAAO,IAAA/C,EACA,MAAA9N,KAGA,IAAAulB,GAAAvlB,KAAA8O,KACA,IAAAhB,GAEO,IAAA+C,IACP0U,IACAC,GAAAD,GACA,MAAApU,IAAA1C,EAAAG,EAAA2W,EAAA/R,OAJA+R,IAQA,IAAAN,GAAAxW,OAAAzO,KAAAyO,QACA6W,EAAA/R,GAAA3E,EAAA4E,EAAA3C,EAAAoU,EAEA,OAAAA,IACAjlB,KAAA8O,MAAAyW,EACAvlB,KAAA4O,MAAA0W,EACAtlB,MAGA,GAAA6O,IAAAJ,EAAA8W,EAAAD,IAYAvW,GAAAzO,UAAAU,IAAA,SAAAyP,EAAAzB,EAAA7F,EAAA2J,GAEA,OADA9I,GAAAhK,KAAAgK,QACApG,EAAA,EAAAN,EAAA0G,EAAAvG,OAA4CH,EAAAM,EAAUA,IACtD,GAAA4F,EAAAL,EAAAa,EAAApG,GAAA,IACA,MAAAoG,GAAApG,GAAA,EAGA,OAAAkP,IAGA/D,GAAAzO,UAAAoQ,OAAA,SAAAjC,EAAAgC,EAAAzB,EAAA7F,EAAA1H,EAAA2O,EAAAE,GACAvM,SAAAiL,IACAA,EAAA/C,GAAA9C,GAGA,IAAA2b,GAAArjB,IAAA+I,EAEA,IAAAwE,IAAAhP,KAAAgP,QACA,MAAA8V,GACA9kB,MAEAiD,EAAAqN,GACArN,EAAAmN,GACAQ,GAAA5Q,KAAAyO,EAAAgC,EAAAzB,GAAA7F,EAAA1H,IAKA,QAFAuI,GAAAhK,KAAAgK,QACAwJ,EAAA,EACAlQ,EAAA0G,EAAAvG,OAAoCH,EAAAkQ,IACpChK,EAAAL,EAAAa,EAAAwJ,GAAA,IAD+CA,KAK/C,GAAAuR,GAAAzhB,EAAAkQ,CAEA,IAAAuR,EAAA/a,EAAAwJ,GAAA,KAAA/R,EAAAqjB,EACA,MAAA9kB,KAMA,IAHAiD,EAAAqN,IACAwU,IAAAC,IAAA9hB,EAAAmN,GAEA0U,GAAA,IAAAxhB,EACA,UAAA2L,IAAAR,EAAAzO,KAAAgP,QAAAhF,EAAA,EAAAwJ,GAGA,IAAAyR,GAAAxW,OAAAzO,KAAAyO,QACAyW,EAAAD,EAAAjb,EAAA7G,EAAA6G,EAYA,OAVA+a,GACAD,EACAtR,IAAAlQ,EAAA,EAAA4hB,EAAAlR,MAAAkR,EAAA1R,GAAA0R,EAAAlR,MAEAkR,EAAA1R,IAAArK,EAAA1H,GAGAyjB,EAAAlT,MAAA7I,EAAA1H,IAGAwjB,GACAjlB,KAAAgK,QAAAkb,EACAllB,MAGA,GAAA+O,IAAAN,EAAAzO,KAAAgP,QAAAkW,IAYAjW,GAAA3O,UAAAU,IAAA,SAAAyP,EAAAzB,EAAA7F,EAAA2J,GACA,MAAAtJ,GAAAL,EAAAnJ,KAAAyI,MAAA,IAAAzI,KAAAyI,MAAA,GAAAqK,GAGA7D,GAAA3O,UAAAoQ,OAAA,SAAAjC,EAAAgC,EAAAzB,EAAA7F,EAAA1H,EAAA2O,EAAAE,GACA,GAAAwU,GAAArjB,IAAA+I,GACAib,EAAAjc,EAAAL,EAAAnJ,KAAAyI,MAAA,GACA,QAAAgd,EAAAhkB,IAAAzB,KAAAyI,MAAA,GAAAqc,GACA9kB,MAGAiD,EAAAqN,GAEAwU,MACA7hB,GAAAmN,GAIAqV,EACAhX,OAAAzO,KAAAyO,SACAzO,KAAAyI,MAAA,GAAAhH,EACAzB,MAEA,GAAAiP,IAAAR,EAAAzO,KAAAgP,SAAA7F,EAAA1H,KAGAwB,EAAAmN,GACAQ,GAAA5Q,KAAAyO,EAAAgC,EAAAxE,GAAA9C,MAAA1H,OAOA+M,GAAAlO,UAAAskB,QACA7V,GAAAzO,UAAAskB,QAAA,SAAAzc,EAAAC,GAEA,OADA4B,GAAAhK,KAAAgK,QACApG,EAAA,EAAA4E,EAAAwB,EAAAvG,OAAA,EAAmD+E,GAAA5E,EAAgBA,IACnE,GAAAuE,EAAA6B,EAAA5B,EAAAI,EAAA5E,SAAA,EACA,UAKA8K,GAAApO,UAAAskB,QACA/V,GAAAvO,UAAAskB,QAAA,SAAAzc,EAAAC,GAEA,OADAwG,GAAA5O,KAAA4O,MACAhL,EAAA,EAAA4E,EAAAoG,EAAAnL,OAAA,EAAiD+E,GAAA5E,EAAgBA,IAAA,CACjE,GAAAkK,GAAAc,EAAAxG,EAAAI,EAAA5E,IACA,IAAAkK,KAAA8W,QAAAzc,EAAAC,MAAA,EACA,WAKA6G,GAAA3O,UAAAskB,QAAA,SAAAzc,EAAAC,GACA,MAAAD,GAAAnI,KAAAyI,QAGApH,EAAA6N,GAAAnK,GAQAmK,GAAA5O,UAAA0E,KAAA,WAGA,IAFA,GAAAE,GAAAlF,KAAAmP,MACA0N,EAAA7c,KAAAqP,OACAwN,GAAA,CACA,GAEArU,GAFAsF,EAAA+O,EAAA/O,KACA1J,EAAAyY,EAAAzY,OAEA,IAAA0J,EAAArF,OACA,OAAArE,EACA,MAAAoL,IAAAtK,EAAA4I,EAAArF,WAES,IAAAqF,EAAA9D,SAET,GADAxB,EAAAsF,EAAA9D,QAAAvG,OAAA,EACA+E,GAAApE,EACA,MAAAoL,IAAAtK,EAAA4I,EAAA9D,QAAAhK,KAAAoP,SAAA5G,EAAApE,UAIA,IADAoE,EAAAsF,EAAAc,MAAAnL,OAAA,EACA+E,GAAApE,EAAA,CACA,GAAAshB,GAAA5X,EAAAc,MAAA5O,KAAAoP,SAAA5G,EAAApE,IACA,IAAAshB,EAAA,CACA,GAAAA,EAAAjd,MACA,MAAA+G,IAAAtK,EAAAwgB,EAAAjd,MAEAoU,GAAA7c,KAAAqP,OAAAE,GAAAmW,EAAA7I,GAEA,SAGAA,EAAA7c,KAAAqP,OAAArP,KAAAqP,OAAAK,OAEA,MAAAnK,KA0BA,IAAAyK,IAsOAgV,GAAArT,GAAA,EACAyT,GAAAzT,GAAA,EACA6T,GAAA7T,GAAA,CAEAtQ,GAAA4S,GAAApI,IA2BAoI,GAAAoP,GAAA,WACA,MAAArjB,MAAAe,YAGAkT,GAAA3T,UAAAmM,SAAA,WACA,MAAAzM,MAAAsjB,WAAA,eAKArP,GAAA3T,UAAAU,IAAA,SAAAoD,EAAA0O,GAEA,GADA1O,EAAAD,EAAAnE,KAAAoE,GACAA,GAAA,GAAAA,EAAApE,KAAAgE,KAAA,CACAI,GAAApE,KAAA0V,OACA,IAAA5H,GAAA8I,GAAA5W,KAAAoE,EACA,OAAA0J,MAAAjH,MAAAzC,EAAA2M,IAEA,MAAA+B,IAKAmB,GAAA3T,UAAAiN,IAAA,SAAAnJ,EAAA3C,GACA,MAAA0U,IAAAnW,KAAAoE,EAAA3C,IAGAwS,GAAA3T,UAAA+S,OAAA,SAAAjP,GACA,MAAApE,MAAAuK,IAAAnG,GACA,IAAAA,EAAApE,KAAAyQ,QACArM,IAAApE,KAAAgE,KAAA,EAAAhE,KAAAgU,MACAhU,KAAA2lB,OAAAvhB,EAAA,GAHApE,MAMAiU,GAAA3T,UAAAslB,OAAA,SAAAxhB,EAAA3C,GACA,MAAAzB,MAAA2lB,OAAAvhB,EAAA,EAAA3C,IAGAwS,GAAA3T,UAAA6W,MAAA,WACA,WAAAnX,KAAAgE,KACAhE,KAEAA,KAAA8P,WACA9P,KAAAgE,KAAAhE,KAAA0V,QAAA1V,KAAA2V,UAAA,EACA3V,KAAA8V,OAAA7E,GACAjR,KAAAsP,MAAAtP,KAAA6V,MAAA,KACA7V,KAAA8J,OAAA/F,OACA/D,KAAA+P,WAAA,EACA/P,MAEAmU,MAGAF,GAAA3T,UAAA0R,KAAA,WACA,GAAAyD,GAAA1U,UACA8kB,EAAA7lB,KAAAgE,IACA,OAAAhE,MAAAoO,cAAA,SAAAoG,GACA4B,GAAA5B,EAAA,EAAAqR,EAAApQ,EAAAhS,OACA,QAAAG,GAAA,EAAwBA,EAAA6R,EAAAhS,OAAoBG,IAC5C4Q,EAAAjH,IAAAsY,EAAAjiB,EAAA6R,EAAA7R,OAKAqQ,GAAA3T,UAAA0T,IAAA,WACA,MAAAoC,IAAApW,KAAA,OAGAiU,GAAA3T,UAAAwlB,QAAA,WACA,GAAArQ,GAAA1U,SACA,OAAAf,MAAAoO,cAAA,SAAAoG,GACA4B,GAAA5B,GAAAiB,EAAAhS,OACA,QAAAG,GAAA,EAAwBA,EAAA6R,EAAAhS,OAAoBG,IAC5C4Q,EAAAjH,IAAA3J,EAAA6R,EAAA7R,OAKAqQ,GAAA3T,UAAAmQ,MAAA,WACA,MAAA2F,IAAApW,KAAA,IAKAiU,GAAA3T,UAAA8jB,MAAA,WACA,MAAAxM,IAAA5X,KAAA+D,OAAAhD,YAGAkT,GAAA3T,UAAA+jB,UAAA,SAAAxS,GAAiD,GAAAE,GAAA2Q,GAAAzjB,KAAA8B,UAAA,EACjD,OAAA6W,IAAA5X,KAAA6R,EAAAE,IAGAkC,GAAA3T,UAAA8R,UAAA,WACA,MAAAwF,IAAA5X,KAAAkS,GAAAnR,YAGAkT,GAAA3T,UAAAgS,cAAA,SAAAT,GAAqD,GAAAE,GAAA2Q,GAAAzjB,KAAA8B,UAAA,EACrD,OAAA6W,IAAA5X,KAAAqS,GAAAR,GAAAE,IAGAkC,GAAA3T,UAAAmU,QAAA,SAAAzQ,GACA,MAAAoS,IAAApW,KAAA,EAAAgE,IAKAiQ,GAAA3T,UAAAqW,MAAA,SAAAnS,EAAAC,GACA,GAAAT,GAAAhE,KAAAgE,IACA,OAAAO,GAAAC,EAAAC,EAAAT,GACAhE,KAEAoW,GACApW,KACA0E,EAAAF,EAAAR,GACAY,EAAAH,EAAAT,KAIAiQ,GAAA3T,UAAAoZ,WAAA,SAAAxU,EAAAkD,GACA,GAAAhE,GAAA,EACAqR,EAAAZ,GAAA7U,KAAAoI,EACA,WAAArD,GAAA,WACA,GAAAtD,GAAAgU,GACA,OAAAhU,KAAA+T,GACAjQ,IACAN,EAAAC,EAAAd,IAAA3C,MAIAwS,GAAA3T,UAAA2D,UAAA,SAAAkE,EAAAC,GAIA,IAHA,GAEA3G,GAFA2C,EAAA,EACAqR,EAAAZ,GAAA7U,KAAAoI,IAEA3G,EAAAgU,OAAAD,IACArN,EAAA1G,EAAA2C,IAAApE,SAAA,IAIA,MAAAoE,IAGA6P,GAAA3T,UAAAqkB,cAAA,SAAAlW,GACA,MAAAA,KAAAzO,KAAA8P,UACA9P,KAEAyO,EAIA4F,GAAArU,KAAA0V,QAAA1V,KAAA2V,UAAA3V,KAAA8V,OAAA9V,KAAAsP,MAAAtP,KAAA6V,MAAApH,EAAAzO,KAAA8J,SAHA9J,KAAA8P,UAAArB,EACAzO,OAUAiU,GAAAG,SAEA,IAAAQ,IAAA,yBAEAqB,GAAAhC,GAAA3T,SACA2V,IAAArB,KAAA,EACAqB,GAAA4M,IAAA5M,GAAA5C,OACA4C,GAAA1C,MAAA1D,GAAA0D,MACA0C,GAAAiO,SACAjO,GAAA4O,SAAAhV,GAAAgV,SACA5O,GAAAvF,OAAAb,GAAAa,OACAuF,GAAAgO,SAAApU,GAAAoU,SACAhO,GAAAqO,QAAAzU,GAAAyU,QACArO,GAAAsO,YAAA1U,GAAA0U,YACAtO,GAAA7H,cAAAyB,GAAAzB,cACA6H,GAAAwE,UAAA5K,GAAA4K,UACAxE,GAAAyE,YAAA7K,GAAA6K,YACAzE,GAAAyO,WAAA7U,GAAA6U,WAWApQ,GAAAhU,UAAAoX,aAAA,SAAAjJ,EAAAsG,EAAA3Q,GACA,GAAAA,IAAA2Q,EAAA,GAAAA,EAAA,IAAA/U,KAAA6G,MAAApD,OACA,MAAAzD,KAEA,IAAA+lB,GAAA3hB,IAAA2Q,EAAAhE,EACA,IAAAgV,GAAA/lB,KAAA6G,MAAApD,OACA,UAAA6Q,OAAA7F,EAEA,IACAuX,GADAC,EAAA,IAAAF,CAEA,IAAAhR,EAAA,GACA,GAAAmR,GAAAlmB,KAAA6G,MAAAkf,EAEA,IADAC,EAAAE,KAAAxO,aAAAjJ,EAAAsG,EAAA9D,GAAA7M,GACA4hB,IAAAE,GAAAD,EACA,MAAAjmB,MAGA,GAAAimB,IAAAD,EACA,MAAAhmB,KAEA,IAAAmmB,GAAAzP,GAAA1W,KAAAyO,EACA,KAAAwX,EACA,OAAAriB,GAAA,EAAwBmiB,EAAAniB,EAAkBA,IAC1CuiB,EAAAtf,MAAAjD,GAAAG,MAMA,OAHAiiB,KACAG,EAAAtf,MAAAkf,GAAAC,GAEAG,GAGA7R,GAAAhU,UAAAmX,YAAA,SAAAhJ,EAAAsG,EAAA3Q,GACA,GAAAA,KAAA2Q,EAAA,GAAAA,EAAA,QAAA/U,KAAA6G,MAAApD,OACA,MAAAzD,KAEA,IAAAomB,GAAAhiB,EAAA,IAAA2Q,EAAAhE,EACA,IAAAqV,GAAApmB,KAAA6G,MAAApD,OACA,MAAAzD,KAGA,IAAAgmB,EACA,IAAAjR,EAAA,GACA,GAAAmR,GAAAlmB,KAAA6G,MAAAuf,EAEA,IADAJ,EAAAE,KAAAzO,YAAAhJ,EAAAsG,EAAA9D,GAAA7M,GACA4hB,IAAAE,GAAAE,IAAApmB,KAAA6G,MAAApD,OAAA,EACA,MAAAzD,MAIA,GAAAmmB,GAAAzP,GAAA1W,KAAAyO,EAKA,OAJA0X,GAAAtf,MAAA8e,OAAAS,EAAA,GACAJ,IACAG,EAAAtf,MAAAuf,GAAAJ,GAEAG,EAKA,IA2EAjQ,IA3EAV,KAoUAnU,GAAAyW,GAAAnX,IAcAmX,GAAAuL,GAAA,WACA,MAAArjB,MAAAe,YAGA+W,GAAAxX,UAAAmM,SAAA,WACA,MAAAzM,MAAAsjB,WAAA,eAA0C,MAK1CxL,GAAAxX,UAAAU,IAAA,SAAAmE,EAAA2N,GACA,GAAA1O,GAAApE,KAAAoY,KAAApX,IAAAmE,EACA,OAAApB,UAAAK,EAAApE,KAAAqY,MAAArX,IAAAoD,GAAA,GAAA0O,GAKAgF,GAAAxX,UAAA6W,MAAA,WACA,WAAAnX,KAAAgE,KACAhE,KAEAA,KAAA8P,WACA9P,KAAAgE,KAAA,EACAhE,KAAAoY,KAAAjB,QACAnX,KAAAqY,MAAAlB,QACAnX,MAEA+X,MAGAD,GAAAxX,UAAAiN,IAAA,SAAApI,EAAAC,GACA,MAAAmT,IAAAvY,KAAAmF,EAAAC,IAGA0S,GAAAxX,UAAA+S,OAAA,SAAAlO,GACA,MAAAoT,IAAAvY,KAAAmF,EAAAqF,KAGAsN,GAAAxX,UAAAokB,WAAA,WACA,MAAA1kB,MAAAoY,KAAAsM,cAAA1kB,KAAAqY,MAAAqM,cAGA5M,GAAAxX,UAAA2D,UAAA,SAAAkE,EAAAC,GAA4D,GAAAoR,GAAAxZ,IAC5D,OAAAA,MAAAqY,MAAApU,UACA,SAAAwE,GAA0B,MAAAA,IAAAN,EAAAM,EAAA,GAAAA,EAAA,GAAA+Q,IAC1BpR,IAIA0P,GAAAxX,UAAAoZ,WAAA,SAAAxU,EAAAkD,GACA,MAAApI,MAAAqY,MAAA/R,eAAAoT,WAAAxU,EAAAkD,IAGA0P,GAAAxX,UAAAqkB,cAAA,SAAAlW,GACA,GAAAA,IAAAzO,KAAA8P,UACA,MAAA9P,KAEA,IAAAwY,GAAAxY,KAAAoY,KAAAuM,cAAAlW,GACAgK,EAAAzY,KAAAqY,MAAAsM,cAAAlW,EACA,OAAAA,GAMAyJ,GAAAM,EAAAC,EAAAhK,EAAAzO,KAAA8J,SALA9J,KAAA8P,UAAArB,EACAzO,KAAAoY,KAAAI,EACAxY,KAAAqY,MAAAI,EACAzY,OAUA8X,GAAAE,gBAEAF,GAAAxX,UAAAwC,KAAA,EACAgV,GAAAxX,UAAAuiB,IAAA/K,GAAAxX,UAAA+S,MAcA,IAAAiF,GAgDAjX,GAAAsX,GAAA7W,GAOA6W,GAAArY,UAAAU,IAAA,SAAAmI,EAAA2J,GACA,MAAA9S,MAAA6Y,MAAA7X,IAAAmI,EAAA2J,IAGA6F,GAAArY,UAAAiK,IAAA,SAAApB,GACA,MAAAnJ,MAAA6Y,MAAAtO,IAAApB,IAGAwP,GAAArY,UAAA+lB,SAAA,WACA,MAAArmB,MAAA6Y,MAAAwN,YAGA1N,GAAArY,UAAA8H,QAAA,WAAoD,GAAAoR,GAAAxZ,KACpDqZ,EAAAY,GAAAja,MAAA,EAIA,OAHAA,MAAA8Y,WACAO,EAAAgN,SAAA,WAAiD,MAAA7M,GAAAX,MAAA1S,QAAAiC,YAEjDiR,GAGAV,GAAArY,UAAAI,IAAA,SAAAoZ,EAAAC,GAA+D,GAAAP,GAAAxZ,KAC/Dga,EAAAH,GAAA7Z,KAAA8Z,EAAAC,EAIA,OAHA/Z,MAAA8Y,WACAkB,EAAAqM,SAAA,WAA+C,MAAA7M,GAAAX,MAAA1S,QAAAzF,IAAAoZ,EAAAC,KAE/CC,GAGArB,GAAArY,UAAA2D,UAAA,SAAAkE,EAAAC,GAAiE,GACjExE,GADiE4V,EAAAxZ,IAEjE,OAAAA,MAAA6Y,MAAA5U,UACAjE,KAAA8Y,SACA,SAAA1T,EAAAD,GAA2B,MAAAgD,GAAA/C,EAAAD,EAAAqU,KAC3B5V,EAAAwE,EAAA+V,GAAAne,MAAA,EACA,SAAAoF,GAA0B,MAAA+C,GAAA/C,EAAAgD,IAAAxE,MAAA4V,KAC1BpR,IAIAuQ,GAAArY,UAAAoZ,WAAA,SAAAxU,EAAAkD,GACA,GAAApI,KAAA8Y,SACA,MAAA9Y,MAAA6Y,MAAAa,WAAAxU,EAAAkD,EAEA,IAAAb,GAAAvH,KAAA6Y,MAAAa,WAAAC,GAAAvR,GACAxE,EAAAwE,EAAA+V,GAAAne,MAAA,CACA,WAAA+E,GAAA,WACA,GAAAqG,GAAA7D,EAAAvC,MACA,OAAAoG,GAAA9F,KAAA8F,EACAnG,EAAAC,EAAAkD,IAAAxE,MAAAwH,EAAA3J,MAAA2J,MAIAuN,GAAArY,UAAAwC,KAAA,EAGAzB,EAAA0X,GAAA9W,GAMA8W,GAAAzY,UAAAgZ,SAAA,SAAA7X,GACA,MAAAzB,MAAA6Y,MAAAS,SAAA7X,IAGAsX,GAAAzY,UAAA2D,UAAA,SAAAkE,EAAAC,GAAmE,GAAAoR,GAAAxZ,KACnEqa,EAAA,CACA,OAAAra,MAAA6Y,MAAA5U,UAAA,SAAAmB,GAAgD,MAAA+C,GAAA/C,EAAAiV,IAAAb,IAAmCpR,IAGnF2Q,GAAAzY,UAAAoZ,WAAA,SAAAxU,EAAAkD,GACA,GAAAb,GAAAvH,KAAA6Y,MAAAa,WAAAC,GAAAvR,GACAiS,EAAA,CACA,WAAAtV,GAAA,WACA,GAAAqG,GAAA7D,EAAAvC,MACA,OAAAoG,GAAA9F,KAAA8F,EACAnG,EAAAC,EAAAmV,IAAAjP,EAAA3J,MAAA2J,MAMA/J,EAAA2X,GAAA5W,GAMA4W,GAAA1Y,UAAAiK,IAAA,SAAApB,GACA,MAAAnJ,MAAA6Y,MAAAS,SAAAnQ,IAGA6P,GAAA1Y,UAAA2D,UAAA,SAAAkE,EAAAC,GAA+D,GAAAoR,GAAAxZ,IAC/D,OAAAA,MAAA6Y,MAAA5U,UAAA,SAAAmB,GAAgD,MAAA+C,GAAA/C,IAAAoU,IAAwBpR,IAGxE4Q,GAAA1Y,UAAAoZ,WAAA,SAAAxU,EAAAkD,GACA,GAAAb,GAAAvH,KAAA6Y,MAAAa,WAAAC,GAAAvR,EACA,WAAArD,GAAA,WACA,GAAAqG,GAAA7D,EAAAvC,MACA,OAAAoG,GAAA9F,KAAA8F,EACAnG,EAAAC,EAAAkG,EAAA3J,MAAA2J,EAAA3J,MAAA2J,MAMA/J,EAAA4X,GAAAnX,GAMAmX,GAAA3Y,UAAAkG,SAAA,WACA,MAAAxG,MAAA6Y,MAAA1S,SAGA8S,GAAA3Y,UAAA2D,UAAA,SAAAkE,EAAAC,GAAqE,GAAAoR,GAAAxZ,IACrE,OAAAA,MAAA6Y,MAAA5U,UAAA,SAAAwE,GAGA,GAAAA,EAAA,CACAyV,GAAAzV,EACA,IAAA6d,GAAA5kB,EAAA+G,EACA,OAAAN,GACAme,EAAA7d,EAAAzH,IAAA,GAAAyH,EAAA,GACA6d,EAAA7d,EAAAzH,IAAA,GAAAyH,EAAA,GACA+Q,KAGOpR,IAGP6Q,GAAA3Y,UAAAoZ,WAAA,SAAAxU,EAAAkD,GACA,GAAAb,GAAAvH,KAAA6Y,MAAAa,WAAAC,GAAAvR,EACA,WAAArD,GAAA,WACA,QACA,GAAAqG,GAAA7D,EAAAvC,MACA,IAAAoG,EAAA9F,KACA,MAAA8F,EAEA,IAAA3C,GAAA2C,EAAA3J,KAGA,IAAAgH,EAAA,CACAyV,GAAAzV,EACA,IAAA6d,GAAA5kB,EAAA+G,EACA,OAAAxD,GACAC,EACAohB,EAAA7d,EAAAzH,IAAA,GAAAyH,EAAA,GACA6d,EAAA7d,EAAAzH,IAAA,GAAAyH,EAAA,GACA2C,QAQA2N,GAAAzY,UAAA6J,YACAwO,GAAArY,UAAA6J,YACA6O,GAAA1Y,UAAA6J,YACA8O,GAAA3Y,UAAA6J,YACAoP,GAwpBAlY,EAAAid,GAAA1S,IA8BA0S,GAAAhe,UAAAmM,SAAA,WACA,MAAAzM,MAAAsjB,WAAAlE,GAAApf,MAAA,KAAmD,MAKnDse,GAAAhe,UAAAiK,IAAA,SAAApF,GACA,MAAAnF,MAAA8e,eAAAze,eAAA8E,IAGAmZ,GAAAhe,UAAAU,IAAA,SAAAmE,EAAA2N,GACA,IAAA9S,KAAAuK,IAAApF,GACA,MAAA2N,EAEA,IAAAyT,GAAAvmB,KAAA8e,eAAA3Z,EACA,OAAAnF,MAAAoY,KAAApY,KAAAoY,KAAApX,IAAAmE,EAAAohB,MAKAjI,GAAAhe,UAAA6W,MAAA,WACA,GAAAnX,KAAA8P,UAEA,MADA9P,MAAAoY,MAAApY,KAAAoY,KAAAjB,QACAnX,IAEA,IAAA0e,GAAA1e,KAAAI,WACA,OAAAse,GAAA8H,SAAA9H,EAAA8H,OAAAxH,GAAAhf,KAAAkO,QAGAoQ,GAAAhe,UAAAiN,IAAA,SAAApI,EAAAC,GACA,IAAApF,KAAAuK,IAAApF,GACA,SAAA8F,OAAA,2BAAA9F,EAAA,QAAAia,GAAApf,MAEA,IAAAA,KAAAoY,OAAApY,KAAAoY,KAAA7N,IAAApF,GAAA,CACA,GAAAohB,GAAAvmB,KAAA8e,eAAA3Z,EACA,IAAAC,IAAAmhB,EACA,MAAAvmB,MAGA,GAAAwY,GAAAxY,KAAAoY,MAAApY,KAAAoY,KAAA7K,IAAApI,EAAAC,EACA,OAAApF,MAAA8P,WAAA0I,IAAAxY,KAAAoY,KACApY,KAEAgf,GAAAhf,KAAAwY,IAGA8F,GAAAhe,UAAA+S,OAAA,SAAAlO,GACA,IAAAnF,KAAAuK,IAAApF,GACA,MAAAnF,KAEA,IAAAwY,GAAAxY,KAAAoY,MAAApY,KAAAoY,KAAA/E,OAAAlO,EACA,OAAAnF,MAAA8P,WAAA0I,IAAAxY,KAAAoY,KACApY,KAEAgf,GAAAhf,KAAAwY,IAGA8F,GAAAhe,UAAAokB,WAAA,WACA,MAAA1kB,MAAAoY,KAAAsM,cAGApG,GAAAhe,UAAAoZ,WAAA,SAAAxU,EAAAkD,GAA2D,GAAAoR,GAAAxZ,IAC3D,OAAA4B,GAAA5B,KAAA8e,gBAAApe,IAAA,SAAA0J,EAAAjF,GAAqE,MAAAqU,GAAAxY,IAAAmE,KAAqBuU,WAAAxU,EAAAkD,IAG1FkW,GAAAhe,UAAA2D,UAAA,SAAAkE,EAAAC,GAAwD,GAAAoR,GAAAxZ,IACxD,OAAA4B,GAAA5B,KAAA8e,gBAAApe,IAAA,SAAA0J,EAAAjF,GAAqE,MAAAqU,GAAAxY,IAAAmE,KAAqBlB,UAAAkE,EAAAC,IAG1FkW,GAAAhe,UAAAqkB,cAAA,SAAAlW,GACA,GAAAA,IAAAzO,KAAA8P,UACA,MAAA9P,KAEA,IAAAwY,GAAAxY,KAAAoY,MAAApY,KAAAoY,KAAAuM,cAAAlW,EACA,OAAAA,GAKAuQ,GAAAhf,KAAAwY,EAAA/J,IAJAzO,KAAA8P,UAAArB,EACAzO,KAAAoY,KAAAI,EACAxY,MAMA,IAAA+e,IAAAT,GAAAhe,SACAye,IAAA8D,IAAA9D,GAAA1L,OACA0L,GAAAmF,SACAnF,GAAA8F,SAAAhV,GAAAgV,SACA9F,GAAAqF,MAAAvU,GAAAuU,MACArF,GAAAsF,UAAAxU,GAAAwU,UACAtF,GAAAuF,QAAAzU,GAAAyU,QACAvF,GAAA3M,UAAAvC,GAAAuC,UACA2M,GAAAzM,cAAAzC,GAAAyC,cACAyM,GAAAwF,YAAA1U,GAAA0U,YACAxF,GAAAxL,MAAA1D,GAAA0D,MACAwL,GAAArO,OAAAb,GAAAa,OACAqO,GAAAkF,SAAApU,GAAAoU,SACAlF,GAAA3Q,cAAAyB,GAAAzB,cACA2Q,GAAAtE,UAAA5K,GAAA4K,UACAsE,GAAArE,YAAA7K,GAAA6K,YAkCArZ,EAAAme,GAAA1T,IAcA0T,GAAA6D,GAAA,WACA,MAAArjB,MAAAe,YAGAye,GAAAiH,SAAA,SAAAhlB,GACA,MAAAzB,MAAA4B,EAAAH,GAAAilB,WAGAlH,GAAAlf,UAAAmM,SAAA,WACA,MAAAzM,MAAAsjB,WAAA,QAAmC,MAKnC9D,GAAAlf,UAAAiK,IAAA,SAAA9I,GACA,MAAAzB,MAAAoY,KAAA7N,IAAA9I,IAKA+d,GAAAlf,UAAAqf,IAAA,SAAAle,GACA,MAAAqe,IAAA9f,UAAAoY,KAAA7K,IAAA9L,GAAA,KAGA+d,GAAAlf,UAAA+S,OAAA,SAAA5R,GACA,MAAAqe,IAAA9f,UAAAoY,KAAA/E,OAAA5R,KAGA+d,GAAAlf,UAAA6W,MAAA,WACA,MAAA2I,IAAA9f,UAAAoY,KAAAjB,UAKAqI,GAAAlf,UAAAqmB,MAAA,WAAsC,GAAA5U,GAAA2Q,GAAAzjB,KAAA8B,UAAA,EAEtC,OADAgR,KAAAU,OAAA,SAAAC,GAAyC,WAAAA,EAAA1O,OACzC,IAAA+N,EAAAtO,OACAzD,KAEA,IAAAA,KAAAgE,MAAAhE,KAAA8P,WAAA,IAAAiC,EAAAtO,OAGAzD,KAAAoO,cAAA,SAAAb,GACA,OAAA3J,GAAA,EAAwBA,EAAAmO,EAAAtO,OAAmBG,IAC3C1B,EAAA6P,EAAAnO,IAAAyK,QAAA,SAAA5M,GAA2D,MAAA8L,GAAAoS,IAAAle,OAJ3DzB,KAAAI,YAAA2R,EAAA,KASAyN,GAAAlf,UAAAsmB,UAAA,WAA0C,GAAA7U,GAAA2Q,GAAAzjB,KAAA8B,UAAA,EAC1C,QAAAgR,EAAAtO,OACA,MAAAzD,KAEA+R,KAAArR,IAAA,SAAAoD,GAAyC,MAAA5B,GAAA4B,IACzC,IAAA+iB,GAAA7mB,IACA,OAAAA,MAAAoO,cAAA,SAAAb,GACAsZ,EAAAxY,QAAA,SAAA5M,GACAsQ,EAAA9H,MAAA,SAAAnG,GAA4C,MAAAA,GAAAwV,SAAA7X,MAC5C8L,EAAA8F,OAAA5R,QAMA+d,GAAAlf,UAAAwmB,SAAA,WAAyC,GAAA/U,GAAA2Q,GAAAzjB,KAAA8B,UAAA,EACzC,QAAAgR,EAAAtO,OACA,MAAAzD,KAEA+R,KAAArR,IAAA,SAAAoD,GAAyC,MAAA5B,GAAA4B,IACzC,IAAA+iB,GAAA7mB,IACA,OAAAA,MAAAoO,cAAA,SAAAb,GACAsZ,EAAAxY,QAAA,SAAA5M,GACAsQ,EAAAiM,KAAA,SAAAla,GAA0C,MAAAA,GAAAwV,SAAA7X,MAC1C8L,EAAA8F,OAAA5R,QAMA+d,GAAAlf,UAAA8jB,MAAA,WACA,MAAApkB,MAAA2mB,MAAA7lB,MAAAd,KAAAe,YAGAye,GAAAlf,UAAA+jB,UAAA,SAAAxS,GAAgD,GAAAE,GAAA2Q,GAAAzjB,KAAA8B,UAAA,EAChD,OAAAf,MAAA2mB,MAAA7lB,MAAAd,KAAA+R,IAGAyN,GAAAlf,UAAA+c,KAAA,SAAAF,GAEA,MAAAiD,IAAAlD,GAAAld,KAAAmd,KAGAqC,GAAAlf,UAAAkkB,OAAA,SAAA1K,EAAAqD,GAEA,MAAAiD,IAAAlD,GAAAld,KAAAmd,EAAArD,KAGA0F,GAAAlf,UAAAokB,WAAA,WACA,MAAA1kB,MAAAoY,KAAAsM,cAGAlF,GAAAlf,UAAA2D,UAAA,SAAAkE,EAAAC,GAAqD,GAAAoR,GAAAxZ,IACrD,OAAAA,MAAAoY,KAAAnU,UAAA,SAAAmG,EAAAjF,GAAkD,MAAAgD,GAAAhD,IAAAqU,IAAwBpR,IAG1EoX,GAAAlf,UAAAoZ,WAAA,SAAAxU,EAAAkD,GACA,MAAApI,MAAAoY,KAAA1X,IAAA,SAAA0J,EAAAjF,GAA4C,MAAAA,KAASuU,WAAAxU,EAAAkD,IAGrDoX,GAAAlf,UAAAqkB,cAAA,SAAAlW,GACA,GAAAA,IAAAzO,KAAA8P,UACA,MAAA9P,KAEA,IAAAwY,GAAAxY,KAAAoY,KAAAuM,cAAAlW,EACA,OAAAA,GAKAzO,KAAAggB,OAAAxH,EAAA/J,IAJAzO,KAAA8P,UAAArB,EACAzO,KAAAoY,KAAAI,EACAxY,OAUAwf,GAAAE,QAEA,IAAAG,IAAA,wBAEAK,GAAAV,GAAAlf,SACA4f,IAAAL,KAAA,EACAK,GAAA2C,IAAA3C,GAAA7M,OACA6M,GAAA9N,UAAA8N,GAAAkE,MACAlE,GAAA5N,cAAA4N,GAAAmE,UACAnE,GAAA9R,cAAAyB,GAAAzB,cACA8R,GAAAzF,UAAA5K,GAAA4K,UACAyF,GAAAxF,YAAA7K,GAAA6K,YAEAwF,GAAAH,QAAAN,GACAS,GAAAF,OAAAC,EAqBA,IAAAE,GAKA9e,GAAA+e,GAAAZ,IAcAY,GAAAiD,GAAA,WACA,MAAArjB,MAAAe,YAGAqf,GAAAqG,SAAA,SAAAhlB,GACA,MAAAzB,MAAA4B,EAAAH,GAAAilB,WAGAtG,GAAA9f,UAAAmM,SAAA,WACA,MAAAzM,MAAAsjB,WAAA,eAA0C,MAQ1ClD,GAAAE,eAEA,IAAAG,IAAAL,GAAA9f,SACAmgB,IAAA3d,KAAA,EAEA2d,GAAAV,QAAAM,GACAI,GAAAT,OAAAQ,EAUA,IAAAE,GAKArf,GAAAsf,GAAA9U,IAUA8U,GAAA0C,GAAA,WACA,MAAArjB,MAAAe,YAGA4f,GAAArgB,UAAAmM,SAAA,WACA,MAAAzM,MAAAsjB,WAAA,gBAKA3C,GAAArgB,UAAAU,IAAA,SAAAoD,EAAA0O,GACA,GAAAoO,GAAAlhB,KAAAohB,KAEA,KADAhd,EAAAD,EAAAnE,KAAAoE,GACA8c,GAAA9c,KACA8c,IAAAlc,IAEA,OAAAkc,KAAAzf,MAAAqR,GAGA6N,GAAArgB,UAAAymB,KAAA,WACA,MAAA/mB,MAAAohB,OAAAphB,KAAAohB,MAAA3f,OAKAkf,GAAArgB,UAAA0R,KAAA,WACA,OAAAjR,UAAA0C,OACA,MAAAzD,KAIA,QAFAmQ,GAAAnQ,KAAAgE,KAAAjD,UAAA0C,OACAyd,EAAAlhB,KAAAohB,MACAxd,EAAA7C,UAAA0C,OAAA,EAAyCG,GAAA,EAASA,IAClDsd,GACAzf,MAAAV,UAAA6C,GACAoB,KAAAkc,EAGA,OAAAlhB,MAAA8P,WACA9P,KAAAgE,KAAAmM,EACAnQ,KAAAohB,MAAAF,EACAlhB,KAAA8J,OAAA/F,OACA/D,KAAA+P,WAAA,EACA/P,MAEAihB,GAAA9Q,EAAA+Q,IAGAP,GAAArgB,UAAA0mB,QAAA,SAAAljB,GAEA,GADAA,EAAA/B,EAAA+B,GACA,IAAAA,EAAAE,KACA,MAAAhE,KAEAiO,IAAAnK,EAAAE,KACA,IAAAmM,GAAAnQ,KAAAgE,KACAkd,EAAAlhB,KAAAohB,KAQA,OAPAtd,GAAAsE,UAAAiG,QAAA,SAAA5M,GACA0O,IACA+Q,GACAzf,QACAuD,KAAAkc,KAGAlhB,KAAA8P,WACA9P,KAAAgE,KAAAmM,EACAnQ,KAAAohB,MAAAF,EACAlhB,KAAA8J,OAAA/F,OACA/D,KAAA+P,WAAA,EACA/P,MAEAihB,GAAA9Q,EAAA+Q,IAGAP,GAAArgB,UAAA0T,IAAA,WACA,MAAAhU,MAAA2W,MAAA,IAGAgK,GAAArgB,UAAAwlB,QAAA,WACA,MAAA9lB,MAAAgS,KAAAlR,MAAAd,KAAAe,YAGA4f,GAAArgB,UAAAwgB,WAAA,SAAAhd,GACA,MAAA9D,MAAAgnB,QAAAljB,IAGA6c,GAAArgB,UAAAmQ,MAAA,WACA,MAAAzQ,MAAAgU,IAAAlT,MAAAd,KAAAe,YAGA4f,GAAArgB,UAAA6W,MAAA,WACA,WAAAnX,KAAAgE,KACAhE,KAEAA,KAAA8P,WACA9P,KAAAgE,KAAA,EACAhE,KAAAohB,MAAArd,OACA/D,KAAA8J,OAAA/F,OACA/D,KAAA+P,WAAA,EACA/P,MAEA4gB,MAGAD,GAAArgB,UAAAqW,MAAA,SAAAnS,EAAAC,GACA,GAAAF,EAAAC,EAAAC,EAAAzE,KAAAgE,MACA,MAAAhE,KAEA,IAAAkb,GAAAxW,EAAAF,EAAAxE,KAAAgE,MACAmX,EAAAvW,EAAAH,EAAAzE,KAAAgE,KACA,IAAAmX,IAAAnb,KAAAgE,KAEA,MAAA6H,IAAAvL,UAAAqW,MAAA1X,KAAAe,KAAAwE,EAAAC,EAIA,KAFA,GAAA0L,GAAAnQ,KAAAgE,KAAAkX,EACAgG,EAAAlhB,KAAAohB,MACAlG,KACAgG,IAAAlc,IAEA,OAAAhF,MAAA8P,WACA9P,KAAAgE,KAAAmM,EACAnQ,KAAAohB,MAAAF,EACAlhB,KAAA8J,OAAA/F,OACA/D,KAAA+P,WAAA,EACA/P,MAEAihB,GAAA9Q,EAAA+Q,IAKAP,GAAArgB,UAAAqkB,cAAA,SAAAlW,GACA,MAAAA,KAAAzO,KAAA8P,UACA9P,KAEAyO,EAKAwS,GAAAjhB,KAAAgE,KAAAhE,KAAAohB,MAAA3S,EAAAzO,KAAA8J,SAJA9J,KAAA8P,UAAArB,EACAzO,KAAA+P,WAAA,EACA/P,OAOA2gB,GAAArgB,UAAA2D,UAAA,SAAAkE,EAAAC,GACA,GAAAA,EACA,MAAApI,MAAAoI,UAAAnE,UAAAkE,EAIA,KAFA,GAAAkS,GAAA,EACAvM,EAAA9N,KAAAohB,MACAtT,GACA3F,EAAA2F,EAAArM,MAAA4Y,IAAAra,SAAA,GAGA8N,IAAA9I,IAEA,OAAAqV,IAGAsG,GAAArgB,UAAAoZ,WAAA,SAAAxU,EAAAkD,GACA,GAAAA,EACA,MAAApI,MAAAoI,UAAAsR,WAAAxU,EAEA,IAAAmV,GAAA,EACAvM,EAAA9N,KAAAohB,KACA,WAAArc,GAAA,WACA,GAAA+I,EAAA,CACA,GAAArM,GAAAqM,EAAArM,KAEA,OADAqM,KAAA9I,KACAC,EAAAC,EAAAmV,IAAA5Y,GAEA,MAAA8D,QASAob,GAAAE,UAEA,IAAAG,IAAA,0BAEAG,GAAAR,GAAArgB,SACA6gB,IAAAH,KAAA,EACAG,GAAA/S,cAAAyB,GAAAzB,cACA+S,GAAA1G,UAAA5K,GAAA4K,UACA0G,GAAAzG,YAAA7K,GAAA6K,YACAyG,GAAAuD,WAAA7U,GAAA6U,UAaA,IAAArD,GAgBA7f,GAAAuD,WAEAuc,GAAA9f,GAIA+S,QAAA,WACAtG,GAAAjO,KAAAgE,KACA,IAAA6C,GAAA,GAAAlD,OAAA3D,KAAAgE,MAAA,EAEA,OADAhE,MAAAqmB,WAAApiB,UAAA,SAAAmB,EAAAsP,GAAiD7N,EAAA6N,GAAAtP,IACjDyB,GAGAJ,aAAA,WACA,UAAAsS,IAAA/Y,OAGAinB,KAAA,WACA,MAAAjnB,MAAAmG,QAAAzF,IACA,SAAAe,GAA0B,MAAAA,IAAA,kBAAAA,GAAAwlB,KAAAxlB,EAAAwlB,OAAAxlB,IAC1BylB,UAGAC,OAAA,WACA,MAAAnnB,MAAAmG,QAAAzF,IACA,SAAAe,GAA0B,MAAAA,IAAA,kBAAAA,GAAA0lB,OAAA1lB,EAAA0lB,SAAA1lB,IAC1BylB,UAGA7gB,WAAA,WACA,UAAAsS,IAAA3Y,MAAA,IAGAuJ,MAAA,WAEA,MAAA5I,IAAAX,KAAAqG,eAGA+gB,SAAA,WACAnZ,GAAAjO,KAAAgE,KACA,IAAAgD,KAEA,OADAhH,MAAAiE,UAAA,SAAAmB,EAAAD,GAAsC6B,EAAA7B,GAAAC,IACtC4B,GAGAqgB,aAAA,WAEA,MAAAvP,IAAA9X,KAAAqG,eAGAihB,aAAA,WAEA,MAAAlH,IAAAve,EAAA7B,WAAAqmB,WAAArmB,OAGAunB,MAAA,WAEA,MAAA/H,IAAA3d,EAAA7B,WAAAqmB,WAAArmB,OAGA2G,SAAA,WACA,UAAAqS,IAAAhZ,OAGAmG,MAAA,WACA,MAAAnE,GAAAhC,WAAAyG,eACA5E,EAAA7B,WAAAqG,aACArG,KAAA2G,YAGA6gB,QAAA,WAEA,MAAA7G,IAAA9e,EAAA7B,WAAAqmB,WAAArmB,OAGAsJ,OAAA,WAEA,MAAA2K,IAAApS,EAAA7B,WAAAqmB,WAAArmB,OAMAyM,SAAA,WACA,oBAGA6W,WAAA,SAAApC,EAAA/L,GACA,WAAAnV,KAAAgE,KACAkd,EAAA/L,EAEA+L,EAAA,IAAAlhB,KAAAmG,QAAAzF,IAAAV,KAAAynB,kBAAAC,KAAA,UAAAvS,GAMA8G,OAAA,WAAwB,GAAAxG,GAAAiN,GAAAzjB,KAAA8B,UAAA,EACxB,OAAAga,IAAA/a,KAAA+b,GAAA/b,KAAAyV,KAGA6D,SAAA,SAAAiK,GACA,MAAAvjB,MAAAge,KAAA,SAAAvc,GAAyC,MAAA+H,GAAA/H,EAAA8hB,MAGzCvZ,QAAA,WACA,MAAAhK,MAAA0Z,WAAAD,KAGAxP,MAAA,SAAAkQ,EAAAJ,GACA9L,GAAAjO,KAAAgE,KACA,IAAA2jB,IAAA,CAOA,OANA3nB,MAAAiE,UAAA,SAAAmB,EAAAD,EAAAhG,GACA,MAAAgb,GAAAlb,KAAA8a,EAAA3U,EAAAD,EAAAhG,GAAA,QACAwoB,GAAA,GACA,KAGAA,GAGAlV,OAAA,SAAA0H,EAAAJ,GACA,MAAAgB,IAAA/a,KAAAka,GAAAla,KAAAma,EAAAJ,GAAA,KAGA6N,KAAA,SAAAzN,EAAAJ,EAAAjH,GACA,GAAArK,GAAAzI,KAAA6nB,UAAA1N,EAAAJ,EACA,OAAAtR,KAAA,GAAAqK,GAGAzE,QAAA,SAAAyZ,EAAA/N,GAEA,MADA9L,IAAAjO,KAAAgE,MACAhE,KAAAiE,UAAA8V,EAAA+N,EAAAvI,KAAAxF,GAAA+N,IAGAJ,KAAA,SAAA1K,GACA/O,GAAAjO,KAAAgE,MACAgZ,EAAAjZ,SAAAiZ,EAAA,GAAAA,EAAA,GACA,IAAA+K,GAAA,GACAC,GAAA,CAKA,OAJAhoB,MAAAiE,UAAA,SAAAmB,GACA4iB,KAAA,EAAAD,GAAA/K,EACA+K,GAAA,OAAA3iB,GAAArB,SAAAqB,IAAAqH,WAAA,KAEAsb,GAGA9gB,KAAA,WACA,MAAAjH,MAAA0Z,WAAAE,KAGAlZ,IAAA,SAAAoZ,EAAAC,GACA,MAAAgB,IAAA/a,KAAA6Z,GAAA7Z,KAAA8Z,EAAAC,KAGAsC,OAAA,SAAA4L,EAAAC,EAAAnO,GACA9L,GAAAjO,KAAAgE,KACA,IAAAmkB,GACAC,CAcA,OAbArnB,WAAA0C,OAAA,EACA2kB,GAAA,EAEAD,EAAAD,EAEAloB,KAAAiE,UAAA,SAAAmB,EAAAD,EAAAhG,GACAipB,GACAA,GAAA,EACAD,EAAA/iB,GAEA+iB,EAAAF,EAAAhpB,KAAA8a,EAAAoO,EAAA/iB,EAAAD,EAAAhG,KAGAgpB,GAGAE,YAAA,SAAAJ,EAAAC,EAAAnO,GACA,GAAAuO,GAAAtoB,KAAAqG,aAAA+B,SACA,OAAAkgB,GAAAjM,OAAAvb,MAAAwnB,EAAAvnB,YAGAqH,QAAA,WACA,MAAA2S,IAAA/a,KAAAia,GAAAja,MAAA,KAGA2W,MAAA,SAAAnS,EAAAC,GACA,MAAAsW,IAAA/a,KAAAgb,GAAAhb,KAAAwE,EAAAC,GAAA,KAGAuZ,KAAA,SAAA7D,EAAAJ,GACA,OAAA/Z,KAAAiK,MAAA2X,GAAAzH,GAAAJ,IAGAsD,KAAA,SAAAF,GACA,MAAApC,IAAA/a,KAAAkd,GAAAld,KAAAmd,KAGA1H,OAAA,WACA,MAAAzV,MAAA0Z,WAAAC,KAMA4O,QAAA,WACA,MAAAvoB,MAAA2W,MAAA,OAGA6R,QAAA,WACA,MAAAzkB,UAAA/D,KAAAgE,KAAA,IAAAhE,KAAAgE,MAAAhE,KAAAge,KAAA,WAAiF,YAGjFlP,MAAA,SAAAqL,EAAAJ,GACA,MAAAlW,GACAsW,EAAAna,KAAAmG,QAAAsM,OAAA0H,EAAAJ,GAAA/Z,OAIAyoB,QAAA,SAAAlO,EAAAR,GACA,MAAAO,IAAAta,KAAAua,EAAAR,IAGAnQ,OAAA,SAAA8Z,GACA,MAAA7Z,GAAA7J,KAAA0jB,IAGAld,SAAA,WACA,GAAAX,GAAA7F,IACA,IAAA6F,EAAA0C,OAEA,UAAA3B,GAAAf,EAAA0C,OAEA,IAAAmgB,GAAA7iB,EAAAM,QAAAzF,IAAAihB,IAAAlb,cAEA,OADAiiB,GAAApiB,aAAA,WAAkD,MAAAT,GAAAM,SAClDuiB,GAGAC,UAAA,SAAAxO,EAAAJ,GACA,MAAA/Z,MAAAyS,OAAAmP,GAAAzH,GAAAJ,IAGA8N,UAAA,SAAA1N,EAAAJ,EAAAjH,GACA,GAAA8V,GAAA9V,CAOA,OANA9S,MAAAiE,UAAA,SAAAmB,EAAAD,EAAAhG,GACA,MAAAgb,GAAAlb,KAAA8a,EAAA3U,EAAAD,EAAAhG,IACAypB,GAAAzjB,EAAAC,IACA,GAFA,SAKAwjB,GAGAC,QAAA,SAAA1O,EAAAJ,GACA,GAAAtR,GAAAzI,KAAA6nB,UAAA1N,EAAAJ,EACA,OAAAtR,MAAA,IAGAqgB,SAAA,SAAA3O,EAAAJ,EAAAjH,GACA,MAAA9S,MAAAqG,aAAA+B,UAAAwf,KAAAzN,EAAAJ,EAAAjH,IAGAiW,cAAA,SAAA5O,EAAAJ,EAAAjH,GACA,MAAA9S,MAAAqG,aAAA+B,UAAAyf,UAAA1N,EAAAJ,EAAAjH,IAGAkW,YAAA,SAAA7O,EAAAJ,GACA,MAAA/Z,MAAAqG,aAAA+B,UAAAygB,QAAA1O,EAAAJ,IAGAkP,MAAA,WACA,MAAAjpB,MAAA4nB,KAAA1jB,IAGAglB,QAAA,SAAApP,EAAAC,GACA,MAAAgB,IAAA/a,KAAA8c,GAAA9c,KAAA8Z,EAAAC,KAGAqC,QAAA,SAAAI,GACA,MAAAzB,IAAA/a,KAAAuc,GAAAvc,KAAAwc,GAAA,KAGAlW,aAAA,WACA,UAAA2S,IAAAjZ,OAGAgB,IAAA,SAAAmoB,EAAArW,GACA,MAAA9S,MAAA4nB,KAAA,SAAAxd,EAAAjB,GAA0C,MAAAK,GAAAL,EAAAggB,IAA0BplB,OAAA+O,IAGpEsW,MAAA,SAAAC,EAAAvW,GAMA,IALA,GAIA1H,GAJAke,EAAAtpB,KAGA8D,EAAAsa,GAAAiL,KAEAje,EAAAtH,EAAAkB,QAAAM,MAAA,CACA,GAAA6D,GAAAiC,EAAA3J,KAEA,IADA6nB,OAAAtoB,IAAAsoB,EAAAtoB,IAAAmI,EAAAqB,OACA8e,IAAA9e,GACA,MAAAsI,GAGA,MAAAwW,IAGAC,QAAA,SAAAhP,EAAAR,GACA,MAAAY,IAAA3a,KAAAua,EAAAR,IAGAxP,IAAA,SAAA4e,GACA,MAAAnpB,MAAAgB,IAAAmoB,EAAA3e,UAGAgf,MAAA,SAAAH,GACA,MAAArpB,MAAAopB,MAAAC,EAAA7e,UAGAif,SAAA,SAAA3lB,GAEA,MADAA,GAAA,kBAAAA,GAAAwV,SAAAxV,EAAAtC,EAAAsC,GACA9D,KAAAiK,MAAA,SAAAxI,GAA0C,MAAAqC,GAAAwV,SAAA7X,MAG1CioB,WAAA,SAAA5lB,GAEA,MADAA,GAAA,kBAAAA,GAAA2lB,SAAA3lB,EAAAtC,EAAAsC,GACAA,EAAA2lB,SAAAzpB,OAGA2pB,MAAA,SAAApG,GACA,MAAAvjB,MAAA6oB,QAAA,SAAApnB,GAA4C,MAAA+H,GAAA/H,EAAA8hB,MAG5CmD,OAAA,WACA,MAAA1mB,MAAAmG,QAAAzF,IAAAghB,IAAAjb,gBAGAmjB,KAAA,WACA,MAAA5pB,MAAAmG,QAAAiC,UAAA6gB,SAGAY,UAAA,SAAAtG,GACA,MAAAvjB,MAAAqG,aAAA+B,UAAAuhB,MAAApG,IAGA/f,IAAA,SAAA2Z,GACA,MAAAG,IAAAtd,KAAAmd,IAGA2M,MAAA,SAAAhQ,EAAAqD,GACA,MAAAG,IAAAtd,KAAAmd,EAAArD,IAGAhV,IAAA,SAAAqY,GACA,MAAAG,IAAAtd,KAAAmd,EAAA0E,GAAA1E,GAAAgF,KAGA4H,MAAA,SAAAjQ,EAAAqD,GACA,MAAAG,IAAAtd,KAAAmd,EAAA0E,GAAA1E,GAAAgF,GAAArI,IAGAkQ,KAAA,WACA,MAAAhqB,MAAA2W,MAAA,IAGAsT,KAAA,SAAAC,GACA,MAAAlqB,MAAA2W,MAAApT,KAAAC,IAAA,EAAA0mB,KAGAC,SAAA,SAAAD,GACA,MAAAnP,IAAA/a,UAAAmG,QAAAiC,UAAA6hB,KAAAC,GAAA9hB,YAGAgiB,UAAA,SAAAjQ,EAAAJ,GACA,MAAAgB,IAAA/a,KAAA4b,GAAA5b,KAAAma,EAAAJ,GAAA,KAGAsQ,UAAA,SAAAlQ,EAAAJ,GACA,MAAA/Z,MAAAoqB,UAAAxI,GAAAzH,GAAAJ,IAGAyK,OAAA,SAAA1K,EAAAqD,GACA,MAAApC,IAAA/a,KAAAkd,GAAAld,KAAAmd,EAAArD,KAGAwQ,KAAA,SAAAJ,GACA,MAAAlqB,MAAA2W,MAAA,EAAApT,KAAAC,IAAA,EAAA0mB,KAGAK,SAAA,SAAAL,GACA,MAAAnP,IAAA/a,UAAAmG,QAAAiC,UAAAkiB,KAAAJ,GAAA9hB,YAGAoiB,UAAA,SAAArQ,EAAAJ,GACA,MAAAgB,IAAA/a,KAAAyb,GAAAzb,KAAAma,EAAAJ,KAGA0Q,UAAA,SAAAtQ,EAAAJ,GACA,MAAA/Z,MAAAwqB,UAAA5I,GAAAzH,GAAAJ,IAGAsM,SAAA,WACA,MAAArmB,MAAAyG,gBAMA8F,SAAA,WACA,MAAAvM,MAAA8J,SAAA9J,KAAA8J,OAAAsY,GAAApiB,SAgBA,IAAA0qB,IAAAlpB,EAAAlB,SACAoqB,IAAApoB,KAAA,EACAooB,GAAA3H,IAAA2H,GAAAjV,OACAiV,GAAAxD,OAAAwD,GAAAnW,QACAmW,GAAAjD,iBAAA3F,GACA4I,GAAAvH,QACAuH,GAAAtH,SAAA,WAA2C,MAAApjB,MAAAyM,YAC3Cie,GAAAC,MAAAD,GAAAxB,QACAwB,GAAAE,SAAAF,GAAApR,SAEAgI,GAAA1f,GAIA8W,KAAA,WACA,MAAAqC,IAAA/a,KAAAkZ,GAAAlZ,QAGA6qB,WAAA,SAAA/Q,EAAAC,GAA2C,GAAAP,GAAAxZ,KAC3Cqa,EAAA,CACA,OAAAU,IAAA/a,KACAA,KAAAmG,QAAAzF,IACA,SAAA0E,EAAAD,GAA2B,MAAA2U,GAAA7a,KAAA8a,GAAA5U,EAAAC,GAAAiV,IAAAb,KAC3BlT,iBAIAwkB,QAAA,SAAAhR,EAAAC,GAAwC,GAAAP,GAAAxZ,IACxC,OAAA+a,IAAA/a,KACAA,KAAAmG,QAAAuS,OAAAhY,IACA,SAAAyE,EAAAC,GAA2B,MAAA0U,GAAA7a,KAAA8a,EAAA5U,EAAAC,EAAAoU,KAC3Bd,UAMA,IAAAqS,IAAAnpB,EAAAtB,SACAyqB,IAAAvoB,KAAA,EACAuoB,GAAAhI,IAAA2H,GAAA1gB,QACA+gB,GAAA7D,OAAAwD,GAAAtD,SACA2D,GAAAtD,iBAAA,SAAAriB,EAAAD,GAA6D,MAAA4c,MAAAC,UAAA7c,GAAA,KAAA2c,GAAA1c,IAI7Dkc,GAAAvf,GAIAsE,WAAA,WACA,UAAAsS,IAAA3Y,MAAA,IAMAyS,OAAA,SAAA0H,EAAAJ,GACA,MAAAgB,IAAA/a,KAAAka,GAAAla,KAAAma,EAAAJ,GAAA,KAGAiR,UAAA,SAAA7Q,EAAAJ,GACA,GAAAtR,GAAAzI,KAAA6nB,UAAA1N,EAAAJ,EACA,OAAAtR,KAAA,OAGA+a,QAAA,SAAAD,GACA,GAAApa,GAAAnJ,KAAA2pB,MAAApG,EACA,OAAAxf,UAAAoF,EAAA,GAAAA,GAGAsa,YAAA,SAAAF,GACA,GAAApa,GAAAnJ,KAAA6pB,UAAAtG,EACA,OAAAxf,UAAAoF,EAAA,GAAAA,GAGAf,QAAA,WACA,MAAA2S,IAAA/a,KAAAia,GAAAja,MAAA,KAGA2W,MAAA,SAAAnS,EAAAC,GACA,MAAAsW,IAAA/a,KAAAgb,GAAAhb,KAAAwE,EAAAC,GAAA,KAGAkhB,OAAA,SAAAvhB,EAAA6mB,GACA,GAAAC,GAAAnqB,UAAA0C,MAEA,IADAwnB,EAAA1nB,KAAAC,IAAA,EAAAynB,EAAA,GACA,IAAAC,GAAA,IAAAA,IAAAD,EACA,MAAAjrB,KAKAoE,GAAAM,EAAAN,EAAA,EAAAA,EAAApE,KAAA8O,QAAA9O,KAAAgE,KACA,IAAAmnB,GAAAnrB,KAAA2W,MAAA,EAAAvS,EACA,OAAA2W,IACA/a,KACA,IAAAkrB,EACAC,EACAA,EAAAlP,OAAA9Y,EAAApC,UAAA,GAAAf,KAAA2W,MAAAvS,EAAA6mB,MAOAG,cAAA,SAAAjR,EAAAJ,GACA,GAAAtR,GAAAzI,KAAA+oB,cAAA5O,EAAAJ,EACA,OAAAtR,KAAA,OAGAwgB,MAAA,WACA,MAAAjpB,MAAAgB,IAAA,IAGAob,QAAA,SAAAI,GACA,MAAAzB,IAAA/a,KAAAuc,GAAAvc,KAAAwc,GAAA,KAGAxb,IAAA,SAAAoD,EAAA0O,GAEA,MADA1O,GAAAD,EAAAnE,KAAAoE,GACA,EAAAA,GAAApE,KAAAgE,OAAA4G,KACA7G,SAAA/D,KAAAgE,MAAAI,EAAApE,KAAAgE,KACA8O,EACA9S,KAAA4nB,KAAA,SAAAxd,EAAAjB,GAAqC,MAAAA,KAAA/E,GAAqBL,OAAA+O,IAG1DvI,IAAA,SAAAnG,GAEA,MADAA,GAAAD,EAAAnE,KAAAoE,GACAA,GAAA,IAAAL,SAAA/D,KAAAgE,KACAhE,KAAAgE,OAAA4G,KAAAxG,EAAApE,KAAAgE,KACA,KAAAhE,KAAAwjB,QAAApf,KAIAinB,UAAA,SAAArO,GACA,MAAAjC,IAAA/a,KAAA+c,GAAA/c,KAAAgd,KAGAsO,WAAA,WACA,GAAAxZ,IAAA9R,MAAAic,OAAA9Y,EAAApC,YACAwqB,EAAA9N,GAAAzd,KAAAmG,QAAAlE,EAAAohB,GAAAvR,GACA0Z,EAAAD,EAAAnP,SAAA,EAIA,OAHAmP,GAAAvnB,OACAwnB,EAAAxnB,KAAAunB,EAAAvnB,KAAA8N,EAAArO,QAEAsX,GAAA/a,KAAAwrB,IAGA9E,OAAA,WACA,MAAAxb,GAAA,EAAAlL,KAAAgE,OAGA4lB,KAAA,WACA,MAAA5pB,MAAAgB,IAAA,KAGAopB,UAAA,SAAAjQ,EAAAJ,GACA,MAAAgB,IAAA/a,KAAA4b,GAAA5b,KAAAma,EAAAJ,GAAA,KAGA0R,IAAA,WACA,GAAA3Z,IAAA9R,MAAAic,OAAA9Y,EAAApC,WACA,OAAAga,IAAA/a,KAAAyd,GAAAzd,KAAAkiB,GAAApQ,KAGA4Z,QAAA,SAAA/N,GACA,GAAA7L,GAAA3O,EAAApC,UAEA,OADA+Q,GAAA,GAAA9R,KACA+a,GAAA/a,KAAAyd,GAAAzd,KAAA2d,EAAA7L,OAKA/P,EAAAzB,UAAAoC,KAAA,EACAX,EAAAzB,UAAAwC,KAAA,EAIAwe,GAAApf,GAIAlB,IAAA,SAAAS,EAAAqR,GACA,MAAA9S,MAAAuK,IAAA9I,KAAAqR,GAGAwG,SAAA,SAAA7X,GACA,MAAAzB,MAAAuK,IAAA9I,IAMAilB,OAAA,WACA,MAAA1mB,MAAAqmB,cAKAnkB,EAAA5B,UAAAiK,IAAAmgB,GAAApR,SACApX,EAAA5B,UAAAsqB,SAAA1oB,EAAA5B,UAAAgZ,SAKAgI,GAAAxf,EAAAF,EAAAtB,WACAghB,GAAArf,EAAAF,EAAAzB,WACAghB,GAAAlf,EAAAF,EAAA5B,WAEAghB,GAAA1V,GAAAhK,EAAAtB,WACAghB,GAAAzV,GAAA9J,EAAAzB,WACAghB,GAAAxV,GAAA5J,EAAA5B,UAuEA,IAAAG,KAEAe,WAEAG,MACAgK,cACAhL,OACAmX,cACA7D,QACA0M,SACAnB,OACAY,cAEA9B,UACApT,QACAT,SAEAjB,KACAX,SAIA,OAAApI","file":"bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/// <reference path='../typings/react/react.d.ts' />\n\t/// <reference path='../typings/react/react-dom.d.ts' />\n\t/// <reference path='../node_modules/immutable/dist/immutable.d.ts'/>\n\t\"use strict\";\n\t\n\tvar React = __webpack_require__(1);\n\tvar ReactDOM = __webpack_require__(2);\n\tvar hello_1 = __webpack_require__(3);\n\tReactDOM.render(React.createElement(hello_1.App, { compiler: 'Typescript', framework: 'React' }), document.getElementById('app'));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = React;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = ReactDOM;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar React = __webpack_require__(1);\n\tvar Immutable = __webpack_require__(4);\n\tvar map = Immutable.Map({ a: 1, b: 2, c: 3 });\n\tvar App = (function (_super) {\n\t    __extends(App, _super);\n\t    function App() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    App.prototype.render = function () {\n\t        return React.createElement(\"p\", null, \n\t            map.get('b'), \n\t            \" Hello from \", \n\t            this.props.compiler, \n\t            \" & \", \n\t            this.props.framework, \n\t            \"!\");\n\t    };\n\t    return App;\n\t}(React.Component));\n\texports.App = App;\n\t//# sourceMappingURL=hello.js.map\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t *  Copyright (c) 2014-2015, Facebook, Inc.\n\t *  All rights reserved.\n\t *\n\t *  This source code is licensed under the BSD-style license found in the\n\t *  LICENSE file in the root directory of this source tree. An additional grant\n\t *  of patent rights can be found in the PATENTS file in the same directory.\n\t */\n\t\n\t(function (global, factory) {\n\t   true ? module.exports = factory() :\n\t  typeof define === 'function' && define.amd ? define(factory) :\n\t  (global.Immutable = factory());\n\t}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\t\n\t  function createClass(ctor, superClass) {\n\t    if (superClass) {\n\t      ctor.prototype = Object.create(superClass.prototype);\n\t    }\n\t    ctor.prototype.constructor = ctor;\n\t  }\n\t\n\t  function Iterable(value) {\n\t      return isIterable(value) ? value : Seq(value);\n\t    }\n\t\n\t\n\t  createClass(KeyedIterable, Iterable);\n\t    function KeyedIterable(value) {\n\t      return isKeyed(value) ? value : KeyedSeq(value);\n\t    }\n\t\n\t\n\t  createClass(IndexedIterable, Iterable);\n\t    function IndexedIterable(value) {\n\t      return isIndexed(value) ? value : IndexedSeq(value);\n\t    }\n\t\n\t\n\t  createClass(SetIterable, Iterable);\n\t    function SetIterable(value) {\n\t      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n\t    }\n\t\n\t\n\t\n\t  function isIterable(maybeIterable) {\n\t    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n\t  }\n\t\n\t  function isKeyed(maybeKeyed) {\n\t    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n\t  }\n\t\n\t  function isIndexed(maybeIndexed) {\n\t    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n\t  }\n\t\n\t  function isAssociative(maybeAssociative) {\n\t    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n\t  }\n\t\n\t  function isOrdered(maybeOrdered) {\n\t    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n\t  }\n\t\n\t  Iterable.isIterable = isIterable;\n\t  Iterable.isKeyed = isKeyed;\n\t  Iterable.isIndexed = isIndexed;\n\t  Iterable.isAssociative = isAssociative;\n\t  Iterable.isOrdered = isOrdered;\n\t\n\t  Iterable.Keyed = KeyedIterable;\n\t  Iterable.Indexed = IndexedIterable;\n\t  Iterable.Set = SetIterable;\n\t\n\t\n\t  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n\t  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n\t  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n\t  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\t\n\t  // Used for setting prototype methods that IE8 chokes on.\n\t  var DELETE = 'delete';\n\t\n\t  // Constants describing the size of trie nodes.\n\t  var SHIFT = 5; // Resulted in best performance after ______?\n\t  var SIZE = 1 << SHIFT;\n\t  var MASK = SIZE - 1;\n\t\n\t  // A consistent shared value representing \"not set\" which equals nothing other\n\t  // than itself, and nothing that could be provided externally.\n\t  var NOT_SET = {};\n\t\n\t  // Boolean references, Rough equivalent of `bool &`.\n\t  var CHANGE_LENGTH = { value: false };\n\t  var DID_ALTER = { value: false };\n\t\n\t  function MakeRef(ref) {\n\t    ref.value = false;\n\t    return ref;\n\t  }\n\t\n\t  function SetRef(ref) {\n\t    ref && (ref.value = true);\n\t  }\n\t\n\t  // A function which returns a value representing an \"owner\" for transient writes\n\t  // to tries. The return value will only ever equal itself, and will not equal\n\t  // the return of any subsequent call of this function.\n\t  function OwnerID() {}\n\t\n\t  // http://jsperf.com/copy-array-inline\n\t  function arrCopy(arr, offset) {\n\t    offset = offset || 0;\n\t    var len = Math.max(0, arr.length - offset);\n\t    var newArr = new Array(len);\n\t    for (var ii = 0; ii < len; ii++) {\n\t      newArr[ii] = arr[ii + offset];\n\t    }\n\t    return newArr;\n\t  }\n\t\n\t  function ensureSize(iter) {\n\t    if (iter.size === undefined) {\n\t      iter.size = iter.__iterate(returnTrue);\n\t    }\n\t    return iter.size;\n\t  }\n\t\n\t  function wrapIndex(iter, index) {\n\t    // This implements \"is array index\" which the ECMAString spec defines as:\n\t    //\n\t    //     A String property name P is an array index if and only if\n\t    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n\t    //     to 2^32−1.\n\t    //\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n\t    if (typeof index !== 'number') {\n\t      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n\t      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n\t        return NaN;\n\t      }\n\t      index = uint32Index;\n\t    }\n\t    return index < 0 ? ensureSize(iter) + index : index;\n\t  }\n\t\n\t  function returnTrue() {\n\t    return true;\n\t  }\n\t\n\t  function wholeSlice(begin, end, size) {\n\t    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n\t      (end === undefined || (size !== undefined && end >= size));\n\t  }\n\t\n\t  function resolveBegin(begin, size) {\n\t    return resolveIndex(begin, size, 0);\n\t  }\n\t\n\t  function resolveEnd(end, size) {\n\t    return resolveIndex(end, size, size);\n\t  }\n\t\n\t  function resolveIndex(index, size, defaultIndex) {\n\t    return index === undefined ?\n\t      defaultIndex :\n\t      index < 0 ?\n\t        Math.max(0, size + index) :\n\t        size === undefined ?\n\t          index :\n\t          Math.min(size, index);\n\t  }\n\t\n\t  /* global Symbol */\n\t\n\t  var ITERATE_KEYS = 0;\n\t  var ITERATE_VALUES = 1;\n\t  var ITERATE_ENTRIES = 2;\n\t\n\t  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n\t  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\t\n\t  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\t\n\t\n\t  function Iterator(next) {\n\t      this.next = next;\n\t    }\n\t\n\t    Iterator.prototype.toString = function() {\n\t      return '[Iterator]';\n\t    };\n\t\n\t\n\t  Iterator.KEYS = ITERATE_KEYS;\n\t  Iterator.VALUES = ITERATE_VALUES;\n\t  Iterator.ENTRIES = ITERATE_ENTRIES;\n\t\n\t  Iterator.prototype.inspect =\n\t  Iterator.prototype.toSource = function () { return this.toString(); }\n\t  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n\t    return this;\n\t  };\n\t\n\t\n\t  function iteratorValue(type, k, v, iteratorResult) {\n\t    var value = type === 0 ? k : type === 1 ? v : [k, v];\n\t    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n\t      value: value, done: false\n\t    });\n\t    return iteratorResult;\n\t  }\n\t\n\t  function iteratorDone() {\n\t    return { value: undefined, done: true };\n\t  }\n\t\n\t  function hasIterator(maybeIterable) {\n\t    return !!getIteratorFn(maybeIterable);\n\t  }\n\t\n\t  function isIterator(maybeIterator) {\n\t    return maybeIterator && typeof maybeIterator.next === 'function';\n\t  }\n\t\n\t  function getIterator(iterable) {\n\t    var iteratorFn = getIteratorFn(iterable);\n\t    return iteratorFn && iteratorFn.call(iterable);\n\t  }\n\t\n\t  function getIteratorFn(iterable) {\n\t    var iteratorFn = iterable && (\n\t      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n\t      iterable[FAUX_ITERATOR_SYMBOL]\n\t    );\n\t    if (typeof iteratorFn === 'function') {\n\t      return iteratorFn;\n\t    }\n\t  }\n\t\n\t  function isArrayLike(value) {\n\t    return value && typeof value.length === 'number';\n\t  }\n\t\n\t  createClass(Seq, Iterable);\n\t    function Seq(value) {\n\t      return value === null || value === undefined ? emptySequence() :\n\t        isIterable(value) ? value.toSeq() : seqFromValue(value);\n\t    }\n\t\n\t    Seq.of = function(/*...values*/) {\n\t      return Seq(arguments);\n\t    };\n\t\n\t    Seq.prototype.toSeq = function() {\n\t      return this;\n\t    };\n\t\n\t    Seq.prototype.toString = function() {\n\t      return this.__toString('Seq {', '}');\n\t    };\n\t\n\t    Seq.prototype.cacheResult = function() {\n\t      if (!this._cache && this.__iterateUncached) {\n\t        this._cache = this.entrySeq().toArray();\n\t        this.size = this._cache.length;\n\t      }\n\t      return this;\n\t    };\n\t\n\t    // abstract __iterateUncached(fn, reverse)\n\t\n\t    Seq.prototype.__iterate = function(fn, reverse) {\n\t      return seqIterate(this, fn, reverse, true);\n\t    };\n\t\n\t    // abstract __iteratorUncached(type, reverse)\n\t\n\t    Seq.prototype.__iterator = function(type, reverse) {\n\t      return seqIterator(this, type, reverse, true);\n\t    };\n\t\n\t\n\t\n\t  createClass(KeyedSeq, Seq);\n\t    function KeyedSeq(value) {\n\t      return value === null || value === undefined ?\n\t        emptySequence().toKeyedSeq() :\n\t        isIterable(value) ?\n\t          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n\t          keyedSeqFromValue(value);\n\t    }\n\t\n\t    KeyedSeq.prototype.toKeyedSeq = function() {\n\t      return this;\n\t    };\n\t\n\t\n\t\n\t  createClass(IndexedSeq, Seq);\n\t    function IndexedSeq(value) {\n\t      return value === null || value === undefined ? emptySequence() :\n\t        !isIterable(value) ? indexedSeqFromValue(value) :\n\t        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n\t    }\n\t\n\t    IndexedSeq.of = function(/*...values*/) {\n\t      return IndexedSeq(arguments);\n\t    };\n\t\n\t    IndexedSeq.prototype.toIndexedSeq = function() {\n\t      return this;\n\t    };\n\t\n\t    IndexedSeq.prototype.toString = function() {\n\t      return this.__toString('Seq [', ']');\n\t    };\n\t\n\t    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n\t      return seqIterate(this, fn, reverse, false);\n\t    };\n\t\n\t    IndexedSeq.prototype.__iterator = function(type, reverse) {\n\t      return seqIterator(this, type, reverse, false);\n\t    };\n\t\n\t\n\t\n\t  createClass(SetSeq, Seq);\n\t    function SetSeq(value) {\n\t      return (\n\t        value === null || value === undefined ? emptySequence() :\n\t        !isIterable(value) ? indexedSeqFromValue(value) :\n\t        isKeyed(value) ? value.entrySeq() : value\n\t      ).toSetSeq();\n\t    }\n\t\n\t    SetSeq.of = function(/*...values*/) {\n\t      return SetSeq(arguments);\n\t    };\n\t\n\t    SetSeq.prototype.toSetSeq = function() {\n\t      return this;\n\t    };\n\t\n\t\n\t\n\t  Seq.isSeq = isSeq;\n\t  Seq.Keyed = KeyedSeq;\n\t  Seq.Set = SetSeq;\n\t  Seq.Indexed = IndexedSeq;\n\t\n\t  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\t\n\t  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\t\n\t\n\t\n\t  createClass(ArraySeq, IndexedSeq);\n\t    function ArraySeq(array) {\n\t      this._array = array;\n\t      this.size = array.length;\n\t    }\n\t\n\t    ArraySeq.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n\t    };\n\t\n\t    ArraySeq.prototype.__iterate = function(fn, reverse) {\n\t      var array = this._array;\n\t      var maxIndex = array.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    ArraySeq.prototype.__iterator = function(type, reverse) {\n\t      var array = this._array;\n\t      var maxIndex = array.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function() \n\t        {return ii > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n\t      );\n\t    };\n\t\n\t\n\t\n\t  createClass(ObjectSeq, KeyedSeq);\n\t    function ObjectSeq(object) {\n\t      var keys = Object.keys(object);\n\t      this._object = object;\n\t      this._keys = keys;\n\t      this.size = keys.length;\n\t    }\n\t\n\t    ObjectSeq.prototype.get = function(key, notSetValue) {\n\t      if (notSetValue !== undefined && !this.has(key)) {\n\t        return notSetValue;\n\t      }\n\t      return this._object[key];\n\t    };\n\t\n\t    ObjectSeq.prototype.has = function(key) {\n\t      return this._object.hasOwnProperty(key);\n\t    };\n\t\n\t    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n\t      var object = this._object;\n\t      var keys = this._keys;\n\t      var maxIndex = keys.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        var key = keys[reverse ? maxIndex - ii : ii];\n\t        if (fn(object[key], key, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    ObjectSeq.prototype.__iterator = function(type, reverse) {\n\t      var object = this._object;\n\t      var keys = this._keys;\n\t      var maxIndex = keys.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var key = keys[reverse ? maxIndex - ii : ii];\n\t        return ii++ > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, key, object[key]);\n\t      });\n\t    };\n\t\n\t  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t  createClass(IterableSeq, IndexedSeq);\n\t    function IterableSeq(iterable) {\n\t      this._iterable = iterable;\n\t      this.size = iterable.length || iterable.size;\n\t    }\n\t\n\t    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterable = this._iterable;\n\t      var iterator = getIterator(iterable);\n\t      var iterations = 0;\n\t      if (isIterator(iterator)) {\n\t        var step;\n\t        while (!(step = iterator.next()).done) {\n\t          if (fn(step.value, iterations++, this) === false) {\n\t            break;\n\t          }\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterable = this._iterable;\n\t      var iterator = getIterator(iterable);\n\t      if (!isIterator(iterator)) {\n\t        return new Iterator(iteratorDone);\n\t      }\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step : iteratorValue(type, iterations++, step.value);\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(IteratorSeq, IndexedSeq);\n\t    function IteratorSeq(iterator) {\n\t      this._iterator = iterator;\n\t      this._iteratorCache = [];\n\t    }\n\t\n\t    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterator = this._iterator;\n\t      var cache = this._iteratorCache;\n\t      var iterations = 0;\n\t      while (iterations < cache.length) {\n\t        if (fn(cache[iterations], iterations++, this) === false) {\n\t          return iterations;\n\t        }\n\t      }\n\t      var step;\n\t      while (!(step = iterator.next()).done) {\n\t        var val = step.value;\n\t        cache[iterations] = val;\n\t        if (fn(val, iterations++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = this._iterator;\n\t      var cache = this._iteratorCache;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        if (iterations >= cache.length) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          cache[iterations] = step.value;\n\t        }\n\t        return iteratorValue(type, iterations, cache[iterations++]);\n\t      });\n\t    };\n\t\n\t\n\t\n\t\n\t  // # pragma Helper functions\n\t\n\t  function isSeq(maybeSeq) {\n\t    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n\t  }\n\t\n\t  var EMPTY_SEQ;\n\t\n\t  function emptySequence() {\n\t    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n\t  }\n\t\n\t  function keyedSeqFromValue(value) {\n\t    var seq =\n\t      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n\t      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n\t      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n\t      typeof value === 'object' ? new ObjectSeq(value) :\n\t      undefined;\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of [k, v] entries, '+\n\t        'or keyed object: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function indexedSeqFromValue(value) {\n\t    var seq = maybeIndexedSeqFromValue(value);\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of values: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function seqFromValue(value) {\n\t    var seq = maybeIndexedSeqFromValue(value) ||\n\t      (typeof value === 'object' && new ObjectSeq(value));\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of values, or keyed object: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function maybeIndexedSeqFromValue(value) {\n\t    return (\n\t      isArrayLike(value) ? new ArraySeq(value) :\n\t      isIterator(value) ? new IteratorSeq(value) :\n\t      hasIterator(value) ? new IterableSeq(value) :\n\t      undefined\n\t    );\n\t  }\n\t\n\t  function seqIterate(seq, fn, reverse, useKeys) {\n\t    var cache = seq._cache;\n\t    if (cache) {\n\t      var maxIndex = cache.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        var entry = cache[reverse ? maxIndex - ii : ii];\n\t        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    }\n\t    return seq.__iterateUncached(fn, reverse);\n\t  }\n\t\n\t  function seqIterator(seq, type, reverse, useKeys) {\n\t    var cache = seq._cache;\n\t    if (cache) {\n\t      var maxIndex = cache.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var entry = cache[reverse ? maxIndex - ii : ii];\n\t        return ii++ > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n\t      });\n\t    }\n\t    return seq.__iteratorUncached(type, reverse);\n\t  }\n\t\n\t  function fromJS(json, converter) {\n\t    return converter ?\n\t      fromJSWith(converter, json, '', {'': json}) :\n\t      fromJSDefault(json);\n\t  }\n\t\n\t  function fromJSWith(converter, json, key, parentJSON) {\n\t    if (Array.isArray(json)) {\n\t      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n\t    }\n\t    if (isPlainObj(json)) {\n\t      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n\t    }\n\t    return json;\n\t  }\n\t\n\t  function fromJSDefault(json) {\n\t    if (Array.isArray(json)) {\n\t      return IndexedSeq(json).map(fromJSDefault).toList();\n\t    }\n\t    if (isPlainObj(json)) {\n\t      return KeyedSeq(json).map(fromJSDefault).toMap();\n\t    }\n\t    return json;\n\t  }\n\t\n\t  function isPlainObj(value) {\n\t    return value && (value.constructor === Object || value.constructor === undefined);\n\t  }\n\t\n\t  /**\n\t   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n\t   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n\t   *\n\t   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n\t   * value, which is different from the algorithm described by\n\t   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\t   *\n\t   * This is extended further to allow Objects to describe the values they\n\t   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n\t   *\n\t   * Note: because of this extension, the key equality of Immutable.Map and the\n\t   * value equality of Immutable.Set will differ from ES6 Map and Set.\n\t   *\n\t   * ### Defining custom values\n\t   *\n\t   * The easiest way to describe the value an object represents is by implementing\n\t   * `valueOf`. For example, `Date` represents a value by returning a unix\n\t   * timestamp for `valueOf`:\n\t   *\n\t   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n\t   *     var date2 = new Date(1234567890000);\n\t   *     date1.valueOf(); // 1234567890000\n\t   *     assert( date1 !== date2 );\n\t   *     assert( Immutable.is( date1, date2 ) );\n\t   *\n\t   * Note: overriding `valueOf` may have other implications if you use this object\n\t   * where JavaScript expects a primitive, such as implicit string coercion.\n\t   *\n\t   * For more complex types, especially collections, implementing `valueOf` may\n\t   * not be performant. An alternative is to implement `equals` and `hashCode`.\n\t   *\n\t   * `equals` takes another object, presumably of similar type, and returns true\n\t   * if the it is equal. Equality is symmetrical, so the same result should be\n\t   * returned if this and the argument are flipped.\n\t   *\n\t   *     assert( a.equals(b) === b.equals(a) );\n\t   *\n\t   * `hashCode` returns a 32bit integer number representing the object which will\n\t   * be used to determine how to store the value object in a Map or Set. You must\n\t   * provide both or neither methods, one must not exist without the other.\n\t   *\n\t   * Also, an important relationship between these methods must be upheld: if two\n\t   * values are equal, they *must* return the same hashCode. If the values are not\n\t   * equal, they might have the same hashCode; this is called a hash collision,\n\t   * and while undesirable for performance reasons, it is acceptable.\n\t   *\n\t   *     if (a.equals(b)) {\n\t   *       assert( a.hashCode() === b.hashCode() );\n\t   *     }\n\t   *\n\t   * All Immutable collections implement `equals` and `hashCode`.\n\t   *\n\t   */\n\t  function is(valueA, valueB) {\n\t    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n\t      return true;\n\t    }\n\t    if (!valueA || !valueB) {\n\t      return false;\n\t    }\n\t    if (typeof valueA.valueOf === 'function' &&\n\t        typeof valueB.valueOf === 'function') {\n\t      valueA = valueA.valueOf();\n\t      valueB = valueB.valueOf();\n\t      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n\t        return true;\n\t      }\n\t      if (!valueA || !valueB) {\n\t        return false;\n\t      }\n\t    }\n\t    if (typeof valueA.equals === 'function' &&\n\t        typeof valueB.equals === 'function' &&\n\t        valueA.equals(valueB)) {\n\t      return true;\n\t    }\n\t    return false;\n\t  }\n\t\n\t  function deepEqual(a, b) {\n\t    if (a === b) {\n\t      return true;\n\t    }\n\t\n\t    if (\n\t      !isIterable(b) ||\n\t      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n\t      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n\t      isKeyed(a) !== isKeyed(b) ||\n\t      isIndexed(a) !== isIndexed(b) ||\n\t      isOrdered(a) !== isOrdered(b)\n\t    ) {\n\t      return false;\n\t    }\n\t\n\t    if (a.size === 0 && b.size === 0) {\n\t      return true;\n\t    }\n\t\n\t    var notAssociative = !isAssociative(a);\n\t\n\t    if (isOrdered(a)) {\n\t      var entries = a.entries();\n\t      return b.every(function(v, k)  {\n\t        var entry = entries.next().value;\n\t        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n\t      }) && entries.next().done;\n\t    }\n\t\n\t    var flipped = false;\n\t\n\t    if (a.size === undefined) {\n\t      if (b.size === undefined) {\n\t        if (typeof a.cacheResult === 'function') {\n\t          a.cacheResult();\n\t        }\n\t      } else {\n\t        flipped = true;\n\t        var _ = a;\n\t        a = b;\n\t        b = _;\n\t      }\n\t    }\n\t\n\t    var allEqual = true;\n\t    var bSize = b.__iterate(function(v, k)  {\n\t      if (notAssociative ? !a.has(v) :\n\t          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n\t        allEqual = false;\n\t        return false;\n\t      }\n\t    });\n\t\n\t    return allEqual && a.size === bSize;\n\t  }\n\t\n\t  createClass(Repeat, IndexedSeq);\n\t\n\t    function Repeat(value, times) {\n\t      if (!(this instanceof Repeat)) {\n\t        return new Repeat(value, times);\n\t      }\n\t      this._value = value;\n\t      this.size = times === undefined ? Infinity : Math.max(0, times);\n\t      if (this.size === 0) {\n\t        if (EMPTY_REPEAT) {\n\t          return EMPTY_REPEAT;\n\t        }\n\t        EMPTY_REPEAT = this;\n\t      }\n\t    }\n\t\n\t    Repeat.prototype.toString = function() {\n\t      if (this.size === 0) {\n\t        return 'Repeat []';\n\t      }\n\t      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n\t    };\n\t\n\t    Repeat.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ? this._value : notSetValue;\n\t    };\n\t\n\t    Repeat.prototype.includes = function(searchValue) {\n\t      return is(this._value, searchValue);\n\t    };\n\t\n\t    Repeat.prototype.slice = function(begin, end) {\n\t      var size = this.size;\n\t      return wholeSlice(begin, end, size) ? this :\n\t        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n\t    };\n\t\n\t    Repeat.prototype.reverse = function() {\n\t      return this;\n\t    };\n\t\n\t    Repeat.prototype.indexOf = function(searchValue) {\n\t      if (is(this._value, searchValue)) {\n\t        return 0;\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Repeat.prototype.lastIndexOf = function(searchValue) {\n\t      if (is(this._value, searchValue)) {\n\t        return this.size;\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Repeat.prototype.__iterate = function(fn, reverse) {\n\t      for (var ii = 0; ii < this.size; ii++) {\n\t        if (fn(this._value, ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n\t      var ii = 0;\n\t      return new Iterator(function() \n\t        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n\t      );\n\t    };\n\t\n\t    Repeat.prototype.equals = function(other) {\n\t      return other instanceof Repeat ?\n\t        is(this._value, other._value) :\n\t        deepEqual(other);\n\t    };\n\t\n\t\n\t  var EMPTY_REPEAT;\n\t\n\t  function invariant(condition, error) {\n\t    if (!condition) throw new Error(error);\n\t  }\n\t\n\t  createClass(Range, IndexedSeq);\n\t\n\t    function Range(start, end, step) {\n\t      if (!(this instanceof Range)) {\n\t        return new Range(start, end, step);\n\t      }\n\t      invariant(step !== 0, 'Cannot step a Range by 0');\n\t      start = start || 0;\n\t      if (end === undefined) {\n\t        end = Infinity;\n\t      }\n\t      step = step === undefined ? 1 : Math.abs(step);\n\t      if (end < start) {\n\t        step = -step;\n\t      }\n\t      this._start = start;\n\t      this._end = end;\n\t      this._step = step;\n\t      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n\t      if (this.size === 0) {\n\t        if (EMPTY_RANGE) {\n\t          return EMPTY_RANGE;\n\t        }\n\t        EMPTY_RANGE = this;\n\t      }\n\t    }\n\t\n\t    Range.prototype.toString = function() {\n\t      if (this.size === 0) {\n\t        return 'Range []';\n\t      }\n\t      return 'Range [ ' +\n\t        this._start + '...' + this._end +\n\t        (this._step !== 1 ? ' by ' + this._step : '') +\n\t      ' ]';\n\t    };\n\t\n\t    Range.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ?\n\t        this._start + wrapIndex(this, index) * this._step :\n\t        notSetValue;\n\t    };\n\t\n\t    Range.prototype.includes = function(searchValue) {\n\t      var possibleIndex = (searchValue - this._start) / this._step;\n\t      return possibleIndex >= 0 &&\n\t        possibleIndex < this.size &&\n\t        possibleIndex === Math.floor(possibleIndex);\n\t    };\n\t\n\t    Range.prototype.slice = function(begin, end) {\n\t      if (wholeSlice(begin, end, this.size)) {\n\t        return this;\n\t      }\n\t      begin = resolveBegin(begin, this.size);\n\t      end = resolveEnd(end, this.size);\n\t      if (end <= begin) {\n\t        return new Range(0, 0);\n\t      }\n\t      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n\t    };\n\t\n\t    Range.prototype.indexOf = function(searchValue) {\n\t      var offsetValue = searchValue - this._start;\n\t      if (offsetValue % this._step === 0) {\n\t        var index = offsetValue / this._step;\n\t        if (index >= 0 && index < this.size) {\n\t          return index\n\t        }\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Range.prototype.lastIndexOf = function(searchValue) {\n\t      return this.indexOf(searchValue);\n\t    };\n\t\n\t    Range.prototype.__iterate = function(fn, reverse) {\n\t      var maxIndex = this.size - 1;\n\t      var step = this._step;\n\t      var value = reverse ? this._start + maxIndex * step : this._start;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        if (fn(value, ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t        value += reverse ? -step : step;\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    Range.prototype.__iterator = function(type, reverse) {\n\t      var maxIndex = this.size - 1;\n\t      var step = this._step;\n\t      var value = reverse ? this._start + maxIndex * step : this._start;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var v = value;\n\t        value += reverse ? -step : step;\n\t        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n\t      });\n\t    };\n\t\n\t    Range.prototype.equals = function(other) {\n\t      return other instanceof Range ?\n\t        this._start === other._start &&\n\t        this._end === other._end &&\n\t        this._step === other._step :\n\t        deepEqual(this, other);\n\t    };\n\t\n\t\n\t  var EMPTY_RANGE;\n\t\n\t  createClass(Collection, Iterable);\n\t    function Collection() {\n\t      throw TypeError('Abstract');\n\t    }\n\t\n\t\n\t  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\t\n\t  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\t\n\t  createClass(SetCollection, Collection);function SetCollection() {}\n\t\n\t\n\t  Collection.Keyed = KeyedCollection;\n\t  Collection.Indexed = IndexedCollection;\n\t  Collection.Set = SetCollection;\n\t\n\t  var imul =\n\t    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n\t    Math.imul :\n\t    function imul(a, b) {\n\t      a = a | 0; // int\n\t      b = b | 0; // int\n\t      var c = a & 0xffff;\n\t      var d = b & 0xffff;\n\t      // Shift by 0 fixes the sign on the high part.\n\t      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n\t    };\n\t\n\t  // v8 has an optimization for storing 31-bit signed numbers.\n\t  // Values which have either 00 or 11 as the high order bits qualify.\n\t  // This function drops the highest order bit in a signed number, maintaining\n\t  // the sign bit.\n\t  function smi(i32) {\n\t    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n\t  }\n\t\n\t  function hash(o) {\n\t    if (o === false || o === null || o === undefined) {\n\t      return 0;\n\t    }\n\t    if (typeof o.valueOf === 'function') {\n\t      o = o.valueOf();\n\t      if (o === false || o === null || o === undefined) {\n\t        return 0;\n\t      }\n\t    }\n\t    if (o === true) {\n\t      return 1;\n\t    }\n\t    var type = typeof o;\n\t    if (type === 'number') {\n\t      if (o !== o || o === Infinity) {\n\t        return 0;\n\t      }\n\t      var h = o | 0;\n\t      if (h !== o) {\n\t        h ^= o * 0xFFFFFFFF;\n\t      }\n\t      while (o > 0xFFFFFFFF) {\n\t        o /= 0xFFFFFFFF;\n\t        h ^= o;\n\t      }\n\t      return smi(h);\n\t    }\n\t    if (type === 'string') {\n\t      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n\t    }\n\t    if (typeof o.hashCode === 'function') {\n\t      return o.hashCode();\n\t    }\n\t    if (type === 'object') {\n\t      return hashJSObj(o);\n\t    }\n\t    if (typeof o.toString === 'function') {\n\t      return hashString(o.toString());\n\t    }\n\t    throw new Error('Value type ' + type + ' cannot be hashed.');\n\t  }\n\t\n\t  function cachedHashString(string) {\n\t    var hash = stringHashCache[string];\n\t    if (hash === undefined) {\n\t      hash = hashString(string);\n\t      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n\t        STRING_HASH_CACHE_SIZE = 0;\n\t        stringHashCache = {};\n\t      }\n\t      STRING_HASH_CACHE_SIZE++;\n\t      stringHashCache[string] = hash;\n\t    }\n\t    return hash;\n\t  }\n\t\n\t  // http://jsperf.com/hashing-strings\n\t  function hashString(string) {\n\t    // This is the hash from JVM\n\t    // The hash code for a string is computed as\n\t    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n\t    // where s[i] is the ith character of the string and n is the length of\n\t    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n\t    // (exclusive) by dropping high bits.\n\t    var hash = 0;\n\t    for (var ii = 0; ii < string.length; ii++) {\n\t      hash = 31 * hash + string.charCodeAt(ii) | 0;\n\t    }\n\t    return smi(hash);\n\t  }\n\t\n\t  function hashJSObj(obj) {\n\t    var hash;\n\t    if (usingWeakMap) {\n\t      hash = weakMap.get(obj);\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t    }\n\t\n\t    hash = obj[UID_HASH_KEY];\n\t    if (hash !== undefined) {\n\t      return hash;\n\t    }\n\t\n\t    if (!canDefineProperty) {\n\t      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t\n\t      hash = getIENodeHash(obj);\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t    }\n\t\n\t    hash = ++objHashUID;\n\t    if (objHashUID & 0x40000000) {\n\t      objHashUID = 0;\n\t    }\n\t\n\t    if (usingWeakMap) {\n\t      weakMap.set(obj, hash);\n\t    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n\t      throw new Error('Non-extensible objects are not allowed as keys.');\n\t    } else if (canDefineProperty) {\n\t      Object.defineProperty(obj, UID_HASH_KEY, {\n\t        'enumerable': false,\n\t        'configurable': false,\n\t        'writable': false,\n\t        'value': hash\n\t      });\n\t    } else if (obj.propertyIsEnumerable !== undefined &&\n\t               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n\t      // Since we can't define a non-enumerable property on the object\n\t      // we'll hijack one of the less-used non-enumerable properties to\n\t      // save our hash on it. Since this is a function it will not show up in\n\t      // `JSON.stringify` which is what we want.\n\t      obj.propertyIsEnumerable = function() {\n\t        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n\t      };\n\t      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n\t    } else if (obj.nodeType !== undefined) {\n\t      // At this point we couldn't get the IE `uniqueID` to use as a hash\n\t      // and we couldn't use a non-enumerable property to exploit the\n\t      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n\t      // itself.\n\t      obj[UID_HASH_KEY] = hash;\n\t    } else {\n\t      throw new Error('Unable to set a non-enumerable property on object.');\n\t    }\n\t\n\t    return hash;\n\t  }\n\t\n\t  // Get references to ES5 object methods.\n\t  var isExtensible = Object.isExtensible;\n\t\n\t  // True if Object.defineProperty works as expected. IE8 fails this test.\n\t  var canDefineProperty = (function() {\n\t    try {\n\t      Object.defineProperty({}, '@', {});\n\t      return true;\n\t    } catch (e) {\n\t      return false;\n\t    }\n\t  }());\n\t\n\t  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n\t  // and avoid memory leaks from the IE cloneNode bug.\n\t  function getIENodeHash(node) {\n\t    if (node && node.nodeType > 0) {\n\t      switch (node.nodeType) {\n\t        case 1: // Element\n\t          return node.uniqueID;\n\t        case 9: // Document\n\t          return node.documentElement && node.documentElement.uniqueID;\n\t      }\n\t    }\n\t  }\n\t\n\t  // If possible, use a WeakMap.\n\t  var usingWeakMap = typeof WeakMap === 'function';\n\t  var weakMap;\n\t  if (usingWeakMap) {\n\t    weakMap = new WeakMap();\n\t  }\n\t\n\t  var objHashUID = 0;\n\t\n\t  var UID_HASH_KEY = '__immutablehash__';\n\t  if (typeof Symbol === 'function') {\n\t    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n\t  }\n\t\n\t  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n\t  var STRING_HASH_CACHE_MAX_SIZE = 255;\n\t  var STRING_HASH_CACHE_SIZE = 0;\n\t  var stringHashCache = {};\n\t\n\t  function assertNotInfinite(size) {\n\t    invariant(\n\t      size !== Infinity,\n\t      'Cannot perform this action with an infinite size.'\n\t    );\n\t  }\n\t\n\t  createClass(Map, KeyedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Map(value) {\n\t      return value === null || value === undefined ? emptyMap() :\n\t        isMap(value) && !isOrdered(value) ? value :\n\t        emptyMap().withMutations(function(map ) {\n\t          var iter = KeyedIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v, k)  {return map.set(k, v)});\n\t        });\n\t    }\n\t\n\t    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n\t      return emptyMap().withMutations(function(map ) {\n\t        for (var i = 0; i < keyValues.length; i += 2) {\n\t          if (i + 1 >= keyValues.length) {\n\t            throw new Error('Missing value for key: ' + keyValues[i]);\n\t          }\n\t          map.set(keyValues[i], keyValues[i + 1]);\n\t        }\n\t      });\n\t    };\n\t\n\t    Map.prototype.toString = function() {\n\t      return this.__toString('Map {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Map.prototype.get = function(k, notSetValue) {\n\t      return this._root ?\n\t        this._root.get(0, undefined, k, notSetValue) :\n\t        notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Map.prototype.set = function(k, v) {\n\t      return updateMap(this, k, v);\n\t    };\n\t\n\t    Map.prototype.setIn = function(keyPath, v) {\n\t      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n\t    };\n\t\n\t    Map.prototype.remove = function(k) {\n\t      return updateMap(this, k, NOT_SET);\n\t    };\n\t\n\t    Map.prototype.deleteIn = function(keyPath) {\n\t      return this.updateIn(keyPath, function()  {return NOT_SET});\n\t    };\n\t\n\t    Map.prototype.update = function(k, notSetValue, updater) {\n\t      return arguments.length === 1 ?\n\t        k(this) :\n\t        this.updateIn([k], notSetValue, updater);\n\t    };\n\t\n\t    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n\t      if (!updater) {\n\t        updater = notSetValue;\n\t        notSetValue = undefined;\n\t      }\n\t      var updatedValue = updateInDeepMap(\n\t        this,\n\t        forceIterator(keyPath),\n\t        notSetValue,\n\t        updater\n\t      );\n\t      return updatedValue === NOT_SET ? undefined : updatedValue;\n\t    };\n\t\n\t    Map.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._root = null;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyMap();\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    Map.prototype.merge = function(/*...iters*/) {\n\t      return mergeIntoMapWith(this, undefined, arguments);\n\t    };\n\t\n\t    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoMapWith(this, merger, iters);\n\t    };\n\t\n\t    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.updateIn(\n\t        keyPath,\n\t        emptyMap(),\n\t        function(m ) {return typeof m.merge === 'function' ?\n\t          m.merge.apply(m, iters) :\n\t          iters[iters.length - 1]}\n\t      );\n\t    };\n\t\n\t    Map.prototype.mergeDeep = function(/*...iters*/) {\n\t      return mergeIntoMapWith(this, deepMerger, arguments);\n\t    };\n\t\n\t    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n\t    };\n\t\n\t    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.updateIn(\n\t        keyPath,\n\t        emptyMap(),\n\t        function(m ) {return typeof m.mergeDeep === 'function' ?\n\t          m.mergeDeep.apply(m, iters) :\n\t          iters[iters.length - 1]}\n\t      );\n\t    };\n\t\n\t    Map.prototype.sort = function(comparator) {\n\t      // Late binding\n\t      return OrderedMap(sortFactory(this, comparator));\n\t    };\n\t\n\t    Map.prototype.sortBy = function(mapper, comparator) {\n\t      // Late binding\n\t      return OrderedMap(sortFactory(this, comparator, mapper));\n\t    };\n\t\n\t    // @pragma Mutability\n\t\n\t    Map.prototype.withMutations = function(fn) {\n\t      var mutable = this.asMutable();\n\t      fn(mutable);\n\t      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n\t    };\n\t\n\t    Map.prototype.asMutable = function() {\n\t      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n\t    };\n\t\n\t    Map.prototype.asImmutable = function() {\n\t      return this.__ensureOwner();\n\t    };\n\t\n\t    Map.prototype.wasAltered = function() {\n\t      return this.__altered;\n\t    };\n\t\n\t    Map.prototype.__iterator = function(type, reverse) {\n\t      return new MapIterator(this, type, reverse);\n\t    };\n\t\n\t    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      this._root && this._root.iterate(function(entry ) {\n\t        iterations++;\n\t        return fn(entry[1], entry[0], this$0);\n\t      }, reverse);\n\t      return iterations;\n\t    };\n\t\n\t    Map.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this.__altered = false;\n\t        return this;\n\t      }\n\t      return makeMap(this.size, this._root, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isMap(maybeMap) {\n\t    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n\t  }\n\t\n\t  Map.isMap = isMap;\n\t\n\t  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\t\n\t  var MapPrototype = Map.prototype;\n\t  MapPrototype[IS_MAP_SENTINEL] = true;\n\t  MapPrototype[DELETE] = MapPrototype.remove;\n\t  MapPrototype.removeIn = MapPrototype.deleteIn;\n\t\n\t\n\t  // #pragma Trie Nodes\n\t\n\t\n\t\n\t    function ArrayMapNode(ownerID, entries) {\n\t      this.ownerID = ownerID;\n\t      this.entries = entries;\n\t    }\n\t\n\t    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      var entries = this.entries;\n\t      for (var ii = 0, len = entries.length; ii < len; ii++) {\n\t        if (is(key, entries[ii][0])) {\n\t          return entries[ii][1];\n\t        }\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      var removed = value === NOT_SET;\n\t\n\t      var entries = this.entries;\n\t      var idx = 0;\n\t      for (var len = entries.length; idx < len; idx++) {\n\t        if (is(key, entries[idx][0])) {\n\t          break;\n\t        }\n\t      }\n\t      var exists = idx < len;\n\t\n\t      if (exists ? entries[idx][1] === value : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t      (removed || !exists) && SetRef(didChangeSize);\n\t\n\t      if (removed && entries.length === 1) {\n\t        return; // undefined\n\t      }\n\t\n\t      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n\t        return createNodes(ownerID, entries, key, value);\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newEntries = isEditable ? entries : arrCopy(entries);\n\t\n\t      if (exists) {\n\t        if (removed) {\n\t          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n\t        } else {\n\t          newEntries[idx] = [key, value];\n\t        }\n\t      } else {\n\t        newEntries.push([key, value]);\n\t      }\n\t\n\t      if (isEditable) {\n\t        this.entries = newEntries;\n\t        return this;\n\t      }\n\t\n\t      return new ArrayMapNode(ownerID, newEntries);\n\t    };\n\t\n\t\n\t\n\t\n\t    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n\t      this.ownerID = ownerID;\n\t      this.bitmap = bitmap;\n\t      this.nodes = nodes;\n\t    }\n\t\n\t    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n\t      var bitmap = this.bitmap;\n\t      return (bitmap & bit) === 0 ? notSetValue :\n\t        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n\t    };\n\t\n\t    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var bit = 1 << keyHashFrag;\n\t      var bitmap = this.bitmap;\n\t      var exists = (bitmap & bit) !== 0;\n\t\n\t      if (!exists && value === NOT_SET) {\n\t        return this;\n\t      }\n\t\n\t      var idx = popCount(bitmap & (bit - 1));\n\t      var nodes = this.nodes;\n\t      var node = exists ? nodes[idx] : undefined;\n\t      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\t\n\t      if (newNode === node) {\n\t        return this;\n\t      }\n\t\n\t      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n\t        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n\t      }\n\t\n\t      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n\t        return nodes[idx ^ 1];\n\t      }\n\t\n\t      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n\t        return newNode;\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n\t      var newNodes = exists ? newNode ?\n\t        setIn(nodes, idx, newNode, isEditable) :\n\t        spliceOut(nodes, idx, isEditable) :\n\t        spliceIn(nodes, idx, newNode, isEditable);\n\t\n\t      if (isEditable) {\n\t        this.bitmap = newBitmap;\n\t        this.nodes = newNodes;\n\t        return this;\n\t      }\n\t\n\t      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n\t    };\n\t\n\t\n\t\n\t\n\t    function HashArrayMapNode(ownerID, count, nodes) {\n\t      this.ownerID = ownerID;\n\t      this.count = count;\n\t      this.nodes = nodes;\n\t    }\n\t\n\t    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var node = this.nodes[idx];\n\t      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n\t    };\n\t\n\t    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var removed = value === NOT_SET;\n\t      var nodes = this.nodes;\n\t      var node = nodes[idx];\n\t\n\t      if (removed && !node) {\n\t        return this;\n\t      }\n\t\n\t      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\t      if (newNode === node) {\n\t        return this;\n\t      }\n\t\n\t      var newCount = this.count;\n\t      if (!node) {\n\t        newCount++;\n\t      } else if (!newNode) {\n\t        newCount--;\n\t        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n\t          return packNodes(ownerID, nodes, newCount, idx);\n\t        }\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\t\n\t      if (isEditable) {\n\t        this.count = newCount;\n\t        this.nodes = newNodes;\n\t        return this;\n\t      }\n\t\n\t      return new HashArrayMapNode(ownerID, newCount, newNodes);\n\t    };\n\t\n\t\n\t\n\t\n\t    function HashCollisionNode(ownerID, keyHash, entries) {\n\t      this.ownerID = ownerID;\n\t      this.keyHash = keyHash;\n\t      this.entries = entries;\n\t    }\n\t\n\t    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      var entries = this.entries;\n\t      for (var ii = 0, len = entries.length; ii < len; ii++) {\n\t        if (is(key, entries[ii][0])) {\n\t          return entries[ii][1];\n\t        }\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t\n\t      var removed = value === NOT_SET;\n\t\n\t      if (keyHash !== this.keyHash) {\n\t        if (removed) {\n\t          return this;\n\t        }\n\t        SetRef(didAlter);\n\t        SetRef(didChangeSize);\n\t        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n\t      }\n\t\n\t      var entries = this.entries;\n\t      var idx = 0;\n\t      for (var len = entries.length; idx < len; idx++) {\n\t        if (is(key, entries[idx][0])) {\n\t          break;\n\t        }\n\t      }\n\t      var exists = idx < len;\n\t\n\t      if (exists ? entries[idx][1] === value : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t      (removed || !exists) && SetRef(didChangeSize);\n\t\n\t      if (removed && len === 2) {\n\t        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newEntries = isEditable ? entries : arrCopy(entries);\n\t\n\t      if (exists) {\n\t        if (removed) {\n\t          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n\t        } else {\n\t          newEntries[idx] = [key, value];\n\t        }\n\t      } else {\n\t        newEntries.push([key, value]);\n\t      }\n\t\n\t      if (isEditable) {\n\t        this.entries = newEntries;\n\t        return this;\n\t      }\n\t\n\t      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n\t    };\n\t\n\t\n\t\n\t\n\t    function ValueNode(ownerID, keyHash, entry) {\n\t      this.ownerID = ownerID;\n\t      this.keyHash = keyHash;\n\t      this.entry = entry;\n\t    }\n\t\n\t    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n\t    };\n\t\n\t    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      var removed = value === NOT_SET;\n\t      var keyMatch = is(key, this.entry[0]);\n\t      if (keyMatch ? value === this.entry[1] : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t\n\t      if (removed) {\n\t        SetRef(didChangeSize);\n\t        return; // undefined\n\t      }\n\t\n\t      if (keyMatch) {\n\t        if (ownerID && ownerID === this.ownerID) {\n\t          this.entry[1] = value;\n\t          return this;\n\t        }\n\t        return new ValueNode(ownerID, this.keyHash, [key, value]);\n\t      }\n\t\n\t      SetRef(didChangeSize);\n\t      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n\t    };\n\t\n\t\n\t\n\t  // #pragma Iterators\n\t\n\t  ArrayMapNode.prototype.iterate =\n\t  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n\t    var entries = this.entries;\n\t    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n\t      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t\n\t  BitmapIndexedNode.prototype.iterate =\n\t  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n\t    var nodes = this.nodes;\n\t    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n\t      var node = nodes[reverse ? maxIndex - ii : ii];\n\t      if (node && node.iterate(fn, reverse) === false) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t\n\t  ValueNode.prototype.iterate = function (fn, reverse) {\n\t    return fn(this.entry);\n\t  }\n\t\n\t  createClass(MapIterator, Iterator);\n\t\n\t    function MapIterator(map, type, reverse) {\n\t      this._type = type;\n\t      this._reverse = reverse;\n\t      this._stack = map._root && mapIteratorFrame(map._root);\n\t    }\n\t\n\t    MapIterator.prototype.next = function() {\n\t      var type = this._type;\n\t      var stack = this._stack;\n\t      while (stack) {\n\t        var node = stack.node;\n\t        var index = stack.index++;\n\t        var maxIndex;\n\t        if (node.entry) {\n\t          if (index === 0) {\n\t            return mapIteratorValue(type, node.entry);\n\t          }\n\t        } else if (node.entries) {\n\t          maxIndex = node.entries.length - 1;\n\t          if (index <= maxIndex) {\n\t            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n\t          }\n\t        } else {\n\t          maxIndex = node.nodes.length - 1;\n\t          if (index <= maxIndex) {\n\t            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n\t            if (subNode) {\n\t              if (subNode.entry) {\n\t                return mapIteratorValue(type, subNode.entry);\n\t              }\n\t              stack = this._stack = mapIteratorFrame(subNode, stack);\n\t            }\n\t            continue;\n\t          }\n\t        }\n\t        stack = this._stack = this._stack.__prev;\n\t      }\n\t      return iteratorDone();\n\t    };\n\t\n\t\n\t  function mapIteratorValue(type, entry) {\n\t    return iteratorValue(type, entry[0], entry[1]);\n\t  }\n\t\n\t  function mapIteratorFrame(node, prev) {\n\t    return {\n\t      node: node,\n\t      index: 0,\n\t      __prev: prev\n\t    };\n\t  }\n\t\n\t  function makeMap(size, root, ownerID, hash) {\n\t    var map = Object.create(MapPrototype);\n\t    map.size = size;\n\t    map._root = root;\n\t    map.__ownerID = ownerID;\n\t    map.__hash = hash;\n\t    map.__altered = false;\n\t    return map;\n\t  }\n\t\n\t  var EMPTY_MAP;\n\t  function emptyMap() {\n\t    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n\t  }\n\t\n\t  function updateMap(map, k, v) {\n\t    var newRoot;\n\t    var newSize;\n\t    if (!map._root) {\n\t      if (v === NOT_SET) {\n\t        return map;\n\t      }\n\t      newSize = 1;\n\t      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n\t    } else {\n\t      var didChangeSize = MakeRef(CHANGE_LENGTH);\n\t      var didAlter = MakeRef(DID_ALTER);\n\t      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n\t      if (!didAlter.value) {\n\t        return map;\n\t      }\n\t      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n\t    }\n\t    if (map.__ownerID) {\n\t      map.size = newSize;\n\t      map._root = newRoot;\n\t      map.__hash = undefined;\n\t      map.__altered = true;\n\t      return map;\n\t    }\n\t    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n\t  }\n\t\n\t  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t    if (!node) {\n\t      if (value === NOT_SET) {\n\t        return node;\n\t      }\n\t      SetRef(didAlter);\n\t      SetRef(didChangeSize);\n\t      return new ValueNode(ownerID, keyHash, [key, value]);\n\t    }\n\t    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n\t  }\n\t\n\t  function isLeafNode(node) {\n\t    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n\t  }\n\t\n\t  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n\t    if (node.keyHash === keyHash) {\n\t      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n\t    }\n\t\n\t    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n\t    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t\n\t    var newNode;\n\t    var nodes = idx1 === idx2 ?\n\t      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n\t      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\t\n\t    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n\t  }\n\t\n\t  function createNodes(ownerID, entries, key, value) {\n\t    if (!ownerID) {\n\t      ownerID = new OwnerID();\n\t    }\n\t    var node = new ValueNode(ownerID, hash(key), [key, value]);\n\t    for (var ii = 0; ii < entries.length; ii++) {\n\t      var entry = entries[ii];\n\t      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n\t    }\n\t    return node;\n\t  }\n\t\n\t  function packNodes(ownerID, nodes, count, excluding) {\n\t    var bitmap = 0;\n\t    var packedII = 0;\n\t    var packedNodes = new Array(count);\n\t    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n\t      var node = nodes[ii];\n\t      if (node !== undefined && ii !== excluding) {\n\t        bitmap |= bit;\n\t        packedNodes[packedII++] = node;\n\t      }\n\t    }\n\t    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n\t  }\n\t\n\t  function expandNodes(ownerID, nodes, bitmap, including, node) {\n\t    var count = 0;\n\t    var expandedNodes = new Array(SIZE);\n\t    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n\t      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n\t    }\n\t    expandedNodes[including] = node;\n\t    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n\t  }\n\t\n\t  function mergeIntoMapWith(map, merger, iterables) {\n\t    var iters = [];\n\t    for (var ii = 0; ii < iterables.length; ii++) {\n\t      var value = iterables[ii];\n\t      var iter = KeyedIterable(value);\n\t      if (!isIterable(value)) {\n\t        iter = iter.map(function(v ) {return fromJS(v)});\n\t      }\n\t      iters.push(iter);\n\t    }\n\t    return mergeIntoCollectionWith(map, merger, iters);\n\t  }\n\t\n\t  function deepMerger(existing, value, key) {\n\t    return existing && existing.mergeDeep && isIterable(value) ?\n\t      existing.mergeDeep(value) :\n\t      is(existing, value) ? existing : value;\n\t  }\n\t\n\t  function deepMergerWith(merger) {\n\t    return function(existing, value, key)  {\n\t      if (existing && existing.mergeDeepWith && isIterable(value)) {\n\t        return existing.mergeDeepWith(merger, value);\n\t      }\n\t      var nextValue = merger(existing, value, key);\n\t      return is(existing, nextValue) ? existing : nextValue;\n\t    };\n\t  }\n\t\n\t  function mergeIntoCollectionWith(collection, merger, iters) {\n\t    iters = iters.filter(function(x ) {return x.size !== 0});\n\t    if (iters.length === 0) {\n\t      return collection;\n\t    }\n\t    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n\t      return collection.constructor(iters[0]);\n\t    }\n\t    return collection.withMutations(function(collection ) {\n\t      var mergeIntoMap = merger ?\n\t        function(value, key)  {\n\t          collection.update(key, NOT_SET, function(existing )\n\t            {return existing === NOT_SET ? value : merger(existing, value, key)}\n\t          );\n\t        } :\n\t        function(value, key)  {\n\t          collection.set(key, value);\n\t        }\n\t      for (var ii = 0; ii < iters.length; ii++) {\n\t        iters[ii].forEach(mergeIntoMap);\n\t      }\n\t    });\n\t  }\n\t\n\t  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n\t    var isNotSet = existing === NOT_SET;\n\t    var step = keyPathIter.next();\n\t    if (step.done) {\n\t      var existingValue = isNotSet ? notSetValue : existing;\n\t      var newValue = updater(existingValue);\n\t      return newValue === existingValue ? existing : newValue;\n\t    }\n\t    invariant(\n\t      isNotSet || (existing && existing.set),\n\t      'invalid keyPath'\n\t    );\n\t    var key = step.value;\n\t    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n\t    var nextUpdated = updateInDeepMap(\n\t      nextExisting,\n\t      keyPathIter,\n\t      notSetValue,\n\t      updater\n\t    );\n\t    return nextUpdated === nextExisting ? existing :\n\t      nextUpdated === NOT_SET ? existing.remove(key) :\n\t      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n\t  }\n\t\n\t  function popCount(x) {\n\t    x = x - ((x >> 1) & 0x55555555);\n\t    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n\t    x = (x + (x >> 4)) & 0x0f0f0f0f;\n\t    x = x + (x >> 8);\n\t    x = x + (x >> 16);\n\t    return x & 0x7f;\n\t  }\n\t\n\t  function setIn(array, idx, val, canEdit) {\n\t    var newArray = canEdit ? array : arrCopy(array);\n\t    newArray[idx] = val;\n\t    return newArray;\n\t  }\n\t\n\t  function spliceIn(array, idx, val, canEdit) {\n\t    var newLen = array.length + 1;\n\t    if (canEdit && idx + 1 === newLen) {\n\t      array[idx] = val;\n\t      return array;\n\t    }\n\t    var newArray = new Array(newLen);\n\t    var after = 0;\n\t    for (var ii = 0; ii < newLen; ii++) {\n\t      if (ii === idx) {\n\t        newArray[ii] = val;\n\t        after = -1;\n\t      } else {\n\t        newArray[ii] = array[ii + after];\n\t      }\n\t    }\n\t    return newArray;\n\t  }\n\t\n\t  function spliceOut(array, idx, canEdit) {\n\t    var newLen = array.length - 1;\n\t    if (canEdit && idx === newLen) {\n\t      array.pop();\n\t      return array;\n\t    }\n\t    var newArray = new Array(newLen);\n\t    var after = 0;\n\t    for (var ii = 0; ii < newLen; ii++) {\n\t      if (ii === idx) {\n\t        after = 1;\n\t      }\n\t      newArray[ii] = array[ii + after];\n\t    }\n\t    return newArray;\n\t  }\n\t\n\t  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n\t  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n\t  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\t\n\t  createClass(List, IndexedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function List(value) {\n\t      var empty = emptyList();\n\t      if (value === null || value === undefined) {\n\t        return empty;\n\t      }\n\t      if (isList(value)) {\n\t        return value;\n\t      }\n\t      var iter = IndexedIterable(value);\n\t      var size = iter.size;\n\t      if (size === 0) {\n\t        return empty;\n\t      }\n\t      assertNotInfinite(size);\n\t      if (size > 0 && size < SIZE) {\n\t        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n\t      }\n\t      return empty.withMutations(function(list ) {\n\t        list.setSize(size);\n\t        iter.forEach(function(v, i)  {return list.set(i, v)});\n\t      });\n\t    }\n\t\n\t    List.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    List.prototype.toString = function() {\n\t      return this.__toString('List [', ']');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    List.prototype.get = function(index, notSetValue) {\n\t      index = wrapIndex(this, index);\n\t      if (index >= 0 && index < this.size) {\n\t        index += this._origin;\n\t        var node = listNodeFor(this, index);\n\t        return node && node.array[index & MASK];\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    List.prototype.set = function(index, value) {\n\t      return updateList(this, index, value);\n\t    };\n\t\n\t    List.prototype.remove = function(index) {\n\t      return !this.has(index) ? this :\n\t        index === 0 ? this.shift() :\n\t        index === this.size - 1 ? this.pop() :\n\t        this.splice(index, 1);\n\t    };\n\t\n\t    List.prototype.insert = function(index, value) {\n\t      return this.splice(index, 0, value);\n\t    };\n\t\n\t    List.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = this._origin = this._capacity = 0;\n\t        this._level = SHIFT;\n\t        this._root = this._tail = null;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyList();\n\t    };\n\t\n\t    List.prototype.push = function(/*...values*/) {\n\t      var values = arguments;\n\t      var oldSize = this.size;\n\t      return this.withMutations(function(list ) {\n\t        setListBounds(list, 0, oldSize + values.length);\n\t        for (var ii = 0; ii < values.length; ii++) {\n\t          list.set(oldSize + ii, values[ii]);\n\t        }\n\t      });\n\t    };\n\t\n\t    List.prototype.pop = function() {\n\t      return setListBounds(this, 0, -1);\n\t    };\n\t\n\t    List.prototype.unshift = function(/*...values*/) {\n\t      var values = arguments;\n\t      return this.withMutations(function(list ) {\n\t        setListBounds(list, -values.length);\n\t        for (var ii = 0; ii < values.length; ii++) {\n\t          list.set(ii, values[ii]);\n\t        }\n\t      });\n\t    };\n\t\n\t    List.prototype.shift = function() {\n\t      return setListBounds(this, 1);\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    List.prototype.merge = function(/*...iters*/) {\n\t      return mergeIntoListWith(this, undefined, arguments);\n\t    };\n\t\n\t    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoListWith(this, merger, iters);\n\t    };\n\t\n\t    List.prototype.mergeDeep = function(/*...iters*/) {\n\t      return mergeIntoListWith(this, deepMerger, arguments);\n\t    };\n\t\n\t    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n\t    };\n\t\n\t    List.prototype.setSize = function(size) {\n\t      return setListBounds(this, 0, size);\n\t    };\n\t\n\t    // @pragma Iteration\n\t\n\t    List.prototype.slice = function(begin, end) {\n\t      var size = this.size;\n\t      if (wholeSlice(begin, end, size)) {\n\t        return this;\n\t      }\n\t      return setListBounds(\n\t        this,\n\t        resolveBegin(begin, size),\n\t        resolveEnd(end, size)\n\t      );\n\t    };\n\t\n\t    List.prototype.__iterator = function(type, reverse) {\n\t      var index = 0;\n\t      var values = iterateList(this, reverse);\n\t      return new Iterator(function()  {\n\t        var value = values();\n\t        return value === DONE ?\n\t          iteratorDone() :\n\t          iteratorValue(type, index++, value);\n\t      });\n\t    };\n\t\n\t    List.prototype.__iterate = function(fn, reverse) {\n\t      var index = 0;\n\t      var values = iterateList(this, reverse);\n\t      var value;\n\t      while ((value = values()) !== DONE) {\n\t        if (fn(value, index++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return index;\n\t    };\n\t\n\t    List.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        return this;\n\t      }\n\t      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isList(maybeList) {\n\t    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n\t  }\n\t\n\t  List.isList = isList;\n\t\n\t  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\t\n\t  var ListPrototype = List.prototype;\n\t  ListPrototype[IS_LIST_SENTINEL] = true;\n\t  ListPrototype[DELETE] = ListPrototype.remove;\n\t  ListPrototype.setIn = MapPrototype.setIn;\n\t  ListPrototype.deleteIn =\n\t  ListPrototype.removeIn = MapPrototype.removeIn;\n\t  ListPrototype.update = MapPrototype.update;\n\t  ListPrototype.updateIn = MapPrototype.updateIn;\n\t  ListPrototype.mergeIn = MapPrototype.mergeIn;\n\t  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n\t  ListPrototype.withMutations = MapPrototype.withMutations;\n\t  ListPrototype.asMutable = MapPrototype.asMutable;\n\t  ListPrototype.asImmutable = MapPrototype.asImmutable;\n\t  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\t\n\t\n\t\n\t    function VNode(array, ownerID) {\n\t      this.array = array;\n\t      this.ownerID = ownerID;\n\t    }\n\t\n\t    // TODO: seems like these methods are very similar\n\t\n\t    VNode.prototype.removeBefore = function(ownerID, level, index) {\n\t      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n\t        return this;\n\t      }\n\t      var originIndex = (index >>> level) & MASK;\n\t      if (originIndex >= this.array.length) {\n\t        return new VNode([], ownerID);\n\t      }\n\t      var removingFirst = originIndex === 0;\n\t      var newChild;\n\t      if (level > 0) {\n\t        var oldChild = this.array[originIndex];\n\t        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n\t        if (newChild === oldChild && removingFirst) {\n\t          return this;\n\t        }\n\t      }\n\t      if (removingFirst && !newChild) {\n\t        return this;\n\t      }\n\t      var editable = editableVNode(this, ownerID);\n\t      if (!removingFirst) {\n\t        for (var ii = 0; ii < originIndex; ii++) {\n\t          editable.array[ii] = undefined;\n\t        }\n\t      }\n\t      if (newChild) {\n\t        editable.array[originIndex] = newChild;\n\t      }\n\t      return editable;\n\t    };\n\t\n\t    VNode.prototype.removeAfter = function(ownerID, level, index) {\n\t      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n\t        return this;\n\t      }\n\t      var sizeIndex = ((index - 1) >>> level) & MASK;\n\t      if (sizeIndex >= this.array.length) {\n\t        return this;\n\t      }\n\t\n\t      var newChild;\n\t      if (level > 0) {\n\t        var oldChild = this.array[sizeIndex];\n\t        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n\t        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n\t          return this;\n\t        }\n\t      }\n\t\n\t      var editable = editableVNode(this, ownerID);\n\t      editable.array.splice(sizeIndex + 1);\n\t      if (newChild) {\n\t        editable.array[sizeIndex] = newChild;\n\t      }\n\t      return editable;\n\t    };\n\t\n\t\n\t\n\t  var DONE = {};\n\t\n\t  function iterateList(list, reverse) {\n\t    var left = list._origin;\n\t    var right = list._capacity;\n\t    var tailPos = getTailOffset(right);\n\t    var tail = list._tail;\n\t\n\t    return iterateNodeOrLeaf(list._root, list._level, 0);\n\t\n\t    function iterateNodeOrLeaf(node, level, offset) {\n\t      return level === 0 ?\n\t        iterateLeaf(node, offset) :\n\t        iterateNode(node, level, offset);\n\t    }\n\t\n\t    function iterateLeaf(node, offset) {\n\t      var array = offset === tailPos ? tail && tail.array : node && node.array;\n\t      var from = offset > left ? 0 : left - offset;\n\t      var to = right - offset;\n\t      if (to > SIZE) {\n\t        to = SIZE;\n\t      }\n\t      return function()  {\n\t        if (from === to) {\n\t          return DONE;\n\t        }\n\t        var idx = reverse ? --to : from++;\n\t        return array && array[idx];\n\t      };\n\t    }\n\t\n\t    function iterateNode(node, level, offset) {\n\t      var values;\n\t      var array = node && node.array;\n\t      var from = offset > left ? 0 : (left - offset) >> level;\n\t      var to = ((right - offset) >> level) + 1;\n\t      if (to > SIZE) {\n\t        to = SIZE;\n\t      }\n\t      return function()  {\n\t        do {\n\t          if (values) {\n\t            var value = values();\n\t            if (value !== DONE) {\n\t              return value;\n\t            }\n\t            values = null;\n\t          }\n\t          if (from === to) {\n\t            return DONE;\n\t          }\n\t          var idx = reverse ? --to : from++;\n\t          values = iterateNodeOrLeaf(\n\t            array && array[idx], level - SHIFT, offset + (idx << level)\n\t          );\n\t        } while (true);\n\t      };\n\t    }\n\t  }\n\t\n\t  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n\t    var list = Object.create(ListPrototype);\n\t    list.size = capacity - origin;\n\t    list._origin = origin;\n\t    list._capacity = capacity;\n\t    list._level = level;\n\t    list._root = root;\n\t    list._tail = tail;\n\t    list.__ownerID = ownerID;\n\t    list.__hash = hash;\n\t    list.__altered = false;\n\t    return list;\n\t  }\n\t\n\t  var EMPTY_LIST;\n\t  function emptyList() {\n\t    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n\t  }\n\t\n\t  function updateList(list, index, value) {\n\t    index = wrapIndex(list, index);\n\t\n\t    if (index !== index) {\n\t      return list;\n\t    }\n\t\n\t    if (index >= list.size || index < 0) {\n\t      return list.withMutations(function(list ) {\n\t        index < 0 ?\n\t          setListBounds(list, index).set(0, value) :\n\t          setListBounds(list, 0, index + 1).set(index, value)\n\t      });\n\t    }\n\t\n\t    index += list._origin;\n\t\n\t    var newTail = list._tail;\n\t    var newRoot = list._root;\n\t    var didAlter = MakeRef(DID_ALTER);\n\t    if (index >= getTailOffset(list._capacity)) {\n\t      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n\t    } else {\n\t      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n\t    }\n\t\n\t    if (!didAlter.value) {\n\t      return list;\n\t    }\n\t\n\t    if (list.__ownerID) {\n\t      list._root = newRoot;\n\t      list._tail = newTail;\n\t      list.__hash = undefined;\n\t      list.__altered = true;\n\t      return list;\n\t    }\n\t    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n\t  }\n\t\n\t  function updateVNode(node, ownerID, level, index, value, didAlter) {\n\t    var idx = (index >>> level) & MASK;\n\t    var nodeHas = node && idx < node.array.length;\n\t    if (!nodeHas && value === undefined) {\n\t      return node;\n\t    }\n\t\n\t    var newNode;\n\t\n\t    if (level > 0) {\n\t      var lowerNode = node && node.array[idx];\n\t      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n\t      if (newLowerNode === lowerNode) {\n\t        return node;\n\t      }\n\t      newNode = editableVNode(node, ownerID);\n\t      newNode.array[idx] = newLowerNode;\n\t      return newNode;\n\t    }\n\t\n\t    if (nodeHas && node.array[idx] === value) {\n\t      return node;\n\t    }\n\t\n\t    SetRef(didAlter);\n\t\n\t    newNode = editableVNode(node, ownerID);\n\t    if (value === undefined && idx === newNode.array.length - 1) {\n\t      newNode.array.pop();\n\t    } else {\n\t      newNode.array[idx] = value;\n\t    }\n\t    return newNode;\n\t  }\n\t\n\t  function editableVNode(node, ownerID) {\n\t    if (ownerID && node && ownerID === node.ownerID) {\n\t      return node;\n\t    }\n\t    return new VNode(node ? node.array.slice() : [], ownerID);\n\t  }\n\t\n\t  function listNodeFor(list, rawIndex) {\n\t    if (rawIndex >= getTailOffset(list._capacity)) {\n\t      return list._tail;\n\t    }\n\t    if (rawIndex < 1 << (list._level + SHIFT)) {\n\t      var node = list._root;\n\t      var level = list._level;\n\t      while (node && level > 0) {\n\t        node = node.array[(rawIndex >>> level) & MASK];\n\t        level -= SHIFT;\n\t      }\n\t      return node;\n\t    }\n\t  }\n\t\n\t  function setListBounds(list, begin, end) {\n\t    // Sanitize begin & end using this shorthand for ToInt32(argument)\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n\t    if (begin !== undefined) {\n\t      begin = begin | 0;\n\t    }\n\t    if (end !== undefined) {\n\t      end = end | 0;\n\t    }\n\t    var owner = list.__ownerID || new OwnerID();\n\t    var oldOrigin = list._origin;\n\t    var oldCapacity = list._capacity;\n\t    var newOrigin = oldOrigin + begin;\n\t    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n\t    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n\t      return list;\n\t    }\n\t\n\t    // If it's going to end after it starts, it's empty.\n\t    if (newOrigin >= newCapacity) {\n\t      return list.clear();\n\t    }\n\t\n\t    var newLevel = list._level;\n\t    var newRoot = list._root;\n\t\n\t    // New origin might need creating a higher root.\n\t    var offsetShift = 0;\n\t    while (newOrigin + offsetShift < 0) {\n\t      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n\t      newLevel += SHIFT;\n\t      offsetShift += 1 << newLevel;\n\t    }\n\t    if (offsetShift) {\n\t      newOrigin += offsetShift;\n\t      oldOrigin += offsetShift;\n\t      newCapacity += offsetShift;\n\t      oldCapacity += offsetShift;\n\t    }\n\t\n\t    var oldTailOffset = getTailOffset(oldCapacity);\n\t    var newTailOffset = getTailOffset(newCapacity);\n\t\n\t    // New size might need creating a higher root.\n\t    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n\t      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n\t      newLevel += SHIFT;\n\t    }\n\t\n\t    // Locate or create the new tail.\n\t    var oldTail = list._tail;\n\t    var newTail = newTailOffset < oldTailOffset ?\n\t      listNodeFor(list, newCapacity - 1) :\n\t      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\t\n\t    // Merge Tail into tree.\n\t    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n\t      newRoot = editableVNode(newRoot, owner);\n\t      var node = newRoot;\n\t      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n\t        var idx = (oldTailOffset >>> level) & MASK;\n\t        node = node.array[idx] = editableVNode(node.array[idx], owner);\n\t      }\n\t      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n\t    }\n\t\n\t    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n\t    if (newCapacity < oldCapacity) {\n\t      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n\t    }\n\t\n\t    // If the new origin is within the tail, then we do not need a root.\n\t    if (newOrigin >= newTailOffset) {\n\t      newOrigin -= newTailOffset;\n\t      newCapacity -= newTailOffset;\n\t      newLevel = SHIFT;\n\t      newRoot = null;\n\t      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\t\n\t    // Otherwise, if the root has been trimmed, garbage collect.\n\t    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n\t      offsetShift = 0;\n\t\n\t      // Identify the new top root node of the subtree of the old root.\n\t      while (newRoot) {\n\t        var beginIndex = (newOrigin >>> newLevel) & MASK;\n\t        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n\t          break;\n\t        }\n\t        if (beginIndex) {\n\t          offsetShift += (1 << newLevel) * beginIndex;\n\t        }\n\t        newLevel -= SHIFT;\n\t        newRoot = newRoot.array[beginIndex];\n\t      }\n\t\n\t      // Trim the new sides of the new root.\n\t      if (newRoot && newOrigin > oldOrigin) {\n\t        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n\t      }\n\t      if (newRoot && newTailOffset < oldTailOffset) {\n\t        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n\t      }\n\t      if (offsetShift) {\n\t        newOrigin -= offsetShift;\n\t        newCapacity -= offsetShift;\n\t      }\n\t    }\n\t\n\t    if (list.__ownerID) {\n\t      list.size = newCapacity - newOrigin;\n\t      list._origin = newOrigin;\n\t      list._capacity = newCapacity;\n\t      list._level = newLevel;\n\t      list._root = newRoot;\n\t      list._tail = newTail;\n\t      list.__hash = undefined;\n\t      list.__altered = true;\n\t      return list;\n\t    }\n\t    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n\t  }\n\t\n\t  function mergeIntoListWith(list, merger, iterables) {\n\t    var iters = [];\n\t    var maxSize = 0;\n\t    for (var ii = 0; ii < iterables.length; ii++) {\n\t      var value = iterables[ii];\n\t      var iter = IndexedIterable(value);\n\t      if (iter.size > maxSize) {\n\t        maxSize = iter.size;\n\t      }\n\t      if (!isIterable(value)) {\n\t        iter = iter.map(function(v ) {return fromJS(v)});\n\t      }\n\t      iters.push(iter);\n\t    }\n\t    if (maxSize > list.size) {\n\t      list = list.setSize(maxSize);\n\t    }\n\t    return mergeIntoCollectionWith(list, merger, iters);\n\t  }\n\t\n\t  function getTailOffset(size) {\n\t    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n\t  }\n\t\n\t  createClass(OrderedMap, Map);\n\t\n\t    // @pragma Construction\n\t\n\t    function OrderedMap(value) {\n\t      return value === null || value === undefined ? emptyOrderedMap() :\n\t        isOrderedMap(value) ? value :\n\t        emptyOrderedMap().withMutations(function(map ) {\n\t          var iter = KeyedIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v, k)  {return map.set(k, v)});\n\t        });\n\t    }\n\t\n\t    OrderedMap.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    OrderedMap.prototype.toString = function() {\n\t      return this.__toString('OrderedMap {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    OrderedMap.prototype.get = function(k, notSetValue) {\n\t      var index = this._map.get(k);\n\t      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    OrderedMap.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._map.clear();\n\t        this._list.clear();\n\t        return this;\n\t      }\n\t      return emptyOrderedMap();\n\t    };\n\t\n\t    OrderedMap.prototype.set = function(k, v) {\n\t      return updateOrderedMap(this, k, v);\n\t    };\n\t\n\t    OrderedMap.prototype.remove = function(k) {\n\t      return updateOrderedMap(this, k, NOT_SET);\n\t    };\n\t\n\t    OrderedMap.prototype.wasAltered = function() {\n\t      return this._map.wasAltered() || this._list.wasAltered();\n\t    };\n\t\n\t    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._list.__iterate(\n\t        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n\t        reverse\n\t      );\n\t    };\n\t\n\t    OrderedMap.prototype.__iterator = function(type, reverse) {\n\t      return this._list.fromEntrySeq().__iterator(type, reverse);\n\t    };\n\t\n\t    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map.__ensureOwner(ownerID);\n\t      var newList = this._list.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        this._list = newList;\n\t        return this;\n\t      }\n\t      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isOrderedMap(maybeOrderedMap) {\n\t    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n\t  }\n\t\n\t  OrderedMap.isOrderedMap = isOrderedMap;\n\t\n\t  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n\t  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\t\n\t\n\t\n\t  function makeOrderedMap(map, list, ownerID, hash) {\n\t    var omap = Object.create(OrderedMap.prototype);\n\t    omap.size = map ? map.size : 0;\n\t    omap._map = map;\n\t    omap._list = list;\n\t    omap.__ownerID = ownerID;\n\t    omap.__hash = hash;\n\t    return omap;\n\t  }\n\t\n\t  var EMPTY_ORDERED_MAP;\n\t  function emptyOrderedMap() {\n\t    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n\t  }\n\t\n\t  function updateOrderedMap(omap, k, v) {\n\t    var map = omap._map;\n\t    var list = omap._list;\n\t    var i = map.get(k);\n\t    var has = i !== undefined;\n\t    var newMap;\n\t    var newList;\n\t    if (v === NOT_SET) { // removed\n\t      if (!has) {\n\t        return omap;\n\t      }\n\t      if (list.size >= SIZE && list.size >= map.size * 2) {\n\t        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n\t        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n\t        if (omap.__ownerID) {\n\t          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n\t        }\n\t      } else {\n\t        newMap = map.remove(k);\n\t        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n\t      }\n\t    } else {\n\t      if (has) {\n\t        if (v === list.get(i)[1]) {\n\t          return omap;\n\t        }\n\t        newMap = map;\n\t        newList = list.set(i, [k, v]);\n\t      } else {\n\t        newMap = map.set(k, list.size);\n\t        newList = list.set(list.size, [k, v]);\n\t      }\n\t    }\n\t    if (omap.__ownerID) {\n\t      omap.size = newMap.size;\n\t      omap._map = newMap;\n\t      omap._list = newList;\n\t      omap.__hash = undefined;\n\t      return omap;\n\t    }\n\t    return makeOrderedMap(newMap, newList);\n\t  }\n\t\n\t  createClass(ToKeyedSequence, KeyedSeq);\n\t    function ToKeyedSequence(indexed, useKeys) {\n\t      this._iter = indexed;\n\t      this._useKeys = useKeys;\n\t      this.size = indexed.size;\n\t    }\n\t\n\t    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n\t      return this._iter.get(key, notSetValue);\n\t    };\n\t\n\t    ToKeyedSequence.prototype.has = function(key) {\n\t      return this._iter.has(key);\n\t    };\n\t\n\t    ToKeyedSequence.prototype.valueSeq = function() {\n\t      return this._iter.valueSeq();\n\t    };\n\t\n\t    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n\t      var reversedSequence = reverseFactory(this, true);\n\t      if (!this._useKeys) {\n\t        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n\t      }\n\t      return reversedSequence;\n\t    };\n\t\n\t    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n\t      var mappedSequence = mapFactory(this, mapper, context);\n\t      if (!this._useKeys) {\n\t        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n\t      }\n\t      return mappedSequence;\n\t    };\n\t\n\t    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var ii;\n\t      return this._iter.__iterate(\n\t        this._useKeys ?\n\t          function(v, k)  {return fn(v, k, this$0)} :\n\t          ((ii = reverse ? resolveSize(this) : 0),\n\t            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n\t        reverse\n\t      );\n\t    };\n\t\n\t    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n\t      if (this._useKeys) {\n\t        return this._iter.__iterator(type, reverse);\n\t      }\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      var ii = reverse ? resolveSize(this) : 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n\t      });\n\t    };\n\t\n\t  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t  createClass(ToIndexedSequence, IndexedSeq);\n\t    function ToIndexedSequence(iter) {\n\t      this._iter = iter;\n\t      this.size = iter.size;\n\t    }\n\t\n\t    ToIndexedSequence.prototype.includes = function(value) {\n\t      return this._iter.includes(value);\n\t    };\n\t\n\t    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n\t    };\n\t\n\t    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, iterations++, step.value, step)\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(ToSetSequence, SetSeq);\n\t    function ToSetSequence(iter) {\n\t      this._iter = iter;\n\t      this.size = iter.size;\n\t    }\n\t\n\t    ToSetSequence.prototype.has = function(key) {\n\t      return this._iter.includes(key);\n\t    };\n\t\n\t    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n\t    };\n\t\n\t    ToSetSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, step.value, step.value, step);\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(FromEntriesSequence, KeyedSeq);\n\t    function FromEntriesSequence(entries) {\n\t      this._iter = entries;\n\t      this.size = entries.size;\n\t    }\n\t\n\t    FromEntriesSequence.prototype.entrySeq = function() {\n\t      return this._iter.toSeq();\n\t    };\n\t\n\t    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._iter.__iterate(function(entry ) {\n\t        // Check if entry exists first so array access doesn't throw for holes\n\t        // in the parent iteration.\n\t        if (entry) {\n\t          validateEntry(entry);\n\t          var indexedIterable = isIterable(entry);\n\t          return fn(\n\t            indexedIterable ? entry.get(1) : entry[1],\n\t            indexedIterable ? entry.get(0) : entry[0],\n\t            this$0\n\t          );\n\t        }\n\t      }, reverse);\n\t    };\n\t\n\t    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      return new Iterator(function()  {\n\t        while (true) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          var entry = step.value;\n\t          // Check if entry exists first so array access doesn't throw for holes\n\t          // in the parent iteration.\n\t          if (entry) {\n\t            validateEntry(entry);\n\t            var indexedIterable = isIterable(entry);\n\t            return iteratorValue(\n\t              type,\n\t              indexedIterable ? entry.get(0) : entry[0],\n\t              indexedIterable ? entry.get(1) : entry[1],\n\t              step\n\t            );\n\t          }\n\t        }\n\t      });\n\t    };\n\t\n\t\n\t  ToIndexedSequence.prototype.cacheResult =\n\t  ToKeyedSequence.prototype.cacheResult =\n\t  ToSetSequence.prototype.cacheResult =\n\t  FromEntriesSequence.prototype.cacheResult =\n\t    cacheResultThrough;\n\t\n\t\n\t  function flipFactory(iterable) {\n\t    var flipSequence = makeSequence(iterable);\n\t    flipSequence._iter = iterable;\n\t    flipSequence.size = iterable.size;\n\t    flipSequence.flip = function()  {return iterable};\n\t    flipSequence.reverse = function () {\n\t      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n\t      reversedSequence.flip = function()  {return iterable.reverse()};\n\t      return reversedSequence;\n\t    };\n\t    flipSequence.has = function(key ) {return iterable.includes(key)};\n\t    flipSequence.includes = function(key ) {return iterable.has(key)};\n\t    flipSequence.cacheResult = cacheResultThrough;\n\t    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n\t    }\n\t    flipSequence.__iteratorUncached = function(type, reverse) {\n\t      if (type === ITERATE_ENTRIES) {\n\t        var iterator = iterable.__iterator(type, reverse);\n\t        return new Iterator(function()  {\n\t          var step = iterator.next();\n\t          if (!step.done) {\n\t            var k = step.value[0];\n\t            step.value[0] = step.value[1];\n\t            step.value[1] = k;\n\t          }\n\t          return step;\n\t        });\n\t      }\n\t      return iterable.__iterator(\n\t        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n\t        reverse\n\t      );\n\t    }\n\t    return flipSequence;\n\t  }\n\t\n\t\n\t  function mapFactory(iterable, mapper, context) {\n\t    var mappedSequence = makeSequence(iterable);\n\t    mappedSequence.size = iterable.size;\n\t    mappedSequence.has = function(key ) {return iterable.has(key)};\n\t    mappedSequence.get = function(key, notSetValue)  {\n\t      var v = iterable.get(key, NOT_SET);\n\t      return v === NOT_SET ?\n\t        notSetValue :\n\t        mapper.call(context, v, key, iterable);\n\t    };\n\t    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(\n\t        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n\t        reverse\n\t      );\n\t    }\n\t    mappedSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        var key = entry[0];\n\t        return iteratorValue(\n\t          type,\n\t          key,\n\t          mapper.call(context, entry[1], key, iterable),\n\t          step\n\t        );\n\t      });\n\t    }\n\t    return mappedSequence;\n\t  }\n\t\n\t\n\t  function reverseFactory(iterable, useKeys) {\n\t    var reversedSequence = makeSequence(iterable);\n\t    reversedSequence._iter = iterable;\n\t    reversedSequence.size = iterable.size;\n\t    reversedSequence.reverse = function()  {return iterable};\n\t    if (iterable.flip) {\n\t      reversedSequence.flip = function () {\n\t        var flipSequence = flipFactory(iterable);\n\t        flipSequence.reverse = function()  {return iterable.flip()};\n\t        return flipSequence;\n\t      };\n\t    }\n\t    reversedSequence.get = function(key, notSetValue) \n\t      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n\t    reversedSequence.has = function(key )\n\t      {return iterable.has(useKeys ? key : -1 - key)};\n\t    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n\t    reversedSequence.cacheResult = cacheResultThrough;\n\t    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n\t    };\n\t    reversedSequence.__iterator =\n\t      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n\t    return reversedSequence;\n\t  }\n\t\n\t\n\t  function filterFactory(iterable, predicate, context, useKeys) {\n\t    var filterSequence = makeSequence(iterable);\n\t    if (useKeys) {\n\t      filterSequence.has = function(key ) {\n\t        var v = iterable.get(key, NOT_SET);\n\t        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n\t      };\n\t      filterSequence.get = function(key, notSetValue)  {\n\t        var v = iterable.get(key, NOT_SET);\n\t        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n\t          v : notSetValue;\n\t      };\n\t    }\n\t    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c)  {\n\t        if (predicate.call(context, v, k, c)) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0);\n\t        }\n\t      }, reverse);\n\t      return iterations;\n\t    };\n\t    filterSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (true) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          var entry = step.value;\n\t          var key = entry[0];\n\t          var value = entry[1];\n\t          if (predicate.call(context, value, key, iterable)) {\n\t            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n\t          }\n\t        }\n\t      });\n\t    }\n\t    return filterSequence;\n\t  }\n\t\n\t\n\t  function countByFactory(iterable, grouper, context) {\n\t    var groups = Map().asMutable();\n\t    iterable.__iterate(function(v, k)  {\n\t      groups.update(\n\t        grouper.call(context, v, k, iterable),\n\t        0,\n\t        function(a ) {return a + 1}\n\t      );\n\t    });\n\t    return groups.asImmutable();\n\t  }\n\t\n\t\n\t  function groupByFactory(iterable, grouper, context) {\n\t    var isKeyedIter = isKeyed(iterable);\n\t    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n\t    iterable.__iterate(function(v, k)  {\n\t      groups.update(\n\t        grouper.call(context, v, k, iterable),\n\t        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n\t      );\n\t    });\n\t    var coerce = iterableClass(iterable);\n\t    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n\t  }\n\t\n\t\n\t  function sliceFactory(iterable, begin, end, useKeys) {\n\t    var originalSize = iterable.size;\n\t\n\t    // Sanitize begin & end using this shorthand for ToInt32(argument)\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n\t    if (begin !== undefined) {\n\t      begin = begin | 0;\n\t    }\n\t    if (end !== undefined) {\n\t      if (end === Infinity) {\n\t        end = originalSize;\n\t      } else {\n\t        end = end | 0;\n\t      }\n\t    }\n\t\n\t    if (wholeSlice(begin, end, originalSize)) {\n\t      return iterable;\n\t    }\n\t\n\t    var resolvedBegin = resolveBegin(begin, originalSize);\n\t    var resolvedEnd = resolveEnd(end, originalSize);\n\t\n\t    // begin or end will be NaN if they were provided as negative numbers and\n\t    // this iterable's size is unknown. In that case, cache first so there is\n\t    // a known size and these do not resolve to NaN.\n\t    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n\t      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n\t    }\n\t\n\t    // Note: resolvedEnd is undefined when the original sequence's length is\n\t    // unknown and this slice did not supply an end and should contain all\n\t    // elements after resolvedBegin.\n\t    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n\t    var resolvedSize = resolvedEnd - resolvedBegin;\n\t    var sliceSize;\n\t    if (resolvedSize === resolvedSize) {\n\t      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n\t    }\n\t\n\t    var sliceSeq = makeSequence(iterable);\n\t\n\t    // If iterable.size is undefined, the size of the realized sliceSeq is\n\t    // unknown at this point unless the number of items to slice is 0\n\t    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\t\n\t    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n\t      sliceSeq.get = function (index, notSetValue) {\n\t        index = wrapIndex(this, index);\n\t        return index >= 0 && index < sliceSize ?\n\t          iterable.get(index + resolvedBegin, notSetValue) :\n\t          notSetValue;\n\t      }\n\t    }\n\t\n\t    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      if (sliceSize === 0) {\n\t        return 0;\n\t      }\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var skipped = 0;\n\t      var isSkipping = true;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k)  {\n\t        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n\t                 iterations !== sliceSize;\n\t        }\n\t      });\n\t      return iterations;\n\t    };\n\t\n\t    sliceSeq.__iteratorUncached = function(type, reverse) {\n\t      if (sliceSize !== 0 && reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      // Don't bother instantiating parent iterator if taking 0.\n\t      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n\t      var skipped = 0;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (skipped++ < resolvedBegin) {\n\t          iterator.next();\n\t        }\n\t        if (++iterations > sliceSize) {\n\t          return iteratorDone();\n\t        }\n\t        var step = iterator.next();\n\t        if (useKeys || type === ITERATE_VALUES) {\n\t          return step;\n\t        } else if (type === ITERATE_KEYS) {\n\t          return iteratorValue(type, iterations - 1, undefined, step);\n\t        } else {\n\t          return iteratorValue(type, iterations - 1, step.value[1], step);\n\t        }\n\t      });\n\t    }\n\t\n\t    return sliceSeq;\n\t  }\n\t\n\t\n\t  function takeWhileFactory(iterable, predicate, context) {\n\t    var takeSequence = makeSequence(iterable);\n\t    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c) \n\t        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n\t      );\n\t      return iterations;\n\t    };\n\t    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var iterating = true;\n\t      return new Iterator(function()  {\n\t        if (!iterating) {\n\t          return iteratorDone();\n\t        }\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        var k = entry[0];\n\t        var v = entry[1];\n\t        if (!predicate.call(context, v, k, this$0)) {\n\t          iterating = false;\n\t          return iteratorDone();\n\t        }\n\t        return type === ITERATE_ENTRIES ? step :\n\t          iteratorValue(type, k, v, step);\n\t      });\n\t    };\n\t    return takeSequence;\n\t  }\n\t\n\t\n\t  function skipWhileFactory(iterable, predicate, context, useKeys) {\n\t    var skipSequence = makeSequence(iterable);\n\t    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var isSkipping = true;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c)  {\n\t        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0);\n\t        }\n\t      });\n\t      return iterations;\n\t    };\n\t    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var skipping = true;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step, k, v;\n\t        do {\n\t          step = iterator.next();\n\t          if (step.done) {\n\t            if (useKeys || type === ITERATE_VALUES) {\n\t              return step;\n\t            } else if (type === ITERATE_KEYS) {\n\t              return iteratorValue(type, iterations++, undefined, step);\n\t            } else {\n\t              return iteratorValue(type, iterations++, step.value[1], step);\n\t            }\n\t          }\n\t          var entry = step.value;\n\t          k = entry[0];\n\t          v = entry[1];\n\t          skipping && (skipping = predicate.call(context, v, k, this$0));\n\t        } while (skipping);\n\t        return type === ITERATE_ENTRIES ? step :\n\t          iteratorValue(type, k, v, step);\n\t      });\n\t    };\n\t    return skipSequence;\n\t  }\n\t\n\t\n\t  function concatFactory(iterable, values) {\n\t    var isKeyedIterable = isKeyed(iterable);\n\t    var iters = [iterable].concat(values).map(function(v ) {\n\t      if (!isIterable(v)) {\n\t        v = isKeyedIterable ?\n\t          keyedSeqFromValue(v) :\n\t          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n\t      } else if (isKeyedIterable) {\n\t        v = KeyedIterable(v);\n\t      }\n\t      return v;\n\t    }).filter(function(v ) {return v.size !== 0});\n\t\n\t    if (iters.length === 0) {\n\t      return iterable;\n\t    }\n\t\n\t    if (iters.length === 1) {\n\t      var singleton = iters[0];\n\t      if (singleton === iterable ||\n\t          isKeyedIterable && isKeyed(singleton) ||\n\t          isIndexed(iterable) && isIndexed(singleton)) {\n\t        return singleton;\n\t      }\n\t    }\n\t\n\t    var concatSeq = new ArraySeq(iters);\n\t    if (isKeyedIterable) {\n\t      concatSeq = concatSeq.toKeyedSeq();\n\t    } else if (!isIndexed(iterable)) {\n\t      concatSeq = concatSeq.toSetSeq();\n\t    }\n\t    concatSeq = concatSeq.flatten(true);\n\t    concatSeq.size = iters.reduce(\n\t      function(sum, seq)  {\n\t        if (sum !== undefined) {\n\t          var size = seq.size;\n\t          if (size !== undefined) {\n\t            return sum + size;\n\t          }\n\t        }\n\t      },\n\t      0\n\t    );\n\t    return concatSeq;\n\t  }\n\t\n\t\n\t  function flattenFactory(iterable, depth, useKeys) {\n\t    var flatSequence = makeSequence(iterable);\n\t    flatSequence.__iterateUncached = function(fn, reverse) {\n\t      var iterations = 0;\n\t      var stopped = false;\n\t      function flatDeep(iter, currentDepth) {var this$0 = this;\n\t        iter.__iterate(function(v, k)  {\n\t          if ((!depth || currentDepth < depth) && isIterable(v)) {\n\t            flatDeep(v, currentDepth + 1);\n\t          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n\t            stopped = true;\n\t          }\n\t          return !stopped;\n\t        }, reverse);\n\t      }\n\t      flatDeep(iterable, 0);\n\t      return iterations;\n\t    }\n\t    flatSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterator = iterable.__iterator(type, reverse);\n\t      var stack = [];\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (iterator) {\n\t          var step = iterator.next();\n\t          if (step.done !== false) {\n\t            iterator = stack.pop();\n\t            continue;\n\t          }\n\t          var v = step.value;\n\t          if (type === ITERATE_ENTRIES) {\n\t            v = v[1];\n\t          }\n\t          if ((!depth || stack.length < depth) && isIterable(v)) {\n\t            stack.push(iterator);\n\t            iterator = v.__iterator(type, reverse);\n\t          } else {\n\t            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n\t          }\n\t        }\n\t        return iteratorDone();\n\t      });\n\t    }\n\t    return flatSequence;\n\t  }\n\t\n\t\n\t  function flatMapFactory(iterable, mapper, context) {\n\t    var coerce = iterableClass(iterable);\n\t    return iterable.toSeq().map(\n\t      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n\t    ).flatten(true);\n\t  }\n\t\n\t\n\t  function interposeFactory(iterable, separator) {\n\t    var interposedSequence = makeSequence(iterable);\n\t    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n\t    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k) \n\t        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n\t        fn(v, iterations++, this$0) !== false},\n\t        reverse\n\t      );\n\t      return iterations;\n\t    };\n\t    interposedSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n\t      var iterations = 0;\n\t      var step;\n\t      return new Iterator(function()  {\n\t        if (!step || iterations % 2) {\n\t          step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t        }\n\t        return iterations % 2 ?\n\t          iteratorValue(type, iterations++, separator) :\n\t          iteratorValue(type, iterations++, step.value, step);\n\t      });\n\t    };\n\t    return interposedSequence;\n\t  }\n\t\n\t\n\t  function sortFactory(iterable, comparator, mapper) {\n\t    if (!comparator) {\n\t      comparator = defaultComparator;\n\t    }\n\t    var isKeyedIterable = isKeyed(iterable);\n\t    var index = 0;\n\t    var entries = iterable.toSeq().map(\n\t      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n\t    ).toArray();\n\t    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n\t      isKeyedIterable ?\n\t      function(v, i)  { entries[i].length = 2; } :\n\t      function(v, i)  { entries[i] = v[1]; }\n\t    );\n\t    return isKeyedIterable ? KeyedSeq(entries) :\n\t      isIndexed(iterable) ? IndexedSeq(entries) :\n\t      SetSeq(entries);\n\t  }\n\t\n\t\n\t  function maxFactory(iterable, comparator, mapper) {\n\t    if (!comparator) {\n\t      comparator = defaultComparator;\n\t    }\n\t    if (mapper) {\n\t      var entry = iterable.toSeq()\n\t        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n\t        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n\t      return entry && entry[0];\n\t    } else {\n\t      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n\t    }\n\t  }\n\t\n\t  function maxCompare(comparator, a, b) {\n\t    var comp = comparator(b, a);\n\t    // b is considered the new max if the comparator declares them equal, but\n\t    // they are not equal and b is in fact a nullish value.\n\t    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n\t  }\n\t\n\t\n\t  function zipWithFactory(keyIter, zipper, iters) {\n\t    var zipSequence = makeSequence(keyIter);\n\t    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n\t    // Note: this a generic base implementation of __iterate in terms of\n\t    // __iterator which may be more generically useful in the future.\n\t    zipSequence.__iterate = function(fn, reverse) {\n\t      /* generic:\n\t      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n\t      var step;\n\t      var iterations = 0;\n\t      while (!(step = iterator.next()).done) {\n\t        iterations++;\n\t        if (fn(step.value[1], step.value[0], this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t      */\n\t      // indexed:\n\t      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n\t      var step;\n\t      var iterations = 0;\n\t      while (!(step = iterator.next()).done) {\n\t        if (fn(step.value, iterations++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t    zipSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterators = iters.map(function(i )\n\t        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n\t      );\n\t      var iterations = 0;\n\t      var isDone = false;\n\t      return new Iterator(function()  {\n\t        var steps;\n\t        if (!isDone) {\n\t          steps = iterators.map(function(i ) {return i.next()});\n\t          isDone = steps.some(function(s ) {return s.done});\n\t        }\n\t        if (isDone) {\n\t          return iteratorDone();\n\t        }\n\t        return iteratorValue(\n\t          type,\n\t          iterations++,\n\t          zipper.apply(null, steps.map(function(s ) {return s.value}))\n\t        );\n\t      });\n\t    };\n\t    return zipSequence\n\t  }\n\t\n\t\n\t  // #pragma Helper Functions\n\t\n\t  function reify(iter, seq) {\n\t    return isSeq(iter) ? seq : iter.constructor(seq);\n\t  }\n\t\n\t  function validateEntry(entry) {\n\t    if (entry !== Object(entry)) {\n\t      throw new TypeError('Expected [K, V] tuple: ' + entry);\n\t    }\n\t  }\n\t\n\t  function resolveSize(iter) {\n\t    assertNotInfinite(iter.size);\n\t    return ensureSize(iter);\n\t  }\n\t\n\t  function iterableClass(iterable) {\n\t    return isKeyed(iterable) ? KeyedIterable :\n\t      isIndexed(iterable) ? IndexedIterable :\n\t      SetIterable;\n\t  }\n\t\n\t  function makeSequence(iterable) {\n\t    return Object.create(\n\t      (\n\t        isKeyed(iterable) ? KeyedSeq :\n\t        isIndexed(iterable) ? IndexedSeq :\n\t        SetSeq\n\t      ).prototype\n\t    );\n\t  }\n\t\n\t  function cacheResultThrough() {\n\t    if (this._iter.cacheResult) {\n\t      this._iter.cacheResult();\n\t      this.size = this._iter.size;\n\t      return this;\n\t    } else {\n\t      return Seq.prototype.cacheResult.call(this);\n\t    }\n\t  }\n\t\n\t  function defaultComparator(a, b) {\n\t    return a > b ? 1 : a < b ? -1 : 0;\n\t  }\n\t\n\t  function forceIterator(keyPath) {\n\t    var iter = getIterator(keyPath);\n\t    if (!iter) {\n\t      // Array might not be iterable in this environment, so we need a fallback\n\t      // to our wrapped type.\n\t      if (!isArrayLike(keyPath)) {\n\t        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n\t      }\n\t      iter = getIterator(Iterable(keyPath));\n\t    }\n\t    return iter;\n\t  }\n\t\n\t  createClass(Record, KeyedCollection);\n\t\n\t    function Record(defaultValues, name) {\n\t      var hasInitialized;\n\t\n\t      var RecordType = function Record(values) {\n\t        if (values instanceof RecordType) {\n\t          return values;\n\t        }\n\t        if (!(this instanceof RecordType)) {\n\t          return new RecordType(values);\n\t        }\n\t        if (!hasInitialized) {\n\t          hasInitialized = true;\n\t          var keys = Object.keys(defaultValues);\n\t          setProps(RecordTypePrototype, keys);\n\t          RecordTypePrototype.size = keys.length;\n\t          RecordTypePrototype._name = name;\n\t          RecordTypePrototype._keys = keys;\n\t          RecordTypePrototype._defaultValues = defaultValues;\n\t        }\n\t        this._map = Map(values);\n\t      };\n\t\n\t      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n\t      RecordTypePrototype.constructor = RecordType;\n\t\n\t      return RecordType;\n\t    }\n\t\n\t    Record.prototype.toString = function() {\n\t      return this.__toString(recordName(this) + ' {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Record.prototype.has = function(k) {\n\t      return this._defaultValues.hasOwnProperty(k);\n\t    };\n\t\n\t    Record.prototype.get = function(k, notSetValue) {\n\t      if (!this.has(k)) {\n\t        return notSetValue;\n\t      }\n\t      var defaultVal = this._defaultValues[k];\n\t      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Record.prototype.clear = function() {\n\t      if (this.__ownerID) {\n\t        this._map && this._map.clear();\n\t        return this;\n\t      }\n\t      var RecordType = this.constructor;\n\t      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n\t    };\n\t\n\t    Record.prototype.set = function(k, v) {\n\t      if (!this.has(k)) {\n\t        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n\t      }\n\t      if (this._map && !this._map.has(k)) {\n\t        var defaultVal = this._defaultValues[k];\n\t        if (v === defaultVal) {\n\t          return this;\n\t        }\n\t      }\n\t      var newMap = this._map && this._map.set(k, v);\n\t      if (this.__ownerID || newMap === this._map) {\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap);\n\t    };\n\t\n\t    Record.prototype.remove = function(k) {\n\t      if (!this.has(k)) {\n\t        return this;\n\t      }\n\t      var newMap = this._map && this._map.remove(k);\n\t      if (this.__ownerID || newMap === this._map) {\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap);\n\t    };\n\t\n\t    Record.prototype.wasAltered = function() {\n\t      return this._map.wasAltered();\n\t    };\n\t\n\t    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n\t      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n\t    };\n\t\n\t    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n\t    };\n\t\n\t    Record.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map && this._map.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap, ownerID);\n\t    };\n\t\n\t\n\t  var RecordPrototype = Record.prototype;\n\t  RecordPrototype[DELETE] = RecordPrototype.remove;\n\t  RecordPrototype.deleteIn =\n\t  RecordPrototype.removeIn = MapPrototype.removeIn;\n\t  RecordPrototype.merge = MapPrototype.merge;\n\t  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n\t  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n\t  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n\t  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n\t  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n\t  RecordPrototype.setIn = MapPrototype.setIn;\n\t  RecordPrototype.update = MapPrototype.update;\n\t  RecordPrototype.updateIn = MapPrototype.updateIn;\n\t  RecordPrototype.withMutations = MapPrototype.withMutations;\n\t  RecordPrototype.asMutable = MapPrototype.asMutable;\n\t  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\t\n\t\n\t  function makeRecord(likeRecord, map, ownerID) {\n\t    var record = Object.create(Object.getPrototypeOf(likeRecord));\n\t    record._map = map;\n\t    record.__ownerID = ownerID;\n\t    return record;\n\t  }\n\t\n\t  function recordName(record) {\n\t    return record._name || record.constructor.name || 'Record';\n\t  }\n\t\n\t  function setProps(prototype, names) {\n\t    try {\n\t      names.forEach(setProp.bind(undefined, prototype));\n\t    } catch (error) {\n\t      // Object.defineProperty failed. Probably IE8.\n\t    }\n\t  }\n\t\n\t  function setProp(prototype, name) {\n\t    Object.defineProperty(prototype, name, {\n\t      get: function() {\n\t        return this.get(name);\n\t      },\n\t      set: function(value) {\n\t        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n\t        this.set(name, value);\n\t      }\n\t    });\n\t  }\n\t\n\t  createClass(Set, SetCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Set(value) {\n\t      return value === null || value === undefined ? emptySet() :\n\t        isSet(value) && !isOrdered(value) ? value :\n\t        emptySet().withMutations(function(set ) {\n\t          var iter = SetIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v ) {return set.add(v)});\n\t        });\n\t    }\n\t\n\t    Set.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    Set.fromKeys = function(value) {\n\t      return this(KeyedIterable(value).keySeq());\n\t    };\n\t\n\t    Set.prototype.toString = function() {\n\t      return this.__toString('Set {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Set.prototype.has = function(value) {\n\t      return this._map.has(value);\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Set.prototype.add = function(value) {\n\t      return updateSet(this, this._map.set(value, true));\n\t    };\n\t\n\t    Set.prototype.remove = function(value) {\n\t      return updateSet(this, this._map.remove(value));\n\t    };\n\t\n\t    Set.prototype.clear = function() {\n\t      return updateSet(this, this._map.clear());\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n\t      iters = iters.filter(function(x ) {return x.size !== 0});\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n\t        return this.constructor(iters[0]);\n\t      }\n\t      return this.withMutations(function(set ) {\n\t        for (var ii = 0; ii < iters.length; ii++) {\n\t          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n\t        }\n\t      });\n\t    };\n\t\n\t    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      iters = iters.map(function(iter ) {return SetIterable(iter)});\n\t      var originalSet = this;\n\t      return this.withMutations(function(set ) {\n\t        originalSet.forEach(function(value ) {\n\t          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n\t            set.remove(value);\n\t          }\n\t        });\n\t      });\n\t    };\n\t\n\t    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      iters = iters.map(function(iter ) {return SetIterable(iter)});\n\t      var originalSet = this;\n\t      return this.withMutations(function(set ) {\n\t        originalSet.forEach(function(value ) {\n\t          if (iters.some(function(iter ) {return iter.includes(value)})) {\n\t            set.remove(value);\n\t          }\n\t        });\n\t      });\n\t    };\n\t\n\t    Set.prototype.merge = function() {\n\t      return this.union.apply(this, arguments);\n\t    };\n\t\n\t    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.union.apply(this, iters);\n\t    };\n\t\n\t    Set.prototype.sort = function(comparator) {\n\t      // Late binding\n\t      return OrderedSet(sortFactory(this, comparator));\n\t    };\n\t\n\t    Set.prototype.sortBy = function(mapper, comparator) {\n\t      // Late binding\n\t      return OrderedSet(sortFactory(this, comparator, mapper));\n\t    };\n\t\n\t    Set.prototype.wasAltered = function() {\n\t      return this._map.wasAltered();\n\t    };\n\t\n\t    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n\t    };\n\t\n\t    Set.prototype.__iterator = function(type, reverse) {\n\t      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n\t    };\n\t\n\t    Set.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        return this;\n\t      }\n\t      return this.__make(newMap, ownerID);\n\t    };\n\t\n\t\n\t  function isSet(maybeSet) {\n\t    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n\t  }\n\t\n\t  Set.isSet = isSet;\n\t\n\t  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\t\n\t  var SetPrototype = Set.prototype;\n\t  SetPrototype[IS_SET_SENTINEL] = true;\n\t  SetPrototype[DELETE] = SetPrototype.remove;\n\t  SetPrototype.mergeDeep = SetPrototype.merge;\n\t  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n\t  SetPrototype.withMutations = MapPrototype.withMutations;\n\t  SetPrototype.asMutable = MapPrototype.asMutable;\n\t  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\t\n\t  SetPrototype.__empty = emptySet;\n\t  SetPrototype.__make = makeSet;\n\t\n\t  function updateSet(set, newMap) {\n\t    if (set.__ownerID) {\n\t      set.size = newMap.size;\n\t      set._map = newMap;\n\t      return set;\n\t    }\n\t    return newMap === set._map ? set :\n\t      newMap.size === 0 ? set.__empty() :\n\t      set.__make(newMap);\n\t  }\n\t\n\t  function makeSet(map, ownerID) {\n\t    var set = Object.create(SetPrototype);\n\t    set.size = map ? map.size : 0;\n\t    set._map = map;\n\t    set.__ownerID = ownerID;\n\t    return set;\n\t  }\n\t\n\t  var EMPTY_SET;\n\t  function emptySet() {\n\t    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n\t  }\n\t\n\t  createClass(OrderedSet, Set);\n\t\n\t    // @pragma Construction\n\t\n\t    function OrderedSet(value) {\n\t      return value === null || value === undefined ? emptyOrderedSet() :\n\t        isOrderedSet(value) ? value :\n\t        emptyOrderedSet().withMutations(function(set ) {\n\t          var iter = SetIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v ) {return set.add(v)});\n\t        });\n\t    }\n\t\n\t    OrderedSet.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    OrderedSet.fromKeys = function(value) {\n\t      return this(KeyedIterable(value).keySeq());\n\t    };\n\t\n\t    OrderedSet.prototype.toString = function() {\n\t      return this.__toString('OrderedSet {', '}');\n\t    };\n\t\n\t\n\t  function isOrderedSet(maybeOrderedSet) {\n\t    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n\t  }\n\t\n\t  OrderedSet.isOrderedSet = isOrderedSet;\n\t\n\t  var OrderedSetPrototype = OrderedSet.prototype;\n\t  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t  OrderedSetPrototype.__empty = emptyOrderedSet;\n\t  OrderedSetPrototype.__make = makeOrderedSet;\n\t\n\t  function makeOrderedSet(map, ownerID) {\n\t    var set = Object.create(OrderedSetPrototype);\n\t    set.size = map ? map.size : 0;\n\t    set._map = map;\n\t    set.__ownerID = ownerID;\n\t    return set;\n\t  }\n\t\n\t  var EMPTY_ORDERED_SET;\n\t  function emptyOrderedSet() {\n\t    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n\t  }\n\t\n\t  createClass(Stack, IndexedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Stack(value) {\n\t      return value === null || value === undefined ? emptyStack() :\n\t        isStack(value) ? value :\n\t        emptyStack().unshiftAll(value);\n\t    }\n\t\n\t    Stack.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    Stack.prototype.toString = function() {\n\t      return this.__toString('Stack [', ']');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Stack.prototype.get = function(index, notSetValue) {\n\t      var head = this._head;\n\t      index = wrapIndex(this, index);\n\t      while (head && index--) {\n\t        head = head.next;\n\t      }\n\t      return head ? head.value : notSetValue;\n\t    };\n\t\n\t    Stack.prototype.peek = function() {\n\t      return this._head && this._head.value;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Stack.prototype.push = function(/*...values*/) {\n\t      if (arguments.length === 0) {\n\t        return this;\n\t      }\n\t      var newSize = this.size + arguments.length;\n\t      var head = this._head;\n\t      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n\t        head = {\n\t          value: arguments[ii],\n\t          next: head\n\t        };\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    Stack.prototype.pushAll = function(iter) {\n\t      iter = IndexedIterable(iter);\n\t      if (iter.size === 0) {\n\t        return this;\n\t      }\n\t      assertNotInfinite(iter.size);\n\t      var newSize = this.size;\n\t      var head = this._head;\n\t      iter.reverse().forEach(function(value ) {\n\t        newSize++;\n\t        head = {\n\t          value: value,\n\t          next: head\n\t        };\n\t      });\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    Stack.prototype.pop = function() {\n\t      return this.slice(1);\n\t    };\n\t\n\t    Stack.prototype.unshift = function(/*...values*/) {\n\t      return this.push.apply(this, arguments);\n\t    };\n\t\n\t    Stack.prototype.unshiftAll = function(iter) {\n\t      return this.pushAll(iter);\n\t    };\n\t\n\t    Stack.prototype.shift = function() {\n\t      return this.pop.apply(this, arguments);\n\t    };\n\t\n\t    Stack.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._head = undefined;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyStack();\n\t    };\n\t\n\t    Stack.prototype.slice = function(begin, end) {\n\t      if (wholeSlice(begin, end, this.size)) {\n\t        return this;\n\t      }\n\t      var resolvedBegin = resolveBegin(begin, this.size);\n\t      var resolvedEnd = resolveEnd(end, this.size);\n\t      if (resolvedEnd !== this.size) {\n\t        // super.slice(begin, end);\n\t        return IndexedCollection.prototype.slice.call(this, begin, end);\n\t      }\n\t      var newSize = this.size - resolvedBegin;\n\t      var head = this._head;\n\t      while (resolvedBegin--) {\n\t        head = head.next;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    // @pragma Mutability\n\t\n\t    Stack.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this.__altered = false;\n\t        return this;\n\t      }\n\t      return makeStack(this.size, this._head, ownerID, this.__hash);\n\t    };\n\t\n\t    // @pragma Iteration\n\t\n\t    Stack.prototype.__iterate = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.reverse().__iterate(fn);\n\t      }\n\t      var iterations = 0;\n\t      var node = this._head;\n\t      while (node) {\n\t        if (fn(node.value, iterations++, this) === false) {\n\t          break;\n\t        }\n\t        node = node.next;\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    Stack.prototype.__iterator = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.reverse().__iterator(type);\n\t      }\n\t      var iterations = 0;\n\t      var node = this._head;\n\t      return new Iterator(function()  {\n\t        if (node) {\n\t          var value = node.value;\n\t          node = node.next;\n\t          return iteratorValue(type, iterations++, value);\n\t        }\n\t        return iteratorDone();\n\t      });\n\t    };\n\t\n\t\n\t  function isStack(maybeStack) {\n\t    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n\t  }\n\t\n\t  Stack.isStack = isStack;\n\t\n\t  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\t\n\t  var StackPrototype = Stack.prototype;\n\t  StackPrototype[IS_STACK_SENTINEL] = true;\n\t  StackPrototype.withMutations = MapPrototype.withMutations;\n\t  StackPrototype.asMutable = MapPrototype.asMutable;\n\t  StackPrototype.asImmutable = MapPrototype.asImmutable;\n\t  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\t\n\t\n\t  function makeStack(size, head, ownerID, hash) {\n\t    var map = Object.create(StackPrototype);\n\t    map.size = size;\n\t    map._head = head;\n\t    map.__ownerID = ownerID;\n\t    map.__hash = hash;\n\t    map.__altered = false;\n\t    return map;\n\t  }\n\t\n\t  var EMPTY_STACK;\n\t  function emptyStack() {\n\t    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n\t  }\n\t\n\t  /**\n\t   * Contributes additional methods to a constructor\n\t   */\n\t  function mixin(ctor, methods) {\n\t    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n\t    Object.keys(methods).forEach(keyCopier);\n\t    Object.getOwnPropertySymbols &&\n\t      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n\t    return ctor;\n\t  }\n\t\n\t  Iterable.Iterator = Iterator;\n\t\n\t  mixin(Iterable, {\n\t\n\t    // ### Conversion to other types\n\t\n\t    toArray: function() {\n\t      assertNotInfinite(this.size);\n\t      var array = new Array(this.size || 0);\n\t      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n\t      return array;\n\t    },\n\t\n\t    toIndexedSeq: function() {\n\t      return new ToIndexedSequence(this);\n\t    },\n\t\n\t    toJS: function() {\n\t      return this.toSeq().map(\n\t        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n\t      ).__toJS();\n\t    },\n\t\n\t    toJSON: function() {\n\t      return this.toSeq().map(\n\t        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n\t      ).__toJS();\n\t    },\n\t\n\t    toKeyedSeq: function() {\n\t      return new ToKeyedSequence(this, true);\n\t    },\n\t\n\t    toMap: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Map(this.toKeyedSeq());\n\t    },\n\t\n\t    toObject: function() {\n\t      assertNotInfinite(this.size);\n\t      var object = {};\n\t      this.__iterate(function(v, k)  { object[k] = v; });\n\t      return object;\n\t    },\n\t\n\t    toOrderedMap: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return OrderedMap(this.toKeyedSeq());\n\t    },\n\t\n\t    toOrderedSet: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toSet: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Set(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toSetSeq: function() {\n\t      return new ToSetSequence(this);\n\t    },\n\t\n\t    toSeq: function() {\n\t      return isIndexed(this) ? this.toIndexedSeq() :\n\t        isKeyed(this) ? this.toKeyedSeq() :\n\t        this.toSetSeq();\n\t    },\n\t\n\t    toStack: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Stack(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toList: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return List(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t\n\t    // ### Common JavaScript methods and properties\n\t\n\t    toString: function() {\n\t      return '[Iterable]';\n\t    },\n\t\n\t    __toString: function(head, tail) {\n\t      if (this.size === 0) {\n\t        return head + tail;\n\t      }\n\t      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n\t    },\n\t\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    concat: function() {var values = SLICE$0.call(arguments, 0);\n\t      return reify(this, concatFactory(this, values));\n\t    },\n\t\n\t    includes: function(searchValue) {\n\t      return this.some(function(value ) {return is(value, searchValue)});\n\t    },\n\t\n\t    entries: function() {\n\t      return this.__iterator(ITERATE_ENTRIES);\n\t    },\n\t\n\t    every: function(predicate, context) {\n\t      assertNotInfinite(this.size);\n\t      var returnValue = true;\n\t      this.__iterate(function(v, k, c)  {\n\t        if (!predicate.call(context, v, k, c)) {\n\t          returnValue = false;\n\t          return false;\n\t        }\n\t      });\n\t      return returnValue;\n\t    },\n\t\n\t    filter: function(predicate, context) {\n\t      return reify(this, filterFactory(this, predicate, context, true));\n\t    },\n\t\n\t    find: function(predicate, context, notSetValue) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry ? entry[1] : notSetValue;\n\t    },\n\t\n\t    forEach: function(sideEffect, context) {\n\t      assertNotInfinite(this.size);\n\t      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n\t    },\n\t\n\t    join: function(separator) {\n\t      assertNotInfinite(this.size);\n\t      separator = separator !== undefined ? '' + separator : ',';\n\t      var joined = '';\n\t      var isFirst = true;\n\t      this.__iterate(function(v ) {\n\t        isFirst ? (isFirst = false) : (joined += separator);\n\t        joined += v !== null && v !== undefined ? v.toString() : '';\n\t      });\n\t      return joined;\n\t    },\n\t\n\t    keys: function() {\n\t      return this.__iterator(ITERATE_KEYS);\n\t    },\n\t\n\t    map: function(mapper, context) {\n\t      return reify(this, mapFactory(this, mapper, context));\n\t    },\n\t\n\t    reduce: function(reducer, initialReduction, context) {\n\t      assertNotInfinite(this.size);\n\t      var reduction;\n\t      var useFirst;\n\t      if (arguments.length < 2) {\n\t        useFirst = true;\n\t      } else {\n\t        reduction = initialReduction;\n\t      }\n\t      this.__iterate(function(v, k, c)  {\n\t        if (useFirst) {\n\t          useFirst = false;\n\t          reduction = v;\n\t        } else {\n\t          reduction = reducer.call(context, reduction, v, k, c);\n\t        }\n\t      });\n\t      return reduction;\n\t    },\n\t\n\t    reduceRight: function(reducer, initialReduction, context) {\n\t      var reversed = this.toKeyedSeq().reverse();\n\t      return reversed.reduce.apply(reversed, arguments);\n\t    },\n\t\n\t    reverse: function() {\n\t      return reify(this, reverseFactory(this, true));\n\t    },\n\t\n\t    slice: function(begin, end) {\n\t      return reify(this, sliceFactory(this, begin, end, true));\n\t    },\n\t\n\t    some: function(predicate, context) {\n\t      return !this.every(not(predicate), context);\n\t    },\n\t\n\t    sort: function(comparator) {\n\t      return reify(this, sortFactory(this, comparator));\n\t    },\n\t\n\t    values: function() {\n\t      return this.__iterator(ITERATE_VALUES);\n\t    },\n\t\n\t\n\t    // ### More sequential methods\n\t\n\t    butLast: function() {\n\t      return this.slice(0, -1);\n\t    },\n\t\n\t    isEmpty: function() {\n\t      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n\t    },\n\t\n\t    count: function(predicate, context) {\n\t      return ensureSize(\n\t        predicate ? this.toSeq().filter(predicate, context) : this\n\t      );\n\t    },\n\t\n\t    countBy: function(grouper, context) {\n\t      return countByFactory(this, grouper, context);\n\t    },\n\t\n\t    equals: function(other) {\n\t      return deepEqual(this, other);\n\t    },\n\t\n\t    entrySeq: function() {\n\t      var iterable = this;\n\t      if (iterable._cache) {\n\t        // We cache as an entries array, so we can just return the cache!\n\t        return new ArraySeq(iterable._cache);\n\t      }\n\t      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n\t      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n\t      return entriesSequence;\n\t    },\n\t\n\t    filterNot: function(predicate, context) {\n\t      return this.filter(not(predicate), context);\n\t    },\n\t\n\t    findEntry: function(predicate, context, notSetValue) {\n\t      var found = notSetValue;\n\t      this.__iterate(function(v, k, c)  {\n\t        if (predicate.call(context, v, k, c)) {\n\t          found = [k, v];\n\t          return false;\n\t        }\n\t      });\n\t      return found;\n\t    },\n\t\n\t    findKey: function(predicate, context) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry && entry[0];\n\t    },\n\t\n\t    findLast: function(predicate, context, notSetValue) {\n\t      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n\t    },\n\t\n\t    findLastEntry: function(predicate, context, notSetValue) {\n\t      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n\t    },\n\t\n\t    findLastKey: function(predicate, context) {\n\t      return this.toKeyedSeq().reverse().findKey(predicate, context);\n\t    },\n\t\n\t    first: function() {\n\t      return this.find(returnTrue);\n\t    },\n\t\n\t    flatMap: function(mapper, context) {\n\t      return reify(this, flatMapFactory(this, mapper, context));\n\t    },\n\t\n\t    flatten: function(depth) {\n\t      return reify(this, flattenFactory(this, depth, true));\n\t    },\n\t\n\t    fromEntrySeq: function() {\n\t      return new FromEntriesSequence(this);\n\t    },\n\t\n\t    get: function(searchKey, notSetValue) {\n\t      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n\t    },\n\t\n\t    getIn: function(searchKeyPath, notSetValue) {\n\t      var nested = this;\n\t      // Note: in an ES6 environment, we would prefer:\n\t      // for (var key of searchKeyPath) {\n\t      var iter = forceIterator(searchKeyPath);\n\t      var step;\n\t      while (!(step = iter.next()).done) {\n\t        var key = step.value;\n\t        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n\t        if (nested === NOT_SET) {\n\t          return notSetValue;\n\t        }\n\t      }\n\t      return nested;\n\t    },\n\t\n\t    groupBy: function(grouper, context) {\n\t      return groupByFactory(this, grouper, context);\n\t    },\n\t\n\t    has: function(searchKey) {\n\t      return this.get(searchKey, NOT_SET) !== NOT_SET;\n\t    },\n\t\n\t    hasIn: function(searchKeyPath) {\n\t      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n\t    },\n\t\n\t    isSubset: function(iter) {\n\t      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n\t      return this.every(function(value ) {return iter.includes(value)});\n\t    },\n\t\n\t    isSuperset: function(iter) {\n\t      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n\t      return iter.isSubset(this);\n\t    },\n\t\n\t    keyOf: function(searchValue) {\n\t      return this.findKey(function(value ) {return is(value, searchValue)});\n\t    },\n\t\n\t    keySeq: function() {\n\t      return this.toSeq().map(keyMapper).toIndexedSeq();\n\t    },\n\t\n\t    last: function() {\n\t      return this.toSeq().reverse().first();\n\t    },\n\t\n\t    lastKeyOf: function(searchValue) {\n\t      return this.toKeyedSeq().reverse().keyOf(searchValue);\n\t    },\n\t\n\t    max: function(comparator) {\n\t      return maxFactory(this, comparator);\n\t    },\n\t\n\t    maxBy: function(mapper, comparator) {\n\t      return maxFactory(this, comparator, mapper);\n\t    },\n\t\n\t    min: function(comparator) {\n\t      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n\t    },\n\t\n\t    minBy: function(mapper, comparator) {\n\t      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n\t    },\n\t\n\t    rest: function() {\n\t      return this.slice(1);\n\t    },\n\t\n\t    skip: function(amount) {\n\t      return this.slice(Math.max(0, amount));\n\t    },\n\t\n\t    skipLast: function(amount) {\n\t      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n\t    },\n\t\n\t    skipWhile: function(predicate, context) {\n\t      return reify(this, skipWhileFactory(this, predicate, context, true));\n\t    },\n\t\n\t    skipUntil: function(predicate, context) {\n\t      return this.skipWhile(not(predicate), context);\n\t    },\n\t\n\t    sortBy: function(mapper, comparator) {\n\t      return reify(this, sortFactory(this, comparator, mapper));\n\t    },\n\t\n\t    take: function(amount) {\n\t      return this.slice(0, Math.max(0, amount));\n\t    },\n\t\n\t    takeLast: function(amount) {\n\t      return reify(this, this.toSeq().reverse().take(amount).reverse());\n\t    },\n\t\n\t    takeWhile: function(predicate, context) {\n\t      return reify(this, takeWhileFactory(this, predicate, context));\n\t    },\n\t\n\t    takeUntil: function(predicate, context) {\n\t      return this.takeWhile(not(predicate), context);\n\t    },\n\t\n\t    valueSeq: function() {\n\t      return this.toIndexedSeq();\n\t    },\n\t\n\t\n\t    // ### Hashable Object\n\t\n\t    hashCode: function() {\n\t      return this.__hash || (this.__hash = hashIterable(this));\n\t    }\n\t\n\t\n\t    // ### Internal\n\t\n\t    // abstract __iterate(fn, reverse)\n\t\n\t    // abstract __iterator(type, reverse)\n\t  });\n\t\n\t  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n\t  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n\t  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n\t  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\t\n\t  var IterablePrototype = Iterable.prototype;\n\t  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n\t  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n\t  IterablePrototype.__toJS = IterablePrototype.toArray;\n\t  IterablePrototype.__toStringMapper = quoteString;\n\t  IterablePrototype.inspect =\n\t  IterablePrototype.toSource = function() { return this.toString(); };\n\t  IterablePrototype.chain = IterablePrototype.flatMap;\n\t  IterablePrototype.contains = IterablePrototype.includes;\n\t\n\t  mixin(KeyedIterable, {\n\t\n\t    // ### More sequential methods\n\t\n\t    flip: function() {\n\t      return reify(this, flipFactory(this));\n\t    },\n\t\n\t    mapEntries: function(mapper, context) {var this$0 = this;\n\t      var iterations = 0;\n\t      return reify(this,\n\t        this.toSeq().map(\n\t          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n\t        ).fromEntrySeq()\n\t      );\n\t    },\n\t\n\t    mapKeys: function(mapper, context) {var this$0 = this;\n\t      return reify(this,\n\t        this.toSeq().flip().map(\n\t          function(k, v)  {return mapper.call(context, k, v, this$0)}\n\t        ).flip()\n\t      );\n\t    }\n\t\n\t  });\n\t\n\t  var KeyedIterablePrototype = KeyedIterable.prototype;\n\t  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n\t  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n\t  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n\t  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\t\n\t\n\t\n\t  mixin(IndexedIterable, {\n\t\n\t    // ### Conversion to other types\n\t\n\t    toKeyedSeq: function() {\n\t      return new ToKeyedSequence(this, false);\n\t    },\n\t\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    filter: function(predicate, context) {\n\t      return reify(this, filterFactory(this, predicate, context, false));\n\t    },\n\t\n\t    findIndex: function(predicate, context) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry ? entry[0] : -1;\n\t    },\n\t\n\t    indexOf: function(searchValue) {\n\t      var key = this.keyOf(searchValue);\n\t      return key === undefined ? -1 : key;\n\t    },\n\t\n\t    lastIndexOf: function(searchValue) {\n\t      var key = this.lastKeyOf(searchValue);\n\t      return key === undefined ? -1 : key;\n\t    },\n\t\n\t    reverse: function() {\n\t      return reify(this, reverseFactory(this, false));\n\t    },\n\t\n\t    slice: function(begin, end) {\n\t      return reify(this, sliceFactory(this, begin, end, false));\n\t    },\n\t\n\t    splice: function(index, removeNum /*, ...values*/) {\n\t      var numArgs = arguments.length;\n\t      removeNum = Math.max(removeNum | 0, 0);\n\t      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n\t        return this;\n\t      }\n\t      // If index is negative, it should resolve relative to the size of the\n\t      // collection. However size may be expensive to compute if not cached, so\n\t      // only call count() if the number is in fact negative.\n\t      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n\t      var spliced = this.slice(0, index);\n\t      return reify(\n\t        this,\n\t        numArgs === 1 ?\n\t          spliced :\n\t          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n\t      );\n\t    },\n\t\n\t\n\t    // ### More collection methods\n\t\n\t    findLastIndex: function(predicate, context) {\n\t      var entry = this.findLastEntry(predicate, context);\n\t      return entry ? entry[0] : -1;\n\t    },\n\t\n\t    first: function() {\n\t      return this.get(0);\n\t    },\n\t\n\t    flatten: function(depth) {\n\t      return reify(this, flattenFactory(this, depth, false));\n\t    },\n\t\n\t    get: function(index, notSetValue) {\n\t      index = wrapIndex(this, index);\n\t      return (index < 0 || (this.size === Infinity ||\n\t          (this.size !== undefined && index > this.size))) ?\n\t        notSetValue :\n\t        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n\t    },\n\t\n\t    has: function(index) {\n\t      index = wrapIndex(this, index);\n\t      return index >= 0 && (this.size !== undefined ?\n\t        this.size === Infinity || index < this.size :\n\t        this.indexOf(index) !== -1\n\t      );\n\t    },\n\t\n\t    interpose: function(separator) {\n\t      return reify(this, interposeFactory(this, separator));\n\t    },\n\t\n\t    interleave: function(/*...iterables*/) {\n\t      var iterables = [this].concat(arrCopy(arguments));\n\t      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n\t      var interleaved = zipped.flatten(true);\n\t      if (zipped.size) {\n\t        interleaved.size = zipped.size * iterables.length;\n\t      }\n\t      return reify(this, interleaved);\n\t    },\n\t\n\t    keySeq: function() {\n\t      return Range(0, this.size);\n\t    },\n\t\n\t    last: function() {\n\t      return this.get(-1);\n\t    },\n\t\n\t    skipWhile: function(predicate, context) {\n\t      return reify(this, skipWhileFactory(this, predicate, context, false));\n\t    },\n\t\n\t    zip: function(/*, ...iterables */) {\n\t      var iterables = [this].concat(arrCopy(arguments));\n\t      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n\t    },\n\t\n\t    zipWith: function(zipper/*, ...iterables */) {\n\t      var iterables = arrCopy(arguments);\n\t      iterables[0] = this;\n\t      return reify(this, zipWithFactory(this, zipper, iterables));\n\t    }\n\t\n\t  });\n\t\n\t  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n\t  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t\n\t  mixin(SetIterable, {\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    get: function(value, notSetValue) {\n\t      return this.has(value) ? value : notSetValue;\n\t    },\n\t\n\t    includes: function(value) {\n\t      return this.has(value);\n\t    },\n\t\n\t\n\t    // ### More sequential methods\n\t\n\t    keySeq: function() {\n\t      return this.valueSeq();\n\t    }\n\t\n\t  });\n\t\n\t  SetIterable.prototype.has = IterablePrototype.includes;\n\t  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\t\n\t\n\t  // Mixin subclasses\n\t\n\t  mixin(KeyedSeq, KeyedIterable.prototype);\n\t  mixin(IndexedSeq, IndexedIterable.prototype);\n\t  mixin(SetSeq, SetIterable.prototype);\n\t\n\t  mixin(KeyedCollection, KeyedIterable.prototype);\n\t  mixin(IndexedCollection, IndexedIterable.prototype);\n\t  mixin(SetCollection, SetIterable.prototype);\n\t\n\t\n\t  // #pragma Helper functions\n\t\n\t  function keyMapper(v, k) {\n\t    return k;\n\t  }\n\t\n\t  function entryMapper(v, k) {\n\t    return [k, v];\n\t  }\n\t\n\t  function not(predicate) {\n\t    return function() {\n\t      return !predicate.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  function neg(predicate) {\n\t    return function() {\n\t      return -predicate.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  function quoteString(value) {\n\t    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n\t  }\n\t\n\t  function defaultZipper() {\n\t    return arrCopy(arguments);\n\t  }\n\t\n\t  function defaultNegComparator(a, b) {\n\t    return a < b ? 1 : a > b ? -1 : 0;\n\t  }\n\t\n\t  function hashIterable(iterable) {\n\t    if (iterable.size === Infinity) {\n\t      return 0;\n\t    }\n\t    var ordered = isOrdered(iterable);\n\t    var keyed = isKeyed(iterable);\n\t    var h = ordered ? 1 : 0;\n\t    var size = iterable.__iterate(\n\t      keyed ?\n\t        ordered ?\n\t          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n\t          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n\t        ordered ?\n\t          function(v ) { h = 31 * h + hash(v) | 0; } :\n\t          function(v ) { h = h + hash(v) | 0; }\n\t    );\n\t    return murmurHashOfSize(size, h);\n\t  }\n\t\n\t  function murmurHashOfSize(size, h) {\n\t    h = imul(h, 0xCC9E2D51);\n\t    h = imul(h << 15 | h >>> -15, 0x1B873593);\n\t    h = imul(h << 13 | h >>> -13, 5);\n\t    h = (h + 0xE6546B64 | 0) ^ size;\n\t    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n\t    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n\t    h = smi(h ^ h >>> 16);\n\t    return h;\n\t  }\n\t\n\t  function hashMerge(a, b) {\n\t    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n\t  }\n\t\n\t  var Immutable = {\n\t\n\t    Iterable: Iterable,\n\t\n\t    Seq: Seq,\n\t    Collection: Collection,\n\t    Map: Map,\n\t    OrderedMap: OrderedMap,\n\t    List: List,\n\t    Stack: Stack,\n\t    Set: Set,\n\t    OrderedSet: OrderedSet,\n\t\n\t    Record: Record,\n\t    Range: Range,\n\t    Repeat: Repeat,\n\t\n\t    is: is,\n\t    fromJS: fromJS\n\t\n\t  };\n\t\n\t  return Immutable;\n\t\n\t}));\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** bundle.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 72b15da47a830cab6827\n **/","/// <reference path='../typings/react/react.d.ts' />\n/// <reference path='../typings/react/react-dom.d.ts' />\n/// <reference path='../node_modules/immutable/dist/immutable.d.ts'/>\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as Immutable from 'immutable';\n\nimport { HelloProps, App } from './hello';\n\nReactDOM.render(\n  <App compiler='Typescript' framework='React' />,\n  document.getElementById('app')\n);\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/index.tsx\n **/","module.exports = React;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"React\"\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = ReactDOM;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"ReactDOM\"\n ** module id = 2\n ** module chunks = 0\n **/","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar React = require('react');\nvar Immutable = require('immutable');\nvar map = Immutable.Map({ a: 1, b: 2, c: 3 });\nvar App = (function (_super) {\n    __extends(App, _super);\n    function App() {\n        _super.apply(this, arguments);\n    }\n    App.prototype.render = function () {\n        return React.createElement(\"p\", null, \n            map.get('b'), \n            \" Hello from \", \n            this.props.compiler, \n            \" & \", \n            this.props.framework, \n            \"!\");\n    };\n    return App;\n}(React.Component));\nexports.App = App;\n//# sourceMappingURL=hello.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/hello.js\n ** module id = 3\n ** module chunks = 0\n **/","/**\n *  Copyright (c) 2014-2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.Immutable = factory());\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\n  function createClass(ctor, superClass) {\n    if (superClass) {\n      ctor.prototype = Object.create(superClass.prototype);\n    }\n    ctor.prototype.constructor = ctor;\n  }\n\n  function Iterable(value) {\n      return isIterable(value) ? value : Seq(value);\n    }\n\n\n  createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n\n  createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n\n  createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n\n\n  function isIterable(maybeIterable) {\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n  }\n\n  function isKeyed(maybeKeyed) {\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n  }\n\n  function isIndexed(maybeIndexed) {\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  function isOrdered(maybeOrdered) {\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n  }\n\n  Iterable.isIterable = isIterable;\n  Iterable.isKeyed = isKeyed;\n  Iterable.isIndexed = isIndexed;\n  Iterable.isAssociative = isAssociative;\n  Iterable.isOrdered = isOrdered;\n\n  Iterable.Keyed = KeyedIterable;\n  Iterable.Indexed = IndexedIterable;\n  Iterable.Set = SetIterable;\n\n\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  var CHANGE_LENGTH = { value: false };\n  var DID_ALTER = { value: false };\n\n  function MakeRef(ref) {\n    ref.value = false;\n    return ref;\n  }\n\n  function SetRef(ref) {\n    ref && (ref.value = true);\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32−1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== 'number') {\n      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n        return NaN;\n      }\n      index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size));\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    return index === undefined ?\n      defaultIndex :\n      index < 0 ?\n        Math.max(0, size + index) :\n        size === undefined ?\n          index :\n          Math.min(size, index);\n  }\n\n  /* global Symbol */\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n\n  function Iterator(next) {\n      this.next = next;\n    }\n\n    Iterator.prototype.toString = function() {\n      return '[Iterator]';\n    };\n\n\n  Iterator.KEYS = ITERATE_KEYS;\n  Iterator.VALUES = ITERATE_VALUES;\n  Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  Iterator.prototype.inspect =\n  Iterator.prototype.toSource = function () { return this.toString(); }\n  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n      value: value, done: false\n    });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn = iterable && (\n      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]\n    );\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number';\n  }\n\n  createClass(Seq, Iterable);\n    function Seq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n\n    Seq.of = function(/*...values*/) {\n      return Seq(arguments);\n    };\n\n    Seq.prototype.toSeq = function() {\n      return this;\n    };\n\n    Seq.prototype.toString = function() {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function() {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, true);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, true);\n    };\n\n\n\n  createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n      return value === null || value === undefined ?\n        emptySequence().toKeyedSeq() :\n        isIterable(value) ?\n          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n          keyedSeqFromValue(value);\n    }\n\n    KeyedSeq.prototype.toKeyedSeq = function() {\n      return this;\n    };\n\n\n\n  createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n\n    IndexedSeq.of = function(/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function() {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function() {\n      return this.__toString('Seq [', ']');\n    };\n\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, false);\n    };\n\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, false);\n    };\n\n\n\n  createClass(SetSeq, Seq);\n    function SetSeq(value) {\n      return (\n        value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value\n      ).toSetSeq();\n    }\n\n    SetSeq.of = function(/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function() {\n      return this;\n    };\n\n\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\n  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\n\n\n  createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    ArraySeq.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n      );\n    };\n\n\n\n  createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n      var keys = Object.keys(object);\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function(key) {\n      return this._object.hasOwnProperty(key);\n    };\n\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        if (fn(object[key], key, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, key, object[key]);\n      });\n    };\n\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n      this._iterable = iterable;\n      this.size = iterable.length || iterable.size;\n    }\n\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      if (!isIterator(iterator)) {\n        return new Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n\n\n  createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n      this._iterator = iterator;\n      this._iteratorCache = [];\n    }\n\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      while (iterations < cache.length) {\n        if (fn(cache[iterations], iterations++, this) === false) {\n          return iterations;\n        }\n      }\n      var step;\n      while (!(step = iterator.next()).done) {\n        var val = step.value;\n        cache[iterations] = val;\n        if (fn(val, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      return new Iterator(function()  {\n        if (iterations >= cache.length) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          cache[iterations] = step.value;\n        }\n        return iteratorValue(type, iterations, cache[iterations++]);\n      });\n    };\n\n\n\n\n  // # pragma Helper functions\n\n  function isSeq(maybeSeq) {\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n  }\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq =\n      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n      typeof value === 'object' ? new ObjectSeq(value) :\n      undefined;\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of [k, v] entries, '+\n        'or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value) ||\n      (typeof value === 'object' && new ObjectSeq(value));\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values, or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return (\n      isArrayLike(value) ? new ArraySeq(value) :\n      isIterator(value) ? new IteratorSeq(value) :\n      hasIterator(value) ? new IterableSeq(value) :\n      undefined\n    );\n  }\n\n  function seqIterate(seq, fn, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    }\n    return seq.__iterateUncached(fn, reverse);\n  }\n\n  function seqIterator(seq, type, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n      });\n    }\n    return seq.__iteratorUncached(type, reverse);\n  }\n\n  function fromJS(json, converter) {\n    return converter ?\n      fromJSWith(converter, json, '', {'': json}) :\n      fromJSDefault(json);\n  }\n\n  function fromJSWith(converter, json, key, parentJSON) {\n    if (Array.isArray(json)) {\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    if (isPlainObj(json)) {\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    return json;\n  }\n\n  function fromJSDefault(json) {\n    if (Array.isArray(json)) {\n      return IndexedSeq(json).map(fromJSDefault).toList();\n    }\n    if (isPlainObj(json)) {\n      return KeyedSeq(json).map(fromJSDefault).toMap();\n    }\n    return json;\n  }\n\n  function isPlainObj(value) {\n    return value && (value.constructor === Object || value.constructor === undefined);\n  }\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (typeof valueA.valueOf === 'function' &&\n        typeof valueB.valueOf === 'function') {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    if (typeof valueA.equals === 'function' &&\n        typeof valueB.equals === 'function' &&\n        valueA.equals(valueB)) {\n      return true;\n    }\n    return false;\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isIterable(b) ||\n      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return b.every(function(v, k)  {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done;\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k)  {\n      if (notAssociative ? !a.has(v) :\n          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  createClass(Repeat, IndexedSeq);\n\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    Repeat.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.includes = function(searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function(begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size) ? this :\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n\n    Repeat.prototype.reverse = function() {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function(fn, reverse) {\n      for (var ii = 0; ii < this.size; ii++) {\n        if (fn(this._value, ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n      );\n    };\n\n    Repeat.prototype.equals = function(other) {\n      return other instanceof Repeat ?\n        is(this._value, other._value) :\n        deepEqual(other);\n    };\n\n\n  var EMPTY_REPEAT;\n\n  function invariant(condition, error) {\n    if (!condition) throw new Error(error);\n  }\n\n  createClass(Range, IndexedSeq);\n\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    Range.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return 'Range [ ' +\n        this._start + '...' + this._end +\n        (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]';\n    };\n\n    Range.prototype.get = function(index, notSetValue) {\n      return this.has(index) ?\n        this._start + wrapIndex(this, index) * this._step :\n        notSetValue;\n    };\n\n    Range.prototype.includes = function(searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex);\n    };\n\n    Range.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n\n    Range.prototype.indexOf = function(searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function(searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function(fn, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(value, ii, this) === false) {\n          return ii + 1;\n        }\n        value += reverse ? -step : step;\n      }\n      return ii;\n    };\n\n    Range.prototype.__iterator = function(type, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      var ii = 0;\n      return new Iterator(function()  {\n        var v = value;\n        value += reverse ? -step : step;\n        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n      });\n    };\n\n    Range.prototype.equals = function(other) {\n      return other instanceof Range ?\n        this._start === other._start &&\n        this._end === other._end &&\n        this._step === other._step :\n        deepEqual(this, other);\n    };\n\n\n  var EMPTY_RANGE;\n\n  createClass(Collection, Iterable);\n    function Collection() {\n      throw TypeError('Abstract');\n    }\n\n\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\n  createClass(SetCollection, Collection);function SetCollection() {}\n\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  var imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n    Math.imul :\n    function imul(a, b) {\n      a = a | 0; // int\n      b = b | 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n    };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n  }\n\n  function hash(o) {\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n    if (typeof o.valueOf === 'function') {\n      o = o.valueOf();\n      if (o === false || o === null || o === undefined) {\n        return 0;\n      }\n    }\n    if (o === true) {\n      return 1;\n    }\n    var type = typeof o;\n    if (type === 'number') {\n      if (o !== o || o === Infinity) {\n        return 0;\n      }\n      var h = o | 0;\n      if (h !== o) {\n        h ^= o * 0xFFFFFFFF;\n      }\n      while (o > 0xFFFFFFFF) {\n        o /= 0xFFFFFFFF;\n        h ^= o;\n      }\n      return smi(h);\n    }\n    if (type === 'string') {\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n    }\n    if (typeof o.hashCode === 'function') {\n      return o.hashCode();\n    }\n    if (type === 'object') {\n      return hashJSObj(o);\n    }\n    if (typeof o.toString === 'function') {\n      return hashString(o.toString());\n    }\n    throw new Error('Value type ' + type + ' cannot be hashed.');\n  }\n\n  function cachedHashString(string) {\n    var hash = stringHashCache[string];\n    if (hash === undefined) {\n      hash = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hash;\n    }\n    return hash;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hash = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hash = 31 * hash + string.charCodeAt(ii) | 0;\n    }\n    return smi(hash);\n  }\n\n  function hashJSObj(obj) {\n    var hash;\n    if (usingWeakMap) {\n      hash = weakMap.get(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = obj[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    if (!canDefineProperty) {\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hash !== undefined) {\n        return hash;\n      }\n\n      hash = getIENodeHash(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = ++objHashUID;\n    if (objHashUID & 0x40000000) {\n      objHashUID = 0;\n    }\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hash);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        'enumerable': false,\n        'configurable': false,\n        'writable': false,\n        'value': hash\n      });\n    } else if (obj.propertyIsEnumerable !== undefined &&\n               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function() {\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hash;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hash;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function() {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }());\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  createClass(Map, KeyedCollection);\n\n    // @pragma Construction\n\n    function Map(value) {\n      return value === null || value === undefined ? emptyMap() :\n        isMap(value) && !isOrdered(value) ? value :\n        emptyMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n      return emptyMap().withMutations(function(map ) {\n        for (var i = 0; i < keyValues.length; i += 2) {\n          if (i + 1 >= keyValues.length) {\n            throw new Error('Missing value for key: ' + keyValues[i]);\n          }\n          map.set(keyValues[i], keyValues[i + 1]);\n        }\n      });\n    };\n\n    Map.prototype.toString = function() {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    Map.prototype.get = function(k, notSetValue) {\n      return this._root ?\n        this._root.get(0, undefined, k, notSetValue) :\n        notSetValue;\n    };\n\n    // @pragma Modification\n\n    Map.prototype.set = function(k, v) {\n      return updateMap(this, k, v);\n    };\n\n    Map.prototype.setIn = function(keyPath, v) {\n      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n    };\n\n    Map.prototype.remove = function(k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    Map.prototype.deleteIn = function(keyPath) {\n      return this.updateIn(keyPath, function()  {return NOT_SET});\n    };\n\n    Map.prototype.update = function(k, notSetValue, updater) {\n      return arguments.length === 1 ?\n        k(this) :\n        this.updateIn([k], notSetValue, updater);\n    };\n\n    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n      if (!updater) {\n        updater = notSetValue;\n        notSetValue = undefined;\n      }\n      var updatedValue = updateInDeepMap(\n        this,\n        forceIterator(keyPath),\n        notSetValue,\n        updater\n      );\n      return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n\n    Map.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    Map.prototype.merge = function(/*...iters*/) {\n      return mergeIntoMapWith(this, undefined, arguments);\n    };\n\n    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, merger, iters);\n    };\n\n    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.merge === 'function' ?\n          m.merge.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoMapWith(this, deepMerger, arguments);\n    };\n\n    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n    };\n\n    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.mergeDeep === 'function' ?\n          m.mergeDeep.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    Map.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    // @pragma Mutability\n\n    Map.prototype.withMutations = function(fn) {\n      var mutable = this.asMutable();\n      fn(mutable);\n      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n\n    Map.prototype.asMutable = function() {\n      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n\n    Map.prototype.asImmutable = function() {\n      return this.__ensureOwner();\n    };\n\n    Map.prototype.wasAltered = function() {\n      return this.__altered;\n    };\n\n    Map.prototype.__iterator = function(type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      this._root && this._root.iterate(function(entry ) {\n        iterations++;\n        return fn(entry[1], entry[0], this$0);\n      }, reverse);\n      return iterations;\n    };\n\n    Map.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n\n  function isMap(maybeMap) {\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n  }\n\n  Map.isMap = isMap;\n\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\n  var MapPrototype = Map.prototype;\n  MapPrototype[IS_MAP_SENTINEL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeIn = MapPrototype.deleteIn;\n\n\n  // #pragma Trie Nodes\n\n\n\n    function ArrayMapNode(ownerID, entries) {\n      this.ownerID = ownerID;\n      this.entries = entries;\n    }\n\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && entries.length === 1) {\n        return; // undefined\n      }\n\n      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n        return createNodes(ownerID, entries, key, value);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new ArrayMapNode(ownerID, newEntries);\n    };\n\n\n\n\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n      this.ownerID = ownerID;\n      this.bitmap = bitmap;\n      this.nodes = nodes;\n    }\n\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n      var bitmap = this.bitmap;\n      return (bitmap & bit) === 0 ? notSetValue :\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var bit = 1 << keyHashFrag;\n      var bitmap = this.bitmap;\n      var exists = (bitmap & bit) !== 0;\n\n      if (!exists && value === NOT_SET) {\n        return this;\n      }\n\n      var idx = popCount(bitmap & (bit - 1));\n      var nodes = this.nodes;\n      var node = exists ? nodes[idx] : undefined;\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\n      if (newNode === node) {\n        return this;\n      }\n\n      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n      }\n\n      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n        return nodes[idx ^ 1];\n      }\n\n      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n        return newNode;\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n      var newNodes = exists ? newNode ?\n        setIn(nodes, idx, newNode, isEditable) :\n        spliceOut(nodes, idx, isEditable) :\n        spliceIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.bitmap = newBitmap;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n\n\n\n\n    function HashArrayMapNode(ownerID, count, nodes) {\n      this.ownerID = ownerID;\n      this.count = count;\n      this.nodes = nodes;\n    }\n\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var node = this.nodes[idx];\n      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var removed = value === NOT_SET;\n      var nodes = this.nodes;\n      var node = nodes[idx];\n\n      if (removed && !node) {\n        return this;\n      }\n\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n      if (newNode === node) {\n        return this;\n      }\n\n      var newCount = this.count;\n      if (!node) {\n        newCount++;\n      } else if (!newNode) {\n        newCount--;\n        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n          return packNodes(ownerID, nodes, newCount, idx);\n        }\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.count = newCount;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n\n\n\n\n    function HashCollisionNode(ownerID, keyHash, entries) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entries = entries;\n    }\n\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n\n      var removed = value === NOT_SET;\n\n      if (keyHash !== this.keyHash) {\n        if (removed) {\n          return this;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n      }\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && len === 2) {\n        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n\n\n\n\n    function ValueNode(ownerID, keyHash, entry) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entry = entry;\n    }\n\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n      var keyMatch = is(key, this.entry[0]);\n      if (keyMatch ? value === this.entry[1] : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n\n      if (removed) {\n        SetRef(didChangeSize);\n        return; // undefined\n      }\n\n      if (keyMatch) {\n        if (ownerID && ownerID === this.ownerID) {\n          this.entry[1] = value;\n          return this;\n        }\n        return new ValueNode(ownerID, this.keyHash, [key, value]);\n      }\n\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n    };\n\n\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate =\n  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  }\n\n  BitmapIndexedNode.prototype.iterate =\n  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  }\n\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  }\n\n  createClass(MapIterator, Iterator);\n\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    MapIterator.prototype.next = function() {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex;\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef(CHANGE_LENGTH);\n      var didAlter = MakeRef(DID_ALTER);\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n  }\n\n  function isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes = idx1 === idx2 ?\n      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function mergeIntoMapWith(map, merger, iterables) {\n    var iters = [];\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = KeyedIterable(value);\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    return mergeIntoCollectionWith(map, merger, iters);\n  }\n\n  function deepMerger(existing, value, key) {\n    return existing && existing.mergeDeep && isIterable(value) ?\n      existing.mergeDeep(value) :\n      is(existing, value) ? existing : value;\n  }\n\n  function deepMergerWith(merger) {\n    return function(existing, value, key)  {\n      if (existing && existing.mergeDeepWith && isIterable(value)) {\n        return existing.mergeDeepWith(merger, value);\n      }\n      var nextValue = merger(existing, value, key);\n      return is(existing, nextValue) ? existing : nextValue;\n    };\n  }\n\n  function mergeIntoCollectionWith(collection, merger, iters) {\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection ) {\n      var mergeIntoMap = merger ?\n        function(value, key)  {\n          collection.update(key, NOT_SET, function(existing )\n            {return existing === NOT_SET ? value : merger(existing, value, key)}\n          );\n        } :\n        function(value, key)  {\n          collection.set(key, value);\n        }\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoMap);\n      }\n    });\n  }\n\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n    var isNotSet = existing === NOT_SET;\n    var step = keyPathIter.next();\n    if (step.done) {\n      var existingValue = isNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    invariant(\n      isNotSet || (existing && existing.set),\n      'invalid keyPath'\n    );\n    var key = step.value;\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n    var nextUpdated = updateInDeepMap(\n      nextExisting,\n      keyPathIter,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting ? existing :\n      nextUpdated === NOT_SET ? existing.remove(key) :\n      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n  }\n\n  function popCount(x) {\n    x = x - ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x = x + (x >> 8);\n    x = x + (x >> 16);\n    return x & 0x7f;\n  }\n\n  function setIn(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  createClass(List, IndexedCollection);\n\n    // @pragma Construction\n\n    function List(value) {\n      var empty = emptyList();\n      if (value === null || value === undefined) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedIterable(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function(list ) {\n        list.setSize(size);\n        iter.forEach(function(v, i)  {return list.set(i, v)});\n      });\n    }\n\n    List.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function() {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index >= 0 && index < this.size) {\n        index += this._origin;\n        var node = listNodeFor(this, index);\n        return node && node.array[index & MASK];\n      }\n      return notSetValue;\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function(index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function(index) {\n      return !this.has(index) ? this :\n        index === 0 ? this.shift() :\n        index === this.size - 1 ? this.pop() :\n        this.splice(index, 1);\n    };\n\n    List.prototype.insert = function(index, value) {\n      return this.splice(index, 0, value);\n    };\n\n    List.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function(/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function(list ) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function() {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function(/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function(list ) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function() {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.merge = function(/*...iters*/) {\n      return mergeIntoListWith(this, undefined, arguments);\n    };\n\n    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, merger, iters);\n    };\n\n    List.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoListWith(this, deepMerger, arguments);\n    };\n\n    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n    };\n\n    List.prototype.setSize = function(size) {\n      return setListBounds(this, 0, size);\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function(begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function(type, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      return new Iterator(function()  {\n        var value = values();\n        return value === DONE ?\n          iteratorDone() :\n          iteratorValue(type, index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function(fn, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        return this;\n      }\n      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n\n\n  function isList(maybeList) {\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n  }\n\n  List.isList = isList;\n\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SENTINEL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.setIn = MapPrototype.setIn;\n  ListPrototype.deleteIn =\n  ListPrototype.removeIn = MapPrototype.removeIn;\n  ListPrototype.update = MapPrototype.update;\n  ListPrototype.updateIn = MapPrototype.updateIn;\n  ListPrototype.mergeIn = MapPrototype.mergeIn;\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  ListPrototype.withMutations = MapPrototype.withMutations;\n  ListPrototype.asMutable = MapPrototype.asMutable;\n  ListPrototype.asImmutable = MapPrototype.asImmutable;\n  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n\n    function VNode(array, ownerID) {\n      this.array = array;\n      this.ownerID = ownerID;\n    }\n\n    // TODO: seems like these methods are very similar\n\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n        return this;\n      }\n      var originIndex = (index >>> level) & MASK;\n      if (originIndex >= this.array.length) {\n        return new VNode([], ownerID);\n      }\n      var removingFirst = originIndex === 0;\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[originIndex];\n        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingFirst) {\n          return this;\n        }\n      }\n      if (removingFirst && !newChild) {\n        return this;\n      }\n      var editable = editableVNode(this, ownerID);\n      if (!removingFirst) {\n        for (var ii = 0; ii < originIndex; ii++) {\n          editable.array[ii] = undefined;\n        }\n      }\n      if (newChild) {\n        editable.array[originIndex] = newChild;\n      }\n      return editable;\n    };\n\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n        return this;\n      }\n      var sizeIndex = ((index - 1) >>> level) & MASK;\n      if (sizeIndex >= this.array.length) {\n        return this;\n      }\n\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[sizeIndex];\n        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n          return this;\n        }\n      }\n\n      var editable = editableVNode(this, ownerID);\n      editable.array.splice(sizeIndex + 1);\n      if (newChild) {\n        editable.array[sizeIndex] = newChild;\n      }\n      return editable;\n    };\n\n\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0 ?\n        iterateLeaf(node, offset) :\n        iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        do {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx], level - SHIFT, offset + (idx << level)\n          );\n        } while (true);\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function(list ) {\n        index < 0 ?\n          setListBounds(list, index).set(0, value) :\n          setListBounds(list, 0, index + 1).set(index, value)\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef(DID_ALTER);\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    SetRef(didAlter);\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ?\n      listNodeFor(list, newCapacity - 1) :\n      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function mergeIntoListWith(list, merger, iterables) {\n    var iters = [];\n    var maxSize = 0;\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = IndexedIterable(value);\n      if (iter.size > maxSize) {\n        maxSize = iter.size;\n      }\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    if (maxSize > list.size) {\n      list = list.setSize(maxSize);\n    }\n    return mergeIntoCollectionWith(list, merger, iters);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n  }\n\n  createClass(OrderedMap, Map);\n\n    // @pragma Construction\n\n    function OrderedMap(value) {\n      return value === null || value === undefined ? emptyOrderedMap() :\n        isOrderedMap(value) ? value :\n        emptyOrderedMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    OrderedMap.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function() {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function(k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function(k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function(k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.wasAltered = function() {\n      return this._map.wasAltered() || this._list.wasAltered();\n    };\n\n    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._list.__iterate(\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) { // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else {\n      if (has) {\n        if (v === list.get(i)[1]) {\n          return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [k, v]);\n      } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [k, v]);\n      }\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function(key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function() {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var ii;\n      return this._iter.__iterate(\n        this._useKeys ?\n          function(v, k)  {return fn(v, k, this$0)} :\n          ((ii = reverse ? resolveSize(this) : 0),\n            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n        reverse\n      );\n    };\n\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n      if (this._useKeys) {\n        return this._iter.__iterator(type, reverse);\n      }\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var ii = reverse ? resolveSize(this) : 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n      });\n    };\n\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToIndexedSequence.prototype.includes = function(value) {\n      return this._iter.includes(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n    };\n\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, iterations++, step.value, step)\n      });\n    };\n\n\n\n  createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToSetSequence.prototype.has = function(key) {\n      return this._iter.includes(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n\n\n  createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    FromEntriesSequence.prototype.entrySeq = function() {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(entry ) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedIterable = isIterable(entry);\n          return fn(\n            indexedIterable ? entry.get(1) : entry[1],\n            indexedIterable ? entry.get(0) : entry[0],\n            this$0\n          );\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            var indexedIterable = isIterable(entry);\n            return iteratorValue(\n              type,\n              indexedIterable ? entry.get(0) : entry[0],\n              indexedIterable ? entry.get(1) : entry[1],\n              step\n            );\n          }\n        }\n      });\n    };\n\n\n  ToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\n\n  function flipFactory(iterable) {\n    var flipSequence = makeSequence(iterable);\n    flipSequence._iter = iterable;\n    flipSequence.size = iterable.size;\n    flipSequence.flip = function()  {return iterable};\n    flipSequence.reverse = function () {\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function()  {return iterable.reverse()};\n      return reversedSequence;\n    };\n    flipSequence.has = function(key ) {return iterable.includes(key)};\n    flipSequence.includes = function(key ) {return iterable.has(key)};\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n    }\n    flipSequence.__iteratorUncached = function(type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = iterable.__iterator(type, reverse);\n        return new Iterator(function()  {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return iterable.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    }\n    return flipSequence;\n  }\n\n\n  function mapFactory(iterable, mapper, context) {\n    var mappedSequence = makeSequence(iterable);\n    mappedSequence.size = iterable.size;\n    mappedSequence.has = function(key ) {return iterable.has(key)};\n    mappedSequence.get = function(key, notSetValue)  {\n      var v = iterable.get(key, NOT_SET);\n      return v === NOT_SET ?\n        notSetValue :\n        mapper.call(context, v, key, iterable);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(\n        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n        reverse\n      );\n    }\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, iterable),\n          step\n        );\n      });\n    }\n    return mappedSequence;\n  }\n\n\n  function reverseFactory(iterable, useKeys) {\n    var reversedSequence = makeSequence(iterable);\n    reversedSequence._iter = iterable;\n    reversedSequence.size = iterable.size;\n    reversedSequence.reverse = function()  {return iterable};\n    if (iterable.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(iterable);\n        flipSequence.reverse = function()  {return iterable.flip()};\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function(key, notSetValue) \n      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n    reversedSequence.has = function(key )\n      {return iterable.has(useKeys ? key : -1 - key)};\n    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n    };\n    reversedSequence.__iterator =\n      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n    return reversedSequence;\n  }\n\n\n  function filterFactory(iterable, predicate, context, useKeys) {\n    var filterSequence = makeSequence(iterable);\n    if (useKeys) {\n      filterSequence.has = function(key ) {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n      };\n      filterSequence.get = function(key, notSetValue)  {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n          v : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, iterable)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    }\n    return filterSequence;\n  }\n\n\n  function countByFactory(iterable, grouper, context) {\n    var groups = Map().asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        0,\n        function(a ) {return a + 1}\n      );\n    });\n    return groups.asImmutable();\n  }\n\n\n  function groupByFactory(iterable, grouper, context) {\n    var isKeyedIter = isKeyed(iterable);\n    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n      );\n    });\n    var coerce = iterableClass(iterable);\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n  }\n\n\n  function sliceFactory(iterable, begin, end, useKeys) {\n    var originalSize = iterable.size;\n\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      if (end === Infinity) {\n        end = originalSize;\n      } else {\n        end = end | 0;\n      }\n    }\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return iterable;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this iterable's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(iterable);\n\n    // If iterable.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize ?\n          iterable.get(index + resolvedBegin, notSetValue) :\n          notSetValue;\n      }\n    }\n\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)  {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n                 iterations !== sliceSize;\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES) {\n          return step;\n        } else if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        } else {\n          return iteratorValue(type, iterations - 1, step.value[1], step);\n        }\n      });\n    }\n\n    return sliceSeq;\n  }\n\n\n  function takeWhileFactory(iterable, predicate, context) {\n    var takeSequence = makeSequence(iterable);\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c) \n        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new Iterator(function()  {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$0)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n\n  function skipWhileFactory(iterable, predicate, context, useKeys) {\n    var skipSequence = makeSequence(iterable);\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step, k, v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            } else if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            } else {\n              return iteratorValue(type, iterations++, step.value[1], step);\n            }\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$0));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n\n  function concatFactory(iterable, values) {\n    var isKeyedIterable = isKeyed(iterable);\n    var iters = [iterable].concat(values).map(function(v ) {\n      if (!isIterable(v)) {\n        v = isKeyedIterable ?\n          keyedSeqFromValue(v) :\n          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedIterable) {\n        v = KeyedIterable(v);\n      }\n      return v;\n    }).filter(function(v ) {return v.size !== 0});\n\n    if (iters.length === 0) {\n      return iterable;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (singleton === iterable ||\n          isKeyedIterable && isKeyed(singleton) ||\n          isIndexed(iterable) && isIndexed(singleton)) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedIterable) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(iterable)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(\n      function(sum, seq)  {\n        if (sum !== undefined) {\n          var size = seq.size;\n          if (size !== undefined) {\n            return sum + size;\n          }\n        }\n      },\n      0\n    );\n    return concatSeq;\n  }\n\n\n  function flattenFactory(iterable, depth, useKeys) {\n    var flatSequence = makeSequence(iterable);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {var this$0 = this;\n        iter.__iterate(function(v, k)  {\n          if ((!depth || currentDepth < depth) && isIterable(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n            stopped = true;\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(iterable, 0);\n      return iterations;\n    }\n    flatSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isIterable(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    }\n    return flatSequence;\n  }\n\n\n  function flatMapFactory(iterable, mapper, context) {\n    var coerce = iterableClass(iterable);\n    return iterable.toSeq().map(\n      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n    ).flatten(true);\n  }\n\n\n  function interposeFactory(iterable, separator) {\n    var interposedSequence = makeSequence(iterable);\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k) \n        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n        fn(v, iterations++, this$0) !== false},\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new Iterator(function()  {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2 ?\n          iteratorValue(type, iterations++, separator) :\n          iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n\n  function sortFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedIterable = isKeyed(iterable);\n    var index = 0;\n    var entries = iterable.toSeq().map(\n      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n    ).toArray();\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n      isKeyedIterable ?\n      function(v, i)  { entries[i].length = 2; } :\n      function(v, i)  { entries[i] = v[1]; }\n    );\n    return isKeyedIterable ? KeyedSeq(entries) :\n      isIndexed(iterable) ? IndexedSeq(entries) :\n      SetSeq(entries);\n  }\n\n\n  function maxFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = iterable.toSeq()\n        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n      return entry && entry[0];\n    } else {\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n    }\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n  }\n\n\n  function zipWithFactory(keyIter, zipper, iters) {\n    var zipSequence = makeSequence(keyIter);\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n      var iterators = iters.map(function(i )\n        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new Iterator(function()  {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function(i ) {return i.next()});\n          isDone = steps.some(function(s ) {return s.done});\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(null, steps.map(function(s ) {return s.value}))\n        );\n      });\n    };\n    return zipSequence\n  }\n\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function resolveSize(iter) {\n    assertNotInfinite(iter.size);\n    return ensureSize(iter);\n  }\n\n  function iterableClass(iterable) {\n    return isKeyed(iterable) ? KeyedIterable :\n      isIndexed(iterable) ? IndexedIterable :\n      SetIterable;\n  }\n\n  function makeSequence(iterable) {\n    return Object.create(\n      (\n        isKeyed(iterable) ? KeyedSeq :\n        isIndexed(iterable) ? IndexedSeq :\n        SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    } else {\n      return Seq.prototype.cacheResult.call(this);\n    }\n  }\n\n  function defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function forceIterator(keyPath) {\n    var iter = getIterator(keyPath);\n    if (!iter) {\n      // Array might not be iterable in this environment, so we need a fallback\n      // to our wrapped type.\n      if (!isArrayLike(keyPath)) {\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n      }\n      iter = getIterator(Iterable(keyPath));\n    }\n    return iter;\n  }\n\n  createClass(Record, KeyedCollection);\n\n    function Record(defaultValues, name) {\n      var hasInitialized;\n\n      var RecordType = function Record(values) {\n        if (values instanceof RecordType) {\n          return values;\n        }\n        if (!(this instanceof RecordType)) {\n          return new RecordType(values);\n        }\n        if (!hasInitialized) {\n          hasInitialized = true;\n          var keys = Object.keys(defaultValues);\n          setProps(RecordTypePrototype, keys);\n          RecordTypePrototype.size = keys.length;\n          RecordTypePrototype._name = name;\n          RecordTypePrototype._keys = keys;\n          RecordTypePrototype._defaultValues = defaultValues;\n        }\n        this._map = Map(values);\n      };\n\n      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n      RecordTypePrototype.constructor = RecordType;\n\n      return RecordType;\n    }\n\n    Record.prototype.toString = function() {\n      return this.__toString(recordName(this) + ' {', '}');\n    };\n\n    // @pragma Access\n\n    Record.prototype.has = function(k) {\n      return this._defaultValues.hasOwnProperty(k);\n    };\n\n    Record.prototype.get = function(k, notSetValue) {\n      if (!this.has(k)) {\n        return notSetValue;\n      }\n      var defaultVal = this._defaultValues[k];\n      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n\n    // @pragma Modification\n\n    Record.prototype.clear = function() {\n      if (this.__ownerID) {\n        this._map && this._map.clear();\n        return this;\n      }\n      var RecordType = this.constructor;\n      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n    };\n\n    Record.prototype.set = function(k, v) {\n      if (!this.has(k)) {\n        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n      }\n      if (this._map && !this._map.has(k)) {\n        var defaultVal = this._defaultValues[k];\n        if (v === defaultVal) {\n          return this;\n        }\n      }\n      var newMap = this._map && this._map.set(k, v);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.remove = function(k) {\n      if (!this.has(k)) {\n        return this;\n      }\n      var newMap = this._map && this._map.remove(k);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n    };\n\n    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n    };\n\n    Record.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map && this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return makeRecord(this, newMap, ownerID);\n    };\n\n\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn =\n  RecordPrototype.removeIn = MapPrototype.removeIn;\n  RecordPrototype.merge = MapPrototype.merge;\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  RecordPrototype.setIn = MapPrototype.setIn;\n  RecordPrototype.update = MapPrototype.update;\n  RecordPrototype.updateIn = MapPrototype.updateIn;\n  RecordPrototype.withMutations = MapPrototype.withMutations;\n  RecordPrototype.asMutable = MapPrototype.asMutable;\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\n\n  function makeRecord(likeRecord, map, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._map = map;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record._name || record.constructor.name || 'Record';\n  }\n\n  function setProps(prototype, names) {\n    try {\n      names.forEach(setProp.bind(undefined, prototype));\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  function setProp(prototype, name) {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  }\n\n  createClass(Set, SetCollection);\n\n    // @pragma Construction\n\n    function Set(value) {\n      return value === null || value === undefined ? emptySet() :\n        isSet(value) && !isOrdered(value) ? value :\n        emptySet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    Set.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Set.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    Set.prototype.toString = function() {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    Set.prototype.has = function(value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    Set.prototype.add = function(value) {\n      return updateSet(this, this._map.set(value, true));\n    };\n\n    Set.prototype.remove = function(value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    Set.prototype.clear = function() {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n      iters = iters.filter(function(x ) {return x.size !== 0});\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function(set ) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n        }\n      });\n    };\n\n    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (iters.some(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.merge = function() {\n      return this.union.apply(this, arguments);\n    };\n\n    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return this.union.apply(this, iters);\n    };\n\n    Set.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    Set.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    Set.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n    };\n\n    Set.prototype.__iterator = function(type, reverse) {\n      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n    };\n\n    Set.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n\n  function isSet(maybeSet) {\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n  }\n\n  Set.isSet = isSet;\n\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\n  var SetPrototype = Set.prototype;\n  SetPrototype[IS_SET_SENTINEL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.mergeDeep = SetPrototype.merge;\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n  SetPrototype.withMutations = MapPrototype.withMutations;\n  SetPrototype.asMutable = MapPrototype.asMutable;\n  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map ? set :\n      newMap.size === 0 ? set.__empty() :\n      set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  createClass(OrderedSet, Set);\n\n    // @pragma Construction\n\n    function OrderedSet(value) {\n      return value === null || value === undefined ? emptyOrderedSet() :\n        isOrderedSet(value) ? value :\n        emptyOrderedSet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    OrderedSet.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function() {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n  }\n\n  createClass(Stack, IndexedCollection);\n\n    // @pragma Construction\n\n    function Stack(value) {\n      return value === null || value === undefined ? emptyStack() :\n        isStack(value) ? value :\n        emptyStack().unshiftAll(value);\n    }\n\n    Stack.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function() {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function(index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function() {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function(/*...values*/) {\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments[ii],\n          next: head\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function(iter) {\n      iter = IndexedIterable(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.reverse().forEach(function(value ) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      });\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function() {\n      return this.slice(1);\n    };\n\n    Stack.prototype.unshift = function(/*...values*/) {\n      return this.push.apply(this, arguments);\n    };\n\n    Stack.prototype.unshiftAll = function(iter) {\n      return this.pushAll(iter);\n    };\n\n    Stack.prototype.shift = function() {\n      return this.pop.apply(this, arguments);\n    };\n\n    Stack.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function(fn, reverse) {\n      if (reverse) {\n        return this.reverse().__iterate(fn);\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function(type, reverse) {\n      if (reverse) {\n        return this.reverse().__iterator(type);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new Iterator(function()  {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n\n  function isStack(maybeStack) {\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n  }\n\n  Stack.isStack = isStack;\n\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SENTINEL] = true;\n  StackPrototype.withMutations = MapPrototype.withMutations;\n  StackPrototype.asMutable = MapPrototype.asMutable;\n  StackPrototype.asImmutable = MapPrototype.asImmutable;\n  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  Iterable.Iterator = Iterator;\n\n  mixin(Iterable, {\n\n    // ### Conversion to other types\n\n    toArray: function() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n      return array;\n    },\n\n    toIndexedSeq: function() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n      ).__toJS();\n    },\n\n    toJSON: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n      ).__toJS();\n    },\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Map(this.toKeyedSeq());\n    },\n\n    toObject: function() {\n      assertNotInfinite(this.size);\n      var object = {};\n      this.__iterate(function(v, k)  { object[k] = v; });\n      return object;\n    },\n\n    toOrderedMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function() {\n      return isIndexed(this) ? this.toIndexedSeq() :\n        isKeyed(this) ? this.toKeyedSeq() :\n        this.toSetSeq();\n    },\n\n    toStack: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n\n    // ### Common JavaScript methods and properties\n\n    toString: function() {\n      return '[Iterable]';\n    },\n\n    __toString: function(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function() {var values = SLICE$0.call(arguments, 0);\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function(searchValue) {\n      return this.some(function(value ) {return is(value, searchValue)});\n    },\n\n    entries: function() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function(v, k, c)  {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    forEach: function(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function(v ) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function(reducer, initialReduction, context) {\n      assertNotInfinite(this.size);\n      var reduction;\n      var useFirst;\n      if (arguments.length < 2) {\n        useFirst = true;\n      } else {\n        reduction = initialReduction;\n      }\n      this.__iterate(function(v, k, c)  {\n        if (useFirst) {\n          useFirst = false;\n          reduction = v;\n        } else {\n          reduction = reducer.call(context, reduction, v, k, c);\n        }\n      });\n      return reduction;\n    },\n\n    reduceRight: function(reducer, initialReduction, context) {\n      var reversed = this.toKeyedSeq().reverse();\n      return reversed.reduce.apply(reversed, arguments);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n\n    // ### More sequential methods\n\n    butLast: function() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n    },\n\n    count: function(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function() {\n      var iterable = this;\n      if (iterable._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(iterable._cache);\n      }\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n      return entriesSequence;\n    },\n\n    filterNot: function(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findEntry: function(predicate, context, notSetValue) {\n      var found = notSetValue;\n      this.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findKey: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLast: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    findLastEntry: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n    },\n\n    findLastKey: function(predicate, context) {\n      return this.toKeyedSeq().reverse().findKey(predicate, context);\n    },\n\n    first: function() {\n      return this.find(returnTrue);\n    },\n\n    flatMap: function(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function(searchKey, notSetValue) {\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n    },\n\n    getIn: function(searchKeyPath, notSetValue) {\n      var nested = this;\n      // Note: in an ES6 environment, we would prefer:\n      // for (var key of searchKeyPath) {\n      var iter = forceIterator(searchKeyPath);\n      var step;\n      while (!(step = iter.next()).done) {\n        var key = step.value;\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n        if (nested === NOT_SET) {\n          return notSetValue;\n        }\n      }\n      return nested;\n    },\n\n    groupBy: function(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: function(searchKeyPath) {\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n    },\n\n    isSubset: function(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n      return this.every(function(value ) {return iter.includes(value)});\n    },\n\n    isSuperset: function(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n      return iter.isSubset(this);\n    },\n\n    keyOf: function(searchValue) {\n      return this.findKey(function(value ) {return is(value, searchValue)});\n    },\n\n    keySeq: function() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function() {\n      return this.toSeq().reverse().first();\n    },\n\n    lastKeyOf: function(searchValue) {\n      return this.toKeyedSeq().reverse().keyOf(searchValue);\n    },\n\n    max: function(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function(comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n\n    minBy: function(mapper, comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n\n    rest: function() {\n      return this.slice(1);\n    },\n\n    skip: function(amount) {\n      return this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function(amount) {\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function(amount) {\n      return reify(this, this.toSeq().reverse().take(amount).reverse());\n    },\n\n    takeWhile: function(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    valueSeq: function() {\n      return this.toIndexedSeq();\n    },\n\n\n    // ### Hashable Object\n\n    hashCode: function() {\n      return this.__hash || (this.__hash = hashIterable(this));\n    }\n\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  var IterablePrototype = Iterable.prototype;\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n  IterablePrototype.__toJS = IterablePrototype.toArray;\n  IterablePrototype.__toStringMapper = quoteString;\n  IterablePrototype.inspect =\n  IterablePrototype.toSource = function() { return this.toString(); };\n  IterablePrototype.chain = IterablePrototype.flatMap;\n  IterablePrototype.contains = IterablePrototype.includes;\n\n  mixin(KeyedIterable, {\n\n    // ### More sequential methods\n\n    flip: function() {\n      return reify(this, flipFactory(this));\n    },\n\n    mapEntries: function(mapper, context) {var this$0 = this;\n      var iterations = 0;\n      return reify(this,\n        this.toSeq().map(\n          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n        ).fromEntrySeq()\n      );\n    },\n\n    mapKeys: function(mapper, context) {var this$0 = this;\n      return reify(this,\n        this.toSeq().flip().map(\n          function(k, v)  {return mapper.call(context, k, v, this$0)}\n        ).flip()\n      );\n    }\n\n  });\n\n  var KeyedIterablePrototype = KeyedIterable.prototype;\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\n\n\n  mixin(IndexedIterable, {\n\n    // ### Conversion to other types\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, false);\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function(searchValue) {\n      var key = this.keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function(searchValue) {\n      var key = this.lastKeyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum | 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1 ?\n          spliced :\n          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n\n    // ### More collection methods\n\n    findLastIndex: function(predicate, context) {\n      var entry = this.findLastEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    first: function() {\n      return this.get(0);\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return (index < 0 || (this.size === Infinity ||\n          (this.size !== undefined && index > this.size))) ?\n        notSetValue :\n        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n    },\n\n    has: function(index) {\n      index = wrapIndex(this, index);\n      return index >= 0 && (this.size !== undefined ?\n        this.size === Infinity || index < this.size :\n        this.indexOf(index) !== -1\n      );\n    },\n\n    interpose: function(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function(/*...iterables*/) {\n      var iterables = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * iterables.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    keySeq: function() {\n      return Range(0, this.size);\n    },\n\n    last: function() {\n      return this.get(-1);\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function(/*, ...iterables */) {\n      var iterables = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n    },\n\n    zipWith: function(zipper/*, ...iterables */) {\n      var iterables = arrCopy(arguments);\n      iterables[0] = this;\n      return reify(this, zipWithFactory(this, zipper, iterables));\n    }\n\n  });\n\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n\n  mixin(SetIterable, {\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function(value) {\n      return this.has(value);\n    },\n\n\n    // ### More sequential methods\n\n    keySeq: function() {\n      return this.valueSeq();\n    }\n\n  });\n\n  SetIterable.prototype.has = IterablePrototype.includes;\n  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedIterable.prototype);\n  mixin(IndexedSeq, IndexedIterable.prototype);\n  mixin(SetSeq, SetIterable.prototype);\n\n  mixin(KeyedCollection, KeyedIterable.prototype);\n  mixin(IndexedCollection, IndexedIterable.prototype);\n  mixin(SetCollection, SetIterable.prototype);\n\n\n  // #pragma Helper functions\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    }\n  }\n\n  function neg(predicate) {\n    return function() {\n      return -predicate.apply(this, arguments);\n    }\n  }\n\n  function quoteString(value) {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashIterable(iterable) {\n    if (iterable.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(iterable);\n    var keyed = isKeyed(iterable);\n    var h = ordered ? 1 : 0;\n    var size = iterable.__iterate(\n      keyed ?\n        ordered ?\n          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n        ordered ?\n          function(v ) { h = 31 * h + hash(v) | 0; } :\n          function(v ) { h = h + hash(v) | 0; }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = imul(h, 0xCC9E2D51);\n    h = imul(h << 15 | h >>> -15, 0x1B873593);\n    h = imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = smi(h ^ h >>> 16);\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n  }\n\n  var Immutable = {\n\n    Iterable: Iterable,\n\n    Seq: Seq,\n    Collection: Collection,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS\n\n  };\n\n  return Immutable;\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/immutable/dist/immutable.js\n ** module id = 4\n ** module chunks = 0\n **/"],"sourceRoot":""}